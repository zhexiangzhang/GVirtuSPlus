syntax = "proto3";

option java_package = "ex.grpc";

package cudarpc;

enum QueryType {
    // cuda driver
    cuInit = 0;
    cuDevicePrimaryCtxGetState = 1;
    cuGetProcAddress = 2;
    cuDriverGetVersion = 3;

    // cuda runtime
    cudaDriverGetVersion = 5;
    cudaRuntimeGetVersion = 6;
    cudaGetLastError = 7;

    cudaGetDeviceCount = 10;
    cudaGetDevice = 11;
    cudaGetDeviceProperties = 12;
    cudaDeviceGetAttribute = 13;
    cudaDeviceSynchronize = 14;

    cudaStreamCreate = 20;
    cudaStreamCreateWithFlags = 21;
    cudaStreamCreateWithPriority = 22;
    cudaStreamSynchronize = 23;
    cudaStreamIsCapturing = 24;
    cudaStreamGetCaptureInfo = 25;

    cudaMalloc = 30;
    cudaFree = 31;
    cudaMemcpy = 32;
    cudaMemcpyAsync = 33;
    cudaMemsetAsync = 34;
    cudaGetSymbolAddress = 35;

    cudaEventCreateWithFlags = 40;
    cudaEventQuery = 41;
    cudaEventRecord = 42;

    cudaLaunchKernel = 50;

    // cublas
    cuBLAS_cublasCreate = 100;
    cuBLAS_cublasSetStream = 101;
    cuBLAS_cublasSetMathMode = 102;
    cuBLAS_cublasGetMathMode = 103;
    
    cuBLAS_cublasSgemm = 104;
    cuBLAS_cublasSgemmStridedBatched = 105;

    //cudnn
    cudnnCreate = 200;
    cudnnSetStream = 201;
    cudnnCreateTensorDescriptor = 202;
    cudnnSetTensorNdDescriptor = 203;
    cudnnCreateFilterDescriptor = 204;
    cudnnSetFilterNdDescriptor = 205;
    cudnnCreateConvolutionDescriptor = 206;
    cudnnSetConvolutionNdDescriptor = 207;
    cudnnSetConvolutionGroupCount = 208;
    cudnnSetConvolutionMathType = 209;
    cudnnGetConvolutionForwardAlgorithm_v7 = 210;
    cudnnConvolutionForward = 211;
    cudnnBatchNormalizationForwardInference = 212;
    
    cudnnDestroyConvolutionDescriptor = 250;
    cudnnDestroyFilterDescriptor = 251;
    cudnnDestroyTensorDescriptor = 252;
}

message WapperQuery {
    QueryType type = 1;
    bytes query = 2;
}

message QueryList {
    repeated WapperQuery queries = 1;
    int32 client_id = 3;
    int32 index = 4;
}

message genericResponse {
    int32 error = 1;
}


// cublas & cudnn API
message handleResponse {
    int32 error = 1;
    bytes handle = 2;
}

message setStreamQuery {
    bytes handle = 1;
    bytes stream = 2;
}

message cublasSetMathModeQuery {
    bytes handle = 1;
    int32 mode = 2;
}

message cublasGetMathModeResponse {
    int32 error = 1;
    int32 mode = 2;
}

message cublasSgemmQuery {
    bytes handle = 1;
    int32 transa = 2;
    int32 transb = 3;
    int32 m = 4;
    int32 n = 5;
    int32 k = 6;
    float alpha = 7;
    uint64 matrix_a = 8;
    int32 lda = 9;
    uint64 matrix_b = 10;
    int32 ldb = 11;    
    float beta = 12;
    uint64 matrix_c = 13;
    int32 ldc = 14;    
}

message cublasSgemmStridedBatchedQuery {
    bytes handle = 1;
    int32 transa = 2;
    int32 transb = 3;
    int32 m = 4;
    int32 n = 5;
    int32 k = 6;
    float alpha = 7;
    uint64 matrix_a = 8;
    int32 lda = 9;
    uint64 matrix_b = 10;
    int32 ldb = 11;    
    float beta = 12;
    uint64 matrix_c = 13;
    int32 ldc = 14;    
    int64 stride_a = 15;
    int64 stride_b = 16;
    int64 stride_c = 17;
    int32 count = 18;
}


message cudnnCreateDesciptorResponse {
    int32 error = 1;
    bytes cudnn_descriptor = 2;
}

message cudnnSetTensorNdDescriptorQuery {
    bytes cudnn_descriptor = 1;
    int32 type = 2;
    int32 dims = 3;
    repeated int32 dim_a = 4;
    repeated int32 stride_a = 5;
}

message cudnnSetFilterNdDescriptorQuery {
    bytes cudnn_descriptor = 1;
    int32 type = 2;
    int32 format = 3;
    int32 dims = 4;
    repeated int32 dim_a = 5;
}

message cudnnSetConvolutionNdDescriptorQuery {
    bytes cudnn_descriptor = 1;
    int32 length = 2;
    repeated int32 pad_a = 3;
    repeated int32 stride_a = 4;
    repeated int32 dilation_a = 5;
    int32 mode = 6;
    int32 type = 7;
}

message cudnnSetConvolutionGroupCountQuery {
    bytes cudnn_descriptor = 1;
    int32 count = 2;
}

message cudnnSetConvolutionMathTypeQuery {
    bytes cudnn_descriptor = 1;
    int32 type = 2;
}

message cudnnGetConvolutionForwardAlgorithm_v7Query {
    bytes handle = 1;
    bytes x_desc = 2;
    bytes w_desc = 3;
    bytes conv_desc = 4;
    bytes y_desc = 5;
    int32 count = 6;
}

message cudnnGetConvolutionForwardAlgorithm_v7Response {
    int32 error = 1;
    int32 count = 2;
    bytes results = 3;
}

message cudnnConvolutionForwardQuery {
    bytes handle = 1;
    float alpha = 2;
    bytes x_desc = 3;
    uint64 x = 4;
    bytes w_Desc = 5;
    uint64 w = 6;
    bytes conv_desc = 7;
    int32 algo = 8;
    uint64 workspace = 9;
    uint64 workspace_size = 10;
    float beta = 11;
    bytes y_desc = 12;
    uint64 y = 13;
}

message cudnnBatchNormalizationForwardInferenceQuery {
    bytes handle = 1;
    int32 mode = 2;
    float alpha = 3;
    float beta = 4;
    bytes x_desc = 5;
    uint64 x = 6;
    bytes y_desc = 7;
    uint64 y = 8;
    bytes bn_Desc = 9;
    uint64 bn_scale = 10;
    uint64 bn_bias = 11;
    uint64 es_mean = 12;
    uint64 es_var = 13;
    double epsilon = 14;
}

// cuda driver API
message cuInitQuery {
    uint32 flags = 1;
}

message cuDevicePrimaryCtxGetStateQuery {
    int64 device = 1;
}

message cuDevicePrimaryCtxGetStateResponse {
    int32 error = 1;
    uint32 flags = 2;
    int32 active = 3;
}

message cuGetProcAddressQuery {
    bytes symbol = 1;
    int32 version = 2;
    uint64 flags = 3;
}

message cuGetProcAddressResponse {
    int32 error = 1;
    uint64 pfn = 2;
}

message getVersionResponse{
    int32 error = 1;
    int32 version = 2;
}

// cuda runtime API
// Device management
message cudaGetDeviceResponse {
    int32 error = 1;
    int32 device = 2;
}

message cudaGetDeviceCountResponse {
    int32 error = 1;
    int32 count = 2;
}

message cudaGetDevicePropertiesQuery {
    int32 device = 1;
}
message cudaGetDevicePropertiesResponse {
    int32 error = 1;
    bytes prop = 2;
}

message cudaDeviceGetAttributeQuery {
    int32 attr = 1;
    int32 device = 2;
}
message cudaDeviceGetAttributeResponse {
    int32 error = 1;
    int32 value = 2;
}

// Memory management
message cudaMallocQuery {
    uint64 size = 1;
}
message cudaMallocResponse {
    int32 error = 1;
    uint64 ptr = 2;
}

message cudaFreeQuery {
    uint64 ptr = 1;
}

message cudaMemcpyQuery {
    int32 kind = 1;
    uint64 src = 2;
    uint64 dst = 3;
    uint64 count = 4;
    bytes payload = 5;
}
message cudaMemcpyResponse {
    int32 error = 1;
    bytes payload = 2;
}

message cudaMemcpyAsyncQuery {
    int32 kind = 1;
    uint64 src = 2;
    uint64 dst = 3;
    uint64 count = 4;
    bytes payload = 5;
    bytes stream = 6;
}

message cudaGetSymbolAddressQuery {
    uint64 symbol = 1;
}

message cudaGetSymbolAddressResponse {
    int32 error = 1;
    uint64 ptr = 2;
}

// returned by stream sync
message cudaMemcpyAsyncResponse {
    uint64 ptr = 1;
    bytes payload = 2;
}

message cudaMemsetAsyncQuery {
    uint64 ptr = 1;
    int32 value = 2;
    uint64 count = 3;
    bytes stream = 4;
}

message AsyncResponse {
    int32 error = 1;
    repeated cudaMemcpyAsyncResponse responses = 2;
}

message cudaStreamCreateWithFlagsQuery{
    uint32 flags = 1;
}
message cudaStreamCreateWithPriorityQuery{
    uint32 flags = 1;
    int32 priority = 2;
}

message cudaStreamCreateResponse{
    int32 error = 1;
    bytes stream = 2;
}

message cudaStreamIsCapturingResponse{
    int32 error = 1;
    int32 status = 2;
}

message cudaStreamGetCaptureInfoResponse{
    int32 error = 1;
    int32 status = 2;
    uint64 pid = 3;
}


// event management
message cudaEventCreateWithFlagsQuery {
    uint32 flags = 1;
}

message cudaEventCreateWithFlagsResponse {
    int32 error = 1;
    bytes event = 2;
}

message cudaEventRecordQuery {
    bytes event = 1;
    bytes stream = 2;
}

message cudaLaunchKernelQuery {
    string function = 1;

    uint32 grid_dim_x = 2;
    uint32 grid_dim_y = 3;
    uint32 grid_dim_z = 4;

    uint32 block_dim_x = 5;
    uint32 block_dim_y = 6;
    uint32 block_dim_z = 7;

    repeated bytes args = 8;
    
    uint64 shared_mem = 9;
    bytes stream = 10;
}