// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cudarpc.proto

#ifndef PROTOBUF_INCLUDED_cudarpc_2eproto
#define PROTOBUF_INCLUDED_cudarpc_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_cudarpc_2eproto 

namespace protobuf_cudarpc_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[51];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_cudarpc_2eproto
namespace cudarpc {
class AsyncResponse;
class AsyncResponseDefaultTypeInternal;
extern AsyncResponseDefaultTypeInternal _AsyncResponse_default_instance_;
class QueryList;
class QueryListDefaultTypeInternal;
extern QueryListDefaultTypeInternal _QueryList_default_instance_;
class WapperQuery;
class WapperQueryDefaultTypeInternal;
extern WapperQueryDefaultTypeInternal _WapperQuery_default_instance_;
class cuDevicePrimaryCtxGetStateQuery;
class cuDevicePrimaryCtxGetStateQueryDefaultTypeInternal;
extern cuDevicePrimaryCtxGetStateQueryDefaultTypeInternal _cuDevicePrimaryCtxGetStateQuery_default_instance_;
class cuDevicePrimaryCtxGetStateResponse;
class cuDevicePrimaryCtxGetStateResponseDefaultTypeInternal;
extern cuDevicePrimaryCtxGetStateResponseDefaultTypeInternal _cuDevicePrimaryCtxGetStateResponse_default_instance_;
class cuGetProcAddressQuery;
class cuGetProcAddressQueryDefaultTypeInternal;
extern cuGetProcAddressQueryDefaultTypeInternal _cuGetProcAddressQuery_default_instance_;
class cuGetProcAddressResponse;
class cuGetProcAddressResponseDefaultTypeInternal;
extern cuGetProcAddressResponseDefaultTypeInternal _cuGetProcAddressResponse_default_instance_;
class cuInitQuery;
class cuInitQueryDefaultTypeInternal;
extern cuInitQueryDefaultTypeInternal _cuInitQuery_default_instance_;
class cublasGetMathModeResponse;
class cublasGetMathModeResponseDefaultTypeInternal;
extern cublasGetMathModeResponseDefaultTypeInternal _cublasGetMathModeResponse_default_instance_;
class cublasSetMathModeQuery;
class cublasSetMathModeQueryDefaultTypeInternal;
extern cublasSetMathModeQueryDefaultTypeInternal _cublasSetMathModeQuery_default_instance_;
class cublasSgemmQuery;
class cublasSgemmQueryDefaultTypeInternal;
extern cublasSgemmQueryDefaultTypeInternal _cublasSgemmQuery_default_instance_;
class cublasSgemmStridedBatchedQuery;
class cublasSgemmStridedBatchedQueryDefaultTypeInternal;
extern cublasSgemmStridedBatchedQueryDefaultTypeInternal _cublasSgemmStridedBatchedQuery_default_instance_;
class cudaDeviceGetAttributeQuery;
class cudaDeviceGetAttributeQueryDefaultTypeInternal;
extern cudaDeviceGetAttributeQueryDefaultTypeInternal _cudaDeviceGetAttributeQuery_default_instance_;
class cudaDeviceGetAttributeResponse;
class cudaDeviceGetAttributeResponseDefaultTypeInternal;
extern cudaDeviceGetAttributeResponseDefaultTypeInternal _cudaDeviceGetAttributeResponse_default_instance_;
class cudaEventCreateWithFlagsQuery;
class cudaEventCreateWithFlagsQueryDefaultTypeInternal;
extern cudaEventCreateWithFlagsQueryDefaultTypeInternal _cudaEventCreateWithFlagsQuery_default_instance_;
class cudaEventCreateWithFlagsResponse;
class cudaEventCreateWithFlagsResponseDefaultTypeInternal;
extern cudaEventCreateWithFlagsResponseDefaultTypeInternal _cudaEventCreateWithFlagsResponse_default_instance_;
class cudaEventRecordQuery;
class cudaEventRecordQueryDefaultTypeInternal;
extern cudaEventRecordQueryDefaultTypeInternal _cudaEventRecordQuery_default_instance_;
class cudaFreeQuery;
class cudaFreeQueryDefaultTypeInternal;
extern cudaFreeQueryDefaultTypeInternal _cudaFreeQuery_default_instance_;
class cudaGetDeviceCountResponse;
class cudaGetDeviceCountResponseDefaultTypeInternal;
extern cudaGetDeviceCountResponseDefaultTypeInternal _cudaGetDeviceCountResponse_default_instance_;
class cudaGetDevicePropertiesQuery;
class cudaGetDevicePropertiesQueryDefaultTypeInternal;
extern cudaGetDevicePropertiesQueryDefaultTypeInternal _cudaGetDevicePropertiesQuery_default_instance_;
class cudaGetDevicePropertiesResponse;
class cudaGetDevicePropertiesResponseDefaultTypeInternal;
extern cudaGetDevicePropertiesResponseDefaultTypeInternal _cudaGetDevicePropertiesResponse_default_instance_;
class cudaGetDeviceResponse;
class cudaGetDeviceResponseDefaultTypeInternal;
extern cudaGetDeviceResponseDefaultTypeInternal _cudaGetDeviceResponse_default_instance_;
class cudaGetSymbolAddressQuery;
class cudaGetSymbolAddressQueryDefaultTypeInternal;
extern cudaGetSymbolAddressQueryDefaultTypeInternal _cudaGetSymbolAddressQuery_default_instance_;
class cudaGetSymbolAddressResponse;
class cudaGetSymbolAddressResponseDefaultTypeInternal;
extern cudaGetSymbolAddressResponseDefaultTypeInternal _cudaGetSymbolAddressResponse_default_instance_;
class cudaLaunchKernelQuery;
class cudaLaunchKernelQueryDefaultTypeInternal;
extern cudaLaunchKernelQueryDefaultTypeInternal _cudaLaunchKernelQuery_default_instance_;
class cudaMallocQuery;
class cudaMallocQueryDefaultTypeInternal;
extern cudaMallocQueryDefaultTypeInternal _cudaMallocQuery_default_instance_;
class cudaMallocResponse;
class cudaMallocResponseDefaultTypeInternal;
extern cudaMallocResponseDefaultTypeInternal _cudaMallocResponse_default_instance_;
class cudaMemcpyAsyncQuery;
class cudaMemcpyAsyncQueryDefaultTypeInternal;
extern cudaMemcpyAsyncQueryDefaultTypeInternal _cudaMemcpyAsyncQuery_default_instance_;
class cudaMemcpyAsyncResponse;
class cudaMemcpyAsyncResponseDefaultTypeInternal;
extern cudaMemcpyAsyncResponseDefaultTypeInternal _cudaMemcpyAsyncResponse_default_instance_;
class cudaMemcpyQuery;
class cudaMemcpyQueryDefaultTypeInternal;
extern cudaMemcpyQueryDefaultTypeInternal _cudaMemcpyQuery_default_instance_;
class cudaMemcpyResponse;
class cudaMemcpyResponseDefaultTypeInternal;
extern cudaMemcpyResponseDefaultTypeInternal _cudaMemcpyResponse_default_instance_;
class cudaMemsetAsyncQuery;
class cudaMemsetAsyncQueryDefaultTypeInternal;
extern cudaMemsetAsyncQueryDefaultTypeInternal _cudaMemsetAsyncQuery_default_instance_;
class cudaStreamCreateResponse;
class cudaStreamCreateResponseDefaultTypeInternal;
extern cudaStreamCreateResponseDefaultTypeInternal _cudaStreamCreateResponse_default_instance_;
class cudaStreamCreateWithFlagsQuery;
class cudaStreamCreateWithFlagsQueryDefaultTypeInternal;
extern cudaStreamCreateWithFlagsQueryDefaultTypeInternal _cudaStreamCreateWithFlagsQuery_default_instance_;
class cudaStreamCreateWithPriorityQuery;
class cudaStreamCreateWithPriorityQueryDefaultTypeInternal;
extern cudaStreamCreateWithPriorityQueryDefaultTypeInternal _cudaStreamCreateWithPriorityQuery_default_instance_;
class cudaStreamGetCaptureInfoResponse;
class cudaStreamGetCaptureInfoResponseDefaultTypeInternal;
extern cudaStreamGetCaptureInfoResponseDefaultTypeInternal _cudaStreamGetCaptureInfoResponse_default_instance_;
class cudaStreamIsCapturingResponse;
class cudaStreamIsCapturingResponseDefaultTypeInternal;
extern cudaStreamIsCapturingResponseDefaultTypeInternal _cudaStreamIsCapturingResponse_default_instance_;
class cudnnBatchNormalizationForwardInferenceQuery;
class cudnnBatchNormalizationForwardInferenceQueryDefaultTypeInternal;
extern cudnnBatchNormalizationForwardInferenceQueryDefaultTypeInternal _cudnnBatchNormalizationForwardInferenceQuery_default_instance_;
class cudnnConvolutionForwardQuery;
class cudnnConvolutionForwardQueryDefaultTypeInternal;
extern cudnnConvolutionForwardQueryDefaultTypeInternal _cudnnConvolutionForwardQuery_default_instance_;
class cudnnCreateDesciptorResponse;
class cudnnCreateDesciptorResponseDefaultTypeInternal;
extern cudnnCreateDesciptorResponseDefaultTypeInternal _cudnnCreateDesciptorResponse_default_instance_;
class cudnnGetConvolutionForwardAlgorithm_v7Query;
class cudnnGetConvolutionForwardAlgorithm_v7QueryDefaultTypeInternal;
extern cudnnGetConvolutionForwardAlgorithm_v7QueryDefaultTypeInternal _cudnnGetConvolutionForwardAlgorithm_v7Query_default_instance_;
class cudnnGetConvolutionForwardAlgorithm_v7Response;
class cudnnGetConvolutionForwardAlgorithm_v7ResponseDefaultTypeInternal;
extern cudnnGetConvolutionForwardAlgorithm_v7ResponseDefaultTypeInternal _cudnnGetConvolutionForwardAlgorithm_v7Response_default_instance_;
class cudnnSetConvolutionGroupCountQuery;
class cudnnSetConvolutionGroupCountQueryDefaultTypeInternal;
extern cudnnSetConvolutionGroupCountQueryDefaultTypeInternal _cudnnSetConvolutionGroupCountQuery_default_instance_;
class cudnnSetConvolutionMathTypeQuery;
class cudnnSetConvolutionMathTypeQueryDefaultTypeInternal;
extern cudnnSetConvolutionMathTypeQueryDefaultTypeInternal _cudnnSetConvolutionMathTypeQuery_default_instance_;
class cudnnSetConvolutionNdDescriptorQuery;
class cudnnSetConvolutionNdDescriptorQueryDefaultTypeInternal;
extern cudnnSetConvolutionNdDescriptorQueryDefaultTypeInternal _cudnnSetConvolutionNdDescriptorQuery_default_instance_;
class cudnnSetFilterNdDescriptorQuery;
class cudnnSetFilterNdDescriptorQueryDefaultTypeInternal;
extern cudnnSetFilterNdDescriptorQueryDefaultTypeInternal _cudnnSetFilterNdDescriptorQuery_default_instance_;
class cudnnSetTensorNdDescriptorQuery;
class cudnnSetTensorNdDescriptorQueryDefaultTypeInternal;
extern cudnnSetTensorNdDescriptorQueryDefaultTypeInternal _cudnnSetTensorNdDescriptorQuery_default_instance_;
class genericResponse;
class genericResponseDefaultTypeInternal;
extern genericResponseDefaultTypeInternal _genericResponse_default_instance_;
class getVersionResponse;
class getVersionResponseDefaultTypeInternal;
extern getVersionResponseDefaultTypeInternal _getVersionResponse_default_instance_;
class handleResponse;
class handleResponseDefaultTypeInternal;
extern handleResponseDefaultTypeInternal _handleResponse_default_instance_;
class setStreamQuery;
class setStreamQueryDefaultTypeInternal;
extern setStreamQueryDefaultTypeInternal _setStreamQuery_default_instance_;
}  // namespace cudarpc
namespace google {
namespace protobuf {
template<> ::cudarpc::AsyncResponse* Arena::CreateMaybeMessage<::cudarpc::AsyncResponse>(Arena*);
template<> ::cudarpc::QueryList* Arena::CreateMaybeMessage<::cudarpc::QueryList>(Arena*);
template<> ::cudarpc::WapperQuery* Arena::CreateMaybeMessage<::cudarpc::WapperQuery>(Arena*);
template<> ::cudarpc::cuDevicePrimaryCtxGetStateQuery* Arena::CreateMaybeMessage<::cudarpc::cuDevicePrimaryCtxGetStateQuery>(Arena*);
template<> ::cudarpc::cuDevicePrimaryCtxGetStateResponse* Arena::CreateMaybeMessage<::cudarpc::cuDevicePrimaryCtxGetStateResponse>(Arena*);
template<> ::cudarpc::cuGetProcAddressQuery* Arena::CreateMaybeMessage<::cudarpc::cuGetProcAddressQuery>(Arena*);
template<> ::cudarpc::cuGetProcAddressResponse* Arena::CreateMaybeMessage<::cudarpc::cuGetProcAddressResponse>(Arena*);
template<> ::cudarpc::cuInitQuery* Arena::CreateMaybeMessage<::cudarpc::cuInitQuery>(Arena*);
template<> ::cudarpc::cublasGetMathModeResponse* Arena::CreateMaybeMessage<::cudarpc::cublasGetMathModeResponse>(Arena*);
template<> ::cudarpc::cublasSetMathModeQuery* Arena::CreateMaybeMessage<::cudarpc::cublasSetMathModeQuery>(Arena*);
template<> ::cudarpc::cublasSgemmQuery* Arena::CreateMaybeMessage<::cudarpc::cublasSgemmQuery>(Arena*);
template<> ::cudarpc::cublasSgemmStridedBatchedQuery* Arena::CreateMaybeMessage<::cudarpc::cublasSgemmStridedBatchedQuery>(Arena*);
template<> ::cudarpc::cudaDeviceGetAttributeQuery* Arena::CreateMaybeMessage<::cudarpc::cudaDeviceGetAttributeQuery>(Arena*);
template<> ::cudarpc::cudaDeviceGetAttributeResponse* Arena::CreateMaybeMessage<::cudarpc::cudaDeviceGetAttributeResponse>(Arena*);
template<> ::cudarpc::cudaEventCreateWithFlagsQuery* Arena::CreateMaybeMessage<::cudarpc::cudaEventCreateWithFlagsQuery>(Arena*);
template<> ::cudarpc::cudaEventCreateWithFlagsResponse* Arena::CreateMaybeMessage<::cudarpc::cudaEventCreateWithFlagsResponse>(Arena*);
template<> ::cudarpc::cudaEventRecordQuery* Arena::CreateMaybeMessage<::cudarpc::cudaEventRecordQuery>(Arena*);
template<> ::cudarpc::cudaFreeQuery* Arena::CreateMaybeMessage<::cudarpc::cudaFreeQuery>(Arena*);
template<> ::cudarpc::cudaGetDeviceCountResponse* Arena::CreateMaybeMessage<::cudarpc::cudaGetDeviceCountResponse>(Arena*);
template<> ::cudarpc::cudaGetDevicePropertiesQuery* Arena::CreateMaybeMessage<::cudarpc::cudaGetDevicePropertiesQuery>(Arena*);
template<> ::cudarpc::cudaGetDevicePropertiesResponse* Arena::CreateMaybeMessage<::cudarpc::cudaGetDevicePropertiesResponse>(Arena*);
template<> ::cudarpc::cudaGetDeviceResponse* Arena::CreateMaybeMessage<::cudarpc::cudaGetDeviceResponse>(Arena*);
template<> ::cudarpc::cudaGetSymbolAddressQuery* Arena::CreateMaybeMessage<::cudarpc::cudaGetSymbolAddressQuery>(Arena*);
template<> ::cudarpc::cudaGetSymbolAddressResponse* Arena::CreateMaybeMessage<::cudarpc::cudaGetSymbolAddressResponse>(Arena*);
template<> ::cudarpc::cudaLaunchKernelQuery* Arena::CreateMaybeMessage<::cudarpc::cudaLaunchKernelQuery>(Arena*);
template<> ::cudarpc::cudaMallocQuery* Arena::CreateMaybeMessage<::cudarpc::cudaMallocQuery>(Arena*);
template<> ::cudarpc::cudaMallocResponse* Arena::CreateMaybeMessage<::cudarpc::cudaMallocResponse>(Arena*);
template<> ::cudarpc::cudaMemcpyAsyncQuery* Arena::CreateMaybeMessage<::cudarpc::cudaMemcpyAsyncQuery>(Arena*);
template<> ::cudarpc::cudaMemcpyAsyncResponse* Arena::CreateMaybeMessage<::cudarpc::cudaMemcpyAsyncResponse>(Arena*);
template<> ::cudarpc::cudaMemcpyQuery* Arena::CreateMaybeMessage<::cudarpc::cudaMemcpyQuery>(Arena*);
template<> ::cudarpc::cudaMemcpyResponse* Arena::CreateMaybeMessage<::cudarpc::cudaMemcpyResponse>(Arena*);
template<> ::cudarpc::cudaMemsetAsyncQuery* Arena::CreateMaybeMessage<::cudarpc::cudaMemsetAsyncQuery>(Arena*);
template<> ::cudarpc::cudaStreamCreateResponse* Arena::CreateMaybeMessage<::cudarpc::cudaStreamCreateResponse>(Arena*);
template<> ::cudarpc::cudaStreamCreateWithFlagsQuery* Arena::CreateMaybeMessage<::cudarpc::cudaStreamCreateWithFlagsQuery>(Arena*);
template<> ::cudarpc::cudaStreamCreateWithPriorityQuery* Arena::CreateMaybeMessage<::cudarpc::cudaStreamCreateWithPriorityQuery>(Arena*);
template<> ::cudarpc::cudaStreamGetCaptureInfoResponse* Arena::CreateMaybeMessage<::cudarpc::cudaStreamGetCaptureInfoResponse>(Arena*);
template<> ::cudarpc::cudaStreamIsCapturingResponse* Arena::CreateMaybeMessage<::cudarpc::cudaStreamIsCapturingResponse>(Arena*);
template<> ::cudarpc::cudnnBatchNormalizationForwardInferenceQuery* Arena::CreateMaybeMessage<::cudarpc::cudnnBatchNormalizationForwardInferenceQuery>(Arena*);
template<> ::cudarpc::cudnnConvolutionForwardQuery* Arena::CreateMaybeMessage<::cudarpc::cudnnConvolutionForwardQuery>(Arena*);
template<> ::cudarpc::cudnnCreateDesciptorResponse* Arena::CreateMaybeMessage<::cudarpc::cudnnCreateDesciptorResponse>(Arena*);
template<> ::cudarpc::cudnnGetConvolutionForwardAlgorithm_v7Query* Arena::CreateMaybeMessage<::cudarpc::cudnnGetConvolutionForwardAlgorithm_v7Query>(Arena*);
template<> ::cudarpc::cudnnGetConvolutionForwardAlgorithm_v7Response* Arena::CreateMaybeMessage<::cudarpc::cudnnGetConvolutionForwardAlgorithm_v7Response>(Arena*);
template<> ::cudarpc::cudnnSetConvolutionGroupCountQuery* Arena::CreateMaybeMessage<::cudarpc::cudnnSetConvolutionGroupCountQuery>(Arena*);
template<> ::cudarpc::cudnnSetConvolutionMathTypeQuery* Arena::CreateMaybeMessage<::cudarpc::cudnnSetConvolutionMathTypeQuery>(Arena*);
template<> ::cudarpc::cudnnSetConvolutionNdDescriptorQuery* Arena::CreateMaybeMessage<::cudarpc::cudnnSetConvolutionNdDescriptorQuery>(Arena*);
template<> ::cudarpc::cudnnSetFilterNdDescriptorQuery* Arena::CreateMaybeMessage<::cudarpc::cudnnSetFilterNdDescriptorQuery>(Arena*);
template<> ::cudarpc::cudnnSetTensorNdDescriptorQuery* Arena::CreateMaybeMessage<::cudarpc::cudnnSetTensorNdDescriptorQuery>(Arena*);
template<> ::cudarpc::genericResponse* Arena::CreateMaybeMessage<::cudarpc::genericResponse>(Arena*);
template<> ::cudarpc::getVersionResponse* Arena::CreateMaybeMessage<::cudarpc::getVersionResponse>(Arena*);
template<> ::cudarpc::handleResponse* Arena::CreateMaybeMessage<::cudarpc::handleResponse>(Arena*);
template<> ::cudarpc::setStreamQuery* Arena::CreateMaybeMessage<::cudarpc::setStreamQuery>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace cudarpc {

enum QueryType {
  cuInit = 0,
  cuDevicePrimaryCtxGetState = 1,
  cuGetProcAddress = 2,
  cuDriverGetVersion = 3,
  cudaDriverGetVersion = 5,
  cudaRuntimeGetVersion = 6,
  cudaGetLastError = 7,
  cudaGetDeviceCount = 10,
  cudaGetDevice = 11,
  cudaGetDeviceProperties = 12,
  cudaDeviceGetAttribute = 13,
  cudaDeviceSynchronize = 14,
  cudaStreamCreate = 20,
  cudaStreamCreateWithFlags = 21,
  cudaStreamCreateWithPriority = 22,
  cudaStreamSynchronize = 23,
  cudaStreamIsCapturing = 24,
  cudaStreamGetCaptureInfo = 25,
  cudaMalloc = 30,
  cudaFree = 31,
  cudaMemcpy = 32,
  cudaMemcpyAsync = 33,
  cudaMemsetAsync = 34,
  cudaGetSymbolAddress = 35,
  cudaEventCreateWithFlags = 40,
  cudaEventQuery = 41,
  cudaEventRecord = 42,
  cudaLaunchKernel = 50,
  cuBLAS_cublasCreate = 100,
  cuBLAS_cublasSetStream = 101,
  cuBLAS_cublasSetMathMode = 102,
  cuBLAS_cublasGetMathMode = 103,
  cuBLAS_cublasSgemm = 104,
  cuBLAS_cublasSgemmStridedBatched = 105,
  cudnnCreate = 200,
  cudnnSetStream = 201,
  cudnnCreateTensorDescriptor = 202,
  cudnnSetTensorNdDescriptor = 203,
  cudnnCreateFilterDescriptor = 204,
  cudnnSetFilterNdDescriptor = 205,
  cudnnCreateConvolutionDescriptor = 206,
  cudnnSetConvolutionNdDescriptor = 207,
  cudnnSetConvolutionGroupCount = 208,
  cudnnSetConvolutionMathType = 209,
  cudnnGetConvolutionForwardAlgorithm_v7 = 210,
  cudnnConvolutionForward = 211,
  cudnnBatchNormalizationForwardInference = 212,
  cudnnDestroyConvolutionDescriptor = 250,
  cudnnDestroyFilterDescriptor = 251,
  cudnnDestroyTensorDescriptor = 252,
  QueryType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  QueryType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool QueryType_IsValid(int value);
const QueryType QueryType_MIN = cuInit;
const QueryType QueryType_MAX = cudnnDestroyTensorDescriptor;
const int QueryType_ARRAYSIZE = QueryType_MAX + 1;

const ::google::protobuf::EnumDescriptor* QueryType_descriptor();
inline const ::std::string& QueryType_Name(QueryType value) {
  return ::google::protobuf::internal::NameOfEnum(
    QueryType_descriptor(), value);
}
inline bool QueryType_Parse(
    const ::std::string& name, QueryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QueryType>(
    QueryType_descriptor(), name, value);
}
// ===================================================================

class WapperQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.WapperQuery) */ {
 public:
  WapperQuery();
  virtual ~WapperQuery();

  WapperQuery(const WapperQuery& from);

  inline WapperQuery& operator=(const WapperQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WapperQuery(WapperQuery&& from) noexcept
    : WapperQuery() {
    *this = ::std::move(from);
  }

  inline WapperQuery& operator=(WapperQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WapperQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WapperQuery* internal_default_instance() {
    return reinterpret_cast<const WapperQuery*>(
               &_WapperQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(WapperQuery* other);
  friend void swap(WapperQuery& a, WapperQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WapperQuery* New() const final {
    return CreateMaybeMessage<WapperQuery>(NULL);
  }

  WapperQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WapperQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WapperQuery& from);
  void MergeFrom(const WapperQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WapperQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes query = 2;
  void clear_query();
  static const int kQueryFieldNumber = 2;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const void* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // .cudarpc.QueryType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::cudarpc::QueryType type() const;
  void set_type(::cudarpc::QueryType value);

  // @@protoc_insertion_point(class_scope:cudarpc.WapperQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.QueryList) */ {
 public:
  QueryList();
  virtual ~QueryList();

  QueryList(const QueryList& from);

  inline QueryList& operator=(const QueryList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryList(QueryList&& from) noexcept
    : QueryList() {
    *this = ::std::move(from);
  }

  inline QueryList& operator=(QueryList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryList* internal_default_instance() {
    return reinterpret_cast<const QueryList*>(
               &_QueryList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(QueryList* other);
  friend void swap(QueryList& a, QueryList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryList* New() const final {
    return CreateMaybeMessage<QueryList>(NULL);
  }

  QueryList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QueryList& from);
  void MergeFrom(const QueryList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cudarpc.WapperQuery queries = 1;
  int queries_size() const;
  void clear_queries();
  static const int kQueriesFieldNumber = 1;
  ::cudarpc::WapperQuery* mutable_queries(int index);
  ::google::protobuf::RepeatedPtrField< ::cudarpc::WapperQuery >*
      mutable_queries();
  const ::cudarpc::WapperQuery& queries(int index) const;
  ::cudarpc::WapperQuery* add_queries();
  const ::google::protobuf::RepeatedPtrField< ::cudarpc::WapperQuery >&
      queries() const;

  // int32 client_id = 3;
  void clear_client_id();
  static const int kClientIdFieldNumber = 3;
  ::google::protobuf::int32 client_id() const;
  void set_client_id(::google::protobuf::int32 value);

  // int32 index = 4;
  void clear_index();
  static const int kIndexFieldNumber = 4;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.QueryList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::cudarpc::WapperQuery > queries_;
  ::google::protobuf::int32 client_id_;
  ::google::protobuf::int32 index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class genericResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.genericResponse) */ {
 public:
  genericResponse();
  virtual ~genericResponse();

  genericResponse(const genericResponse& from);

  inline genericResponse& operator=(const genericResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  genericResponse(genericResponse&& from) noexcept
    : genericResponse() {
    *this = ::std::move(from);
  }

  inline genericResponse& operator=(genericResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const genericResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const genericResponse* internal_default_instance() {
    return reinterpret_cast<const genericResponse*>(
               &_genericResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(genericResponse* other);
  friend void swap(genericResponse& a, genericResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline genericResponse* New() const final {
    return CreateMaybeMessage<genericResponse>(NULL);
  }

  genericResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<genericResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const genericResponse& from);
  void MergeFrom(const genericResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(genericResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.genericResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class handleResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.handleResponse) */ {
 public:
  handleResponse();
  virtual ~handleResponse();

  handleResponse(const handleResponse& from);

  inline handleResponse& operator=(const handleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  handleResponse(handleResponse&& from) noexcept
    : handleResponse() {
    *this = ::std::move(from);
  }

  inline handleResponse& operator=(handleResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const handleResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const handleResponse* internal_default_instance() {
    return reinterpret_cast<const handleResponse*>(
               &_handleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(handleResponse* other);
  friend void swap(handleResponse& a, handleResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline handleResponse* New() const final {
    return CreateMaybeMessage<handleResponse>(NULL);
  }

  handleResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<handleResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const handleResponse& from);
  void MergeFrom(const handleResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(handleResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes handle = 2;
  void clear_handle();
  static const int kHandleFieldNumber = 2;
  const ::std::string& handle() const;
  void set_handle(const ::std::string& value);
  #if LANG_CXX11
  void set_handle(::std::string&& value);
  #endif
  void set_handle(const char* value);
  void set_handle(const void* value, size_t size);
  ::std::string* mutable_handle();
  ::std::string* release_handle();
  void set_allocated_handle(::std::string* handle);

  // int32 error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.handleResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr handle_;
  ::google::protobuf::int32 error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class setStreamQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.setStreamQuery) */ {
 public:
  setStreamQuery();
  virtual ~setStreamQuery();

  setStreamQuery(const setStreamQuery& from);

  inline setStreamQuery& operator=(const setStreamQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  setStreamQuery(setStreamQuery&& from) noexcept
    : setStreamQuery() {
    *this = ::std::move(from);
  }

  inline setStreamQuery& operator=(setStreamQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const setStreamQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const setStreamQuery* internal_default_instance() {
    return reinterpret_cast<const setStreamQuery*>(
               &_setStreamQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(setStreamQuery* other);
  friend void swap(setStreamQuery& a, setStreamQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline setStreamQuery* New() const final {
    return CreateMaybeMessage<setStreamQuery>(NULL);
  }

  setStreamQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<setStreamQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const setStreamQuery& from);
  void MergeFrom(const setStreamQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setStreamQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes handle = 1;
  void clear_handle();
  static const int kHandleFieldNumber = 1;
  const ::std::string& handle() const;
  void set_handle(const ::std::string& value);
  #if LANG_CXX11
  void set_handle(::std::string&& value);
  #endif
  void set_handle(const char* value);
  void set_handle(const void* value, size_t size);
  ::std::string* mutable_handle();
  ::std::string* release_handle();
  void set_allocated_handle(::std::string* handle);

  // bytes stream = 2;
  void clear_stream();
  static const int kStreamFieldNumber = 2;
  const ::std::string& stream() const;
  void set_stream(const ::std::string& value);
  #if LANG_CXX11
  void set_stream(::std::string&& value);
  #endif
  void set_stream(const char* value);
  void set_stream(const void* value, size_t size);
  ::std::string* mutable_stream();
  ::std::string* release_stream();
  void set_allocated_stream(::std::string* stream);

  // @@protoc_insertion_point(class_scope:cudarpc.setStreamQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr handle_;
  ::google::protobuf::internal::ArenaStringPtr stream_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cublasSetMathModeQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cublasSetMathModeQuery) */ {
 public:
  cublasSetMathModeQuery();
  virtual ~cublasSetMathModeQuery();

  cublasSetMathModeQuery(const cublasSetMathModeQuery& from);

  inline cublasSetMathModeQuery& operator=(const cublasSetMathModeQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cublasSetMathModeQuery(cublasSetMathModeQuery&& from) noexcept
    : cublasSetMathModeQuery() {
    *this = ::std::move(from);
  }

  inline cublasSetMathModeQuery& operator=(cublasSetMathModeQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cublasSetMathModeQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cublasSetMathModeQuery* internal_default_instance() {
    return reinterpret_cast<const cublasSetMathModeQuery*>(
               &_cublasSetMathModeQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(cublasSetMathModeQuery* other);
  friend void swap(cublasSetMathModeQuery& a, cublasSetMathModeQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cublasSetMathModeQuery* New() const final {
    return CreateMaybeMessage<cublasSetMathModeQuery>(NULL);
  }

  cublasSetMathModeQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cublasSetMathModeQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cublasSetMathModeQuery& from);
  void MergeFrom(const cublasSetMathModeQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cublasSetMathModeQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes handle = 1;
  void clear_handle();
  static const int kHandleFieldNumber = 1;
  const ::std::string& handle() const;
  void set_handle(const ::std::string& value);
  #if LANG_CXX11
  void set_handle(::std::string&& value);
  #endif
  void set_handle(const char* value);
  void set_handle(const void* value, size_t size);
  ::std::string* mutable_handle();
  ::std::string* release_handle();
  void set_allocated_handle(::std::string* handle);

  // int32 mode = 2;
  void clear_mode();
  static const int kModeFieldNumber = 2;
  ::google::protobuf::int32 mode() const;
  void set_mode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cublasSetMathModeQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr handle_;
  ::google::protobuf::int32 mode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cublasGetMathModeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cublasGetMathModeResponse) */ {
 public:
  cublasGetMathModeResponse();
  virtual ~cublasGetMathModeResponse();

  cublasGetMathModeResponse(const cublasGetMathModeResponse& from);

  inline cublasGetMathModeResponse& operator=(const cublasGetMathModeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cublasGetMathModeResponse(cublasGetMathModeResponse&& from) noexcept
    : cublasGetMathModeResponse() {
    *this = ::std::move(from);
  }

  inline cublasGetMathModeResponse& operator=(cublasGetMathModeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cublasGetMathModeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cublasGetMathModeResponse* internal_default_instance() {
    return reinterpret_cast<const cublasGetMathModeResponse*>(
               &_cublasGetMathModeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(cublasGetMathModeResponse* other);
  friend void swap(cublasGetMathModeResponse& a, cublasGetMathModeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cublasGetMathModeResponse* New() const final {
    return CreateMaybeMessage<cublasGetMathModeResponse>(NULL);
  }

  cublasGetMathModeResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cublasGetMathModeResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cublasGetMathModeResponse& from);
  void MergeFrom(const cublasGetMathModeResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cublasGetMathModeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // int32 mode = 2;
  void clear_mode();
  static const int kModeFieldNumber = 2;
  ::google::protobuf::int32 mode() const;
  void set_mode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cublasGetMathModeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 error_;
  ::google::protobuf::int32 mode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cublasSgemmQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cublasSgemmQuery) */ {
 public:
  cublasSgemmQuery();
  virtual ~cublasSgemmQuery();

  cublasSgemmQuery(const cublasSgemmQuery& from);

  inline cublasSgemmQuery& operator=(const cublasSgemmQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cublasSgemmQuery(cublasSgemmQuery&& from) noexcept
    : cublasSgemmQuery() {
    *this = ::std::move(from);
  }

  inline cublasSgemmQuery& operator=(cublasSgemmQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cublasSgemmQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cublasSgemmQuery* internal_default_instance() {
    return reinterpret_cast<const cublasSgemmQuery*>(
               &_cublasSgemmQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(cublasSgemmQuery* other);
  friend void swap(cublasSgemmQuery& a, cublasSgemmQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cublasSgemmQuery* New() const final {
    return CreateMaybeMessage<cublasSgemmQuery>(NULL);
  }

  cublasSgemmQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cublasSgemmQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cublasSgemmQuery& from);
  void MergeFrom(const cublasSgemmQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cublasSgemmQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes handle = 1;
  void clear_handle();
  static const int kHandleFieldNumber = 1;
  const ::std::string& handle() const;
  void set_handle(const ::std::string& value);
  #if LANG_CXX11
  void set_handle(::std::string&& value);
  #endif
  void set_handle(const char* value);
  void set_handle(const void* value, size_t size);
  ::std::string* mutable_handle();
  ::std::string* release_handle();
  void set_allocated_handle(::std::string* handle);

  // int32 transa = 2;
  void clear_transa();
  static const int kTransaFieldNumber = 2;
  ::google::protobuf::int32 transa() const;
  void set_transa(::google::protobuf::int32 value);

  // int32 transb = 3;
  void clear_transb();
  static const int kTransbFieldNumber = 3;
  ::google::protobuf::int32 transb() const;
  void set_transb(::google::protobuf::int32 value);

  // int32 m = 4;
  void clear_m();
  static const int kMFieldNumber = 4;
  ::google::protobuf::int32 m() const;
  void set_m(::google::protobuf::int32 value);

  // int32 n = 5;
  void clear_n();
  static const int kNFieldNumber = 5;
  ::google::protobuf::int32 n() const;
  void set_n(::google::protobuf::int32 value);

  // int32 k = 6;
  void clear_k();
  static const int kKFieldNumber = 6;
  ::google::protobuf::int32 k() const;
  void set_k(::google::protobuf::int32 value);

  // float alpha = 7;
  void clear_alpha();
  static const int kAlphaFieldNumber = 7;
  float alpha() const;
  void set_alpha(float value);

  // uint64 matrix_a = 8;
  void clear_matrix_a();
  static const int kMatrixAFieldNumber = 8;
  ::google::protobuf::uint64 matrix_a() const;
  void set_matrix_a(::google::protobuf::uint64 value);

  // uint64 matrix_b = 10;
  void clear_matrix_b();
  static const int kMatrixBFieldNumber = 10;
  ::google::protobuf::uint64 matrix_b() const;
  void set_matrix_b(::google::protobuf::uint64 value);

  // int32 lda = 9;
  void clear_lda();
  static const int kLdaFieldNumber = 9;
  ::google::protobuf::int32 lda() const;
  void set_lda(::google::protobuf::int32 value);

  // int32 ldb = 11;
  void clear_ldb();
  static const int kLdbFieldNumber = 11;
  ::google::protobuf::int32 ldb() const;
  void set_ldb(::google::protobuf::int32 value);

  // uint64 matrix_c = 13;
  void clear_matrix_c();
  static const int kMatrixCFieldNumber = 13;
  ::google::protobuf::uint64 matrix_c() const;
  void set_matrix_c(::google::protobuf::uint64 value);

  // float beta = 12;
  void clear_beta();
  static const int kBetaFieldNumber = 12;
  float beta() const;
  void set_beta(float value);

  // int32 ldc = 14;
  void clear_ldc();
  static const int kLdcFieldNumber = 14;
  ::google::protobuf::int32 ldc() const;
  void set_ldc(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cublasSgemmQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr handle_;
  ::google::protobuf::int32 transa_;
  ::google::protobuf::int32 transb_;
  ::google::protobuf::int32 m_;
  ::google::protobuf::int32 n_;
  ::google::protobuf::int32 k_;
  float alpha_;
  ::google::protobuf::uint64 matrix_a_;
  ::google::protobuf::uint64 matrix_b_;
  ::google::protobuf::int32 lda_;
  ::google::protobuf::int32 ldb_;
  ::google::protobuf::uint64 matrix_c_;
  float beta_;
  ::google::protobuf::int32 ldc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cublasSgemmStridedBatchedQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cublasSgemmStridedBatchedQuery) */ {
 public:
  cublasSgemmStridedBatchedQuery();
  virtual ~cublasSgemmStridedBatchedQuery();

  cublasSgemmStridedBatchedQuery(const cublasSgemmStridedBatchedQuery& from);

  inline cublasSgemmStridedBatchedQuery& operator=(const cublasSgemmStridedBatchedQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cublasSgemmStridedBatchedQuery(cublasSgemmStridedBatchedQuery&& from) noexcept
    : cublasSgemmStridedBatchedQuery() {
    *this = ::std::move(from);
  }

  inline cublasSgemmStridedBatchedQuery& operator=(cublasSgemmStridedBatchedQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cublasSgemmStridedBatchedQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cublasSgemmStridedBatchedQuery* internal_default_instance() {
    return reinterpret_cast<const cublasSgemmStridedBatchedQuery*>(
               &_cublasSgemmStridedBatchedQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(cublasSgemmStridedBatchedQuery* other);
  friend void swap(cublasSgemmStridedBatchedQuery& a, cublasSgemmStridedBatchedQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cublasSgemmStridedBatchedQuery* New() const final {
    return CreateMaybeMessage<cublasSgemmStridedBatchedQuery>(NULL);
  }

  cublasSgemmStridedBatchedQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cublasSgemmStridedBatchedQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cublasSgemmStridedBatchedQuery& from);
  void MergeFrom(const cublasSgemmStridedBatchedQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cublasSgemmStridedBatchedQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes handle = 1;
  void clear_handle();
  static const int kHandleFieldNumber = 1;
  const ::std::string& handle() const;
  void set_handle(const ::std::string& value);
  #if LANG_CXX11
  void set_handle(::std::string&& value);
  #endif
  void set_handle(const char* value);
  void set_handle(const void* value, size_t size);
  ::std::string* mutable_handle();
  ::std::string* release_handle();
  void set_allocated_handle(::std::string* handle);

  // int32 transa = 2;
  void clear_transa();
  static const int kTransaFieldNumber = 2;
  ::google::protobuf::int32 transa() const;
  void set_transa(::google::protobuf::int32 value);

  // int32 transb = 3;
  void clear_transb();
  static const int kTransbFieldNumber = 3;
  ::google::protobuf::int32 transb() const;
  void set_transb(::google::protobuf::int32 value);

  // int32 m = 4;
  void clear_m();
  static const int kMFieldNumber = 4;
  ::google::protobuf::int32 m() const;
  void set_m(::google::protobuf::int32 value);

  // int32 n = 5;
  void clear_n();
  static const int kNFieldNumber = 5;
  ::google::protobuf::int32 n() const;
  void set_n(::google::protobuf::int32 value);

  // int32 k = 6;
  void clear_k();
  static const int kKFieldNumber = 6;
  ::google::protobuf::int32 k() const;
  void set_k(::google::protobuf::int32 value);

  // float alpha = 7;
  void clear_alpha();
  static const int kAlphaFieldNumber = 7;
  float alpha() const;
  void set_alpha(float value);

  // uint64 matrix_a = 8;
  void clear_matrix_a();
  static const int kMatrixAFieldNumber = 8;
  ::google::protobuf::uint64 matrix_a() const;
  void set_matrix_a(::google::protobuf::uint64 value);

  // uint64 matrix_b = 10;
  void clear_matrix_b();
  static const int kMatrixBFieldNumber = 10;
  ::google::protobuf::uint64 matrix_b() const;
  void set_matrix_b(::google::protobuf::uint64 value);

  // int32 lda = 9;
  void clear_lda();
  static const int kLdaFieldNumber = 9;
  ::google::protobuf::int32 lda() const;
  void set_lda(::google::protobuf::int32 value);

  // int32 ldb = 11;
  void clear_ldb();
  static const int kLdbFieldNumber = 11;
  ::google::protobuf::int32 ldb() const;
  void set_ldb(::google::protobuf::int32 value);

  // uint64 matrix_c = 13;
  void clear_matrix_c();
  static const int kMatrixCFieldNumber = 13;
  ::google::protobuf::uint64 matrix_c() const;
  void set_matrix_c(::google::protobuf::uint64 value);

  // float beta = 12;
  void clear_beta();
  static const int kBetaFieldNumber = 12;
  float beta() const;
  void set_beta(float value);

  // int32 ldc = 14;
  void clear_ldc();
  static const int kLdcFieldNumber = 14;
  ::google::protobuf::int32 ldc() const;
  void set_ldc(::google::protobuf::int32 value);

  // int64 stride_a = 15;
  void clear_stride_a();
  static const int kStrideAFieldNumber = 15;
  ::google::protobuf::int64 stride_a() const;
  void set_stride_a(::google::protobuf::int64 value);

  // int64 stride_b = 16;
  void clear_stride_b();
  static const int kStrideBFieldNumber = 16;
  ::google::protobuf::int64 stride_b() const;
  void set_stride_b(::google::protobuf::int64 value);

  // int64 stride_c = 17;
  void clear_stride_c();
  static const int kStrideCFieldNumber = 17;
  ::google::protobuf::int64 stride_c() const;
  void set_stride_c(::google::protobuf::int64 value);

  // int32 count = 18;
  void clear_count();
  static const int kCountFieldNumber = 18;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cublasSgemmStridedBatchedQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr handle_;
  ::google::protobuf::int32 transa_;
  ::google::protobuf::int32 transb_;
  ::google::protobuf::int32 m_;
  ::google::protobuf::int32 n_;
  ::google::protobuf::int32 k_;
  float alpha_;
  ::google::protobuf::uint64 matrix_a_;
  ::google::protobuf::uint64 matrix_b_;
  ::google::protobuf::int32 lda_;
  ::google::protobuf::int32 ldb_;
  ::google::protobuf::uint64 matrix_c_;
  float beta_;
  ::google::protobuf::int32 ldc_;
  ::google::protobuf::int64 stride_a_;
  ::google::protobuf::int64 stride_b_;
  ::google::protobuf::int64 stride_c_;
  ::google::protobuf::int32 count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cudnnCreateDesciptorResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cudnnCreateDesciptorResponse) */ {
 public:
  cudnnCreateDesciptorResponse();
  virtual ~cudnnCreateDesciptorResponse();

  cudnnCreateDesciptorResponse(const cudnnCreateDesciptorResponse& from);

  inline cudnnCreateDesciptorResponse& operator=(const cudnnCreateDesciptorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cudnnCreateDesciptorResponse(cudnnCreateDesciptorResponse&& from) noexcept
    : cudnnCreateDesciptorResponse() {
    *this = ::std::move(from);
  }

  inline cudnnCreateDesciptorResponse& operator=(cudnnCreateDesciptorResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cudnnCreateDesciptorResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cudnnCreateDesciptorResponse* internal_default_instance() {
    return reinterpret_cast<const cudnnCreateDesciptorResponse*>(
               &_cudnnCreateDesciptorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(cudnnCreateDesciptorResponse* other);
  friend void swap(cudnnCreateDesciptorResponse& a, cudnnCreateDesciptorResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cudnnCreateDesciptorResponse* New() const final {
    return CreateMaybeMessage<cudnnCreateDesciptorResponse>(NULL);
  }

  cudnnCreateDesciptorResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cudnnCreateDesciptorResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cudnnCreateDesciptorResponse& from);
  void MergeFrom(const cudnnCreateDesciptorResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cudnnCreateDesciptorResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes cudnn_descriptor = 2;
  void clear_cudnn_descriptor();
  static const int kCudnnDescriptorFieldNumber = 2;
  const ::std::string& cudnn_descriptor() const;
  void set_cudnn_descriptor(const ::std::string& value);
  #if LANG_CXX11
  void set_cudnn_descriptor(::std::string&& value);
  #endif
  void set_cudnn_descriptor(const char* value);
  void set_cudnn_descriptor(const void* value, size_t size);
  ::std::string* mutable_cudnn_descriptor();
  ::std::string* release_cudnn_descriptor();
  void set_allocated_cudnn_descriptor(::std::string* cudnn_descriptor);

  // int32 error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cudnnCreateDesciptorResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cudnn_descriptor_;
  ::google::protobuf::int32 error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cudnnSetTensorNdDescriptorQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cudnnSetTensorNdDescriptorQuery) */ {
 public:
  cudnnSetTensorNdDescriptorQuery();
  virtual ~cudnnSetTensorNdDescriptorQuery();

  cudnnSetTensorNdDescriptorQuery(const cudnnSetTensorNdDescriptorQuery& from);

  inline cudnnSetTensorNdDescriptorQuery& operator=(const cudnnSetTensorNdDescriptorQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cudnnSetTensorNdDescriptorQuery(cudnnSetTensorNdDescriptorQuery&& from) noexcept
    : cudnnSetTensorNdDescriptorQuery() {
    *this = ::std::move(from);
  }

  inline cudnnSetTensorNdDescriptorQuery& operator=(cudnnSetTensorNdDescriptorQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cudnnSetTensorNdDescriptorQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cudnnSetTensorNdDescriptorQuery* internal_default_instance() {
    return reinterpret_cast<const cudnnSetTensorNdDescriptorQuery*>(
               &_cudnnSetTensorNdDescriptorQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(cudnnSetTensorNdDescriptorQuery* other);
  friend void swap(cudnnSetTensorNdDescriptorQuery& a, cudnnSetTensorNdDescriptorQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cudnnSetTensorNdDescriptorQuery* New() const final {
    return CreateMaybeMessage<cudnnSetTensorNdDescriptorQuery>(NULL);
  }

  cudnnSetTensorNdDescriptorQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cudnnSetTensorNdDescriptorQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cudnnSetTensorNdDescriptorQuery& from);
  void MergeFrom(const cudnnSetTensorNdDescriptorQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cudnnSetTensorNdDescriptorQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 dim_a = 4;
  int dim_a_size() const;
  void clear_dim_a();
  static const int kDimAFieldNumber = 4;
  ::google::protobuf::int32 dim_a(int index) const;
  void set_dim_a(int index, ::google::protobuf::int32 value);
  void add_dim_a(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dim_a() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dim_a();

  // repeated int32 stride_a = 5;
  int stride_a_size() const;
  void clear_stride_a();
  static const int kStrideAFieldNumber = 5;
  ::google::protobuf::int32 stride_a(int index) const;
  void set_stride_a(int index, ::google::protobuf::int32 value);
  void add_stride_a(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      stride_a() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_stride_a();

  // bytes cudnn_descriptor = 1;
  void clear_cudnn_descriptor();
  static const int kCudnnDescriptorFieldNumber = 1;
  const ::std::string& cudnn_descriptor() const;
  void set_cudnn_descriptor(const ::std::string& value);
  #if LANG_CXX11
  void set_cudnn_descriptor(::std::string&& value);
  #endif
  void set_cudnn_descriptor(const char* value);
  void set_cudnn_descriptor(const void* value, size_t size);
  ::std::string* mutable_cudnn_descriptor();
  ::std::string* release_cudnn_descriptor();
  void set_allocated_cudnn_descriptor(::std::string* cudnn_descriptor);

  // int32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 dims = 3;
  void clear_dims();
  static const int kDimsFieldNumber = 3;
  ::google::protobuf::int32 dims() const;
  void set_dims(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cudnnSetTensorNdDescriptorQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dim_a_;
  mutable int _dim_a_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > stride_a_;
  mutable int _stride_a_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr cudnn_descriptor_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 dims_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cudnnSetFilterNdDescriptorQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cudnnSetFilterNdDescriptorQuery) */ {
 public:
  cudnnSetFilterNdDescriptorQuery();
  virtual ~cudnnSetFilterNdDescriptorQuery();

  cudnnSetFilterNdDescriptorQuery(const cudnnSetFilterNdDescriptorQuery& from);

  inline cudnnSetFilterNdDescriptorQuery& operator=(const cudnnSetFilterNdDescriptorQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cudnnSetFilterNdDescriptorQuery(cudnnSetFilterNdDescriptorQuery&& from) noexcept
    : cudnnSetFilterNdDescriptorQuery() {
    *this = ::std::move(from);
  }

  inline cudnnSetFilterNdDescriptorQuery& operator=(cudnnSetFilterNdDescriptorQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cudnnSetFilterNdDescriptorQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cudnnSetFilterNdDescriptorQuery* internal_default_instance() {
    return reinterpret_cast<const cudnnSetFilterNdDescriptorQuery*>(
               &_cudnnSetFilterNdDescriptorQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(cudnnSetFilterNdDescriptorQuery* other);
  friend void swap(cudnnSetFilterNdDescriptorQuery& a, cudnnSetFilterNdDescriptorQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cudnnSetFilterNdDescriptorQuery* New() const final {
    return CreateMaybeMessage<cudnnSetFilterNdDescriptorQuery>(NULL);
  }

  cudnnSetFilterNdDescriptorQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cudnnSetFilterNdDescriptorQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cudnnSetFilterNdDescriptorQuery& from);
  void MergeFrom(const cudnnSetFilterNdDescriptorQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cudnnSetFilterNdDescriptorQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 dim_a = 5;
  int dim_a_size() const;
  void clear_dim_a();
  static const int kDimAFieldNumber = 5;
  ::google::protobuf::int32 dim_a(int index) const;
  void set_dim_a(int index, ::google::protobuf::int32 value);
  void add_dim_a(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dim_a() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dim_a();

  // bytes cudnn_descriptor = 1;
  void clear_cudnn_descriptor();
  static const int kCudnnDescriptorFieldNumber = 1;
  const ::std::string& cudnn_descriptor() const;
  void set_cudnn_descriptor(const ::std::string& value);
  #if LANG_CXX11
  void set_cudnn_descriptor(::std::string&& value);
  #endif
  void set_cudnn_descriptor(const char* value);
  void set_cudnn_descriptor(const void* value, size_t size);
  ::std::string* mutable_cudnn_descriptor();
  ::std::string* release_cudnn_descriptor();
  void set_allocated_cudnn_descriptor(::std::string* cudnn_descriptor);

  // int32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 format = 3;
  void clear_format();
  static const int kFormatFieldNumber = 3;
  ::google::protobuf::int32 format() const;
  void set_format(::google::protobuf::int32 value);

  // int32 dims = 4;
  void clear_dims();
  static const int kDimsFieldNumber = 4;
  ::google::protobuf::int32 dims() const;
  void set_dims(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cudnnSetFilterNdDescriptorQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dim_a_;
  mutable int _dim_a_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr cudnn_descriptor_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 format_;
  ::google::protobuf::int32 dims_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cudnnSetConvolutionNdDescriptorQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cudnnSetConvolutionNdDescriptorQuery) */ {
 public:
  cudnnSetConvolutionNdDescriptorQuery();
  virtual ~cudnnSetConvolutionNdDescriptorQuery();

  cudnnSetConvolutionNdDescriptorQuery(const cudnnSetConvolutionNdDescriptorQuery& from);

  inline cudnnSetConvolutionNdDescriptorQuery& operator=(const cudnnSetConvolutionNdDescriptorQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cudnnSetConvolutionNdDescriptorQuery(cudnnSetConvolutionNdDescriptorQuery&& from) noexcept
    : cudnnSetConvolutionNdDescriptorQuery() {
    *this = ::std::move(from);
  }

  inline cudnnSetConvolutionNdDescriptorQuery& operator=(cudnnSetConvolutionNdDescriptorQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cudnnSetConvolutionNdDescriptorQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cudnnSetConvolutionNdDescriptorQuery* internal_default_instance() {
    return reinterpret_cast<const cudnnSetConvolutionNdDescriptorQuery*>(
               &_cudnnSetConvolutionNdDescriptorQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(cudnnSetConvolutionNdDescriptorQuery* other);
  friend void swap(cudnnSetConvolutionNdDescriptorQuery& a, cudnnSetConvolutionNdDescriptorQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cudnnSetConvolutionNdDescriptorQuery* New() const final {
    return CreateMaybeMessage<cudnnSetConvolutionNdDescriptorQuery>(NULL);
  }

  cudnnSetConvolutionNdDescriptorQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cudnnSetConvolutionNdDescriptorQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cudnnSetConvolutionNdDescriptorQuery& from);
  void MergeFrom(const cudnnSetConvolutionNdDescriptorQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cudnnSetConvolutionNdDescriptorQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 pad_a = 3;
  int pad_a_size() const;
  void clear_pad_a();
  static const int kPadAFieldNumber = 3;
  ::google::protobuf::int32 pad_a(int index) const;
  void set_pad_a(int index, ::google::protobuf::int32 value);
  void add_pad_a(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pad_a() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pad_a();

  // repeated int32 stride_a = 4;
  int stride_a_size() const;
  void clear_stride_a();
  static const int kStrideAFieldNumber = 4;
  ::google::protobuf::int32 stride_a(int index) const;
  void set_stride_a(int index, ::google::protobuf::int32 value);
  void add_stride_a(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      stride_a() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_stride_a();

  // repeated int32 dilation_a = 5;
  int dilation_a_size() const;
  void clear_dilation_a();
  static const int kDilationAFieldNumber = 5;
  ::google::protobuf::int32 dilation_a(int index) const;
  void set_dilation_a(int index, ::google::protobuf::int32 value);
  void add_dilation_a(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dilation_a() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dilation_a();

  // bytes cudnn_descriptor = 1;
  void clear_cudnn_descriptor();
  static const int kCudnnDescriptorFieldNumber = 1;
  const ::std::string& cudnn_descriptor() const;
  void set_cudnn_descriptor(const ::std::string& value);
  #if LANG_CXX11
  void set_cudnn_descriptor(::std::string&& value);
  #endif
  void set_cudnn_descriptor(const char* value);
  void set_cudnn_descriptor(const void* value, size_t size);
  ::std::string* mutable_cudnn_descriptor();
  ::std::string* release_cudnn_descriptor();
  void set_allocated_cudnn_descriptor(::std::string* cudnn_descriptor);

  // int32 length = 2;
  void clear_length();
  static const int kLengthFieldNumber = 2;
  ::google::protobuf::int32 length() const;
  void set_length(::google::protobuf::int32 value);

  // int32 mode = 6;
  void clear_mode();
  static const int kModeFieldNumber = 6;
  ::google::protobuf::int32 mode() const;
  void set_mode(::google::protobuf::int32 value);

  // int32 type = 7;
  void clear_type();
  static const int kTypeFieldNumber = 7;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cudnnSetConvolutionNdDescriptorQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pad_a_;
  mutable int _pad_a_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > stride_a_;
  mutable int _stride_a_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dilation_a_;
  mutable int _dilation_a_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr cudnn_descriptor_;
  ::google::protobuf::int32 length_;
  ::google::protobuf::int32 mode_;
  ::google::protobuf::int32 type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cudnnSetConvolutionGroupCountQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cudnnSetConvolutionGroupCountQuery) */ {
 public:
  cudnnSetConvolutionGroupCountQuery();
  virtual ~cudnnSetConvolutionGroupCountQuery();

  cudnnSetConvolutionGroupCountQuery(const cudnnSetConvolutionGroupCountQuery& from);

  inline cudnnSetConvolutionGroupCountQuery& operator=(const cudnnSetConvolutionGroupCountQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cudnnSetConvolutionGroupCountQuery(cudnnSetConvolutionGroupCountQuery&& from) noexcept
    : cudnnSetConvolutionGroupCountQuery() {
    *this = ::std::move(from);
  }

  inline cudnnSetConvolutionGroupCountQuery& operator=(cudnnSetConvolutionGroupCountQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cudnnSetConvolutionGroupCountQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cudnnSetConvolutionGroupCountQuery* internal_default_instance() {
    return reinterpret_cast<const cudnnSetConvolutionGroupCountQuery*>(
               &_cudnnSetConvolutionGroupCountQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(cudnnSetConvolutionGroupCountQuery* other);
  friend void swap(cudnnSetConvolutionGroupCountQuery& a, cudnnSetConvolutionGroupCountQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cudnnSetConvolutionGroupCountQuery* New() const final {
    return CreateMaybeMessage<cudnnSetConvolutionGroupCountQuery>(NULL);
  }

  cudnnSetConvolutionGroupCountQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cudnnSetConvolutionGroupCountQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cudnnSetConvolutionGroupCountQuery& from);
  void MergeFrom(const cudnnSetConvolutionGroupCountQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cudnnSetConvolutionGroupCountQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes cudnn_descriptor = 1;
  void clear_cudnn_descriptor();
  static const int kCudnnDescriptorFieldNumber = 1;
  const ::std::string& cudnn_descriptor() const;
  void set_cudnn_descriptor(const ::std::string& value);
  #if LANG_CXX11
  void set_cudnn_descriptor(::std::string&& value);
  #endif
  void set_cudnn_descriptor(const char* value);
  void set_cudnn_descriptor(const void* value, size_t size);
  ::std::string* mutable_cudnn_descriptor();
  ::std::string* release_cudnn_descriptor();
  void set_allocated_cudnn_descriptor(::std::string* cudnn_descriptor);

  // int32 count = 2;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cudnnSetConvolutionGroupCountQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cudnn_descriptor_;
  ::google::protobuf::int32 count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cudnnSetConvolutionMathTypeQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cudnnSetConvolutionMathTypeQuery) */ {
 public:
  cudnnSetConvolutionMathTypeQuery();
  virtual ~cudnnSetConvolutionMathTypeQuery();

  cudnnSetConvolutionMathTypeQuery(const cudnnSetConvolutionMathTypeQuery& from);

  inline cudnnSetConvolutionMathTypeQuery& operator=(const cudnnSetConvolutionMathTypeQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cudnnSetConvolutionMathTypeQuery(cudnnSetConvolutionMathTypeQuery&& from) noexcept
    : cudnnSetConvolutionMathTypeQuery() {
    *this = ::std::move(from);
  }

  inline cudnnSetConvolutionMathTypeQuery& operator=(cudnnSetConvolutionMathTypeQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cudnnSetConvolutionMathTypeQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cudnnSetConvolutionMathTypeQuery* internal_default_instance() {
    return reinterpret_cast<const cudnnSetConvolutionMathTypeQuery*>(
               &_cudnnSetConvolutionMathTypeQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(cudnnSetConvolutionMathTypeQuery* other);
  friend void swap(cudnnSetConvolutionMathTypeQuery& a, cudnnSetConvolutionMathTypeQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cudnnSetConvolutionMathTypeQuery* New() const final {
    return CreateMaybeMessage<cudnnSetConvolutionMathTypeQuery>(NULL);
  }

  cudnnSetConvolutionMathTypeQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cudnnSetConvolutionMathTypeQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cudnnSetConvolutionMathTypeQuery& from);
  void MergeFrom(const cudnnSetConvolutionMathTypeQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cudnnSetConvolutionMathTypeQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes cudnn_descriptor = 1;
  void clear_cudnn_descriptor();
  static const int kCudnnDescriptorFieldNumber = 1;
  const ::std::string& cudnn_descriptor() const;
  void set_cudnn_descriptor(const ::std::string& value);
  #if LANG_CXX11
  void set_cudnn_descriptor(::std::string&& value);
  #endif
  void set_cudnn_descriptor(const char* value);
  void set_cudnn_descriptor(const void* value, size_t size);
  ::std::string* mutable_cudnn_descriptor();
  ::std::string* release_cudnn_descriptor();
  void set_allocated_cudnn_descriptor(::std::string* cudnn_descriptor);

  // int32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cudnnSetConvolutionMathTypeQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cudnn_descriptor_;
  ::google::protobuf::int32 type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cudnnGetConvolutionForwardAlgorithm_v7Query : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query) */ {
 public:
  cudnnGetConvolutionForwardAlgorithm_v7Query();
  virtual ~cudnnGetConvolutionForwardAlgorithm_v7Query();

  cudnnGetConvolutionForwardAlgorithm_v7Query(const cudnnGetConvolutionForwardAlgorithm_v7Query& from);

  inline cudnnGetConvolutionForwardAlgorithm_v7Query& operator=(const cudnnGetConvolutionForwardAlgorithm_v7Query& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cudnnGetConvolutionForwardAlgorithm_v7Query(cudnnGetConvolutionForwardAlgorithm_v7Query&& from) noexcept
    : cudnnGetConvolutionForwardAlgorithm_v7Query() {
    *this = ::std::move(from);
  }

  inline cudnnGetConvolutionForwardAlgorithm_v7Query& operator=(cudnnGetConvolutionForwardAlgorithm_v7Query&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cudnnGetConvolutionForwardAlgorithm_v7Query& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cudnnGetConvolutionForwardAlgorithm_v7Query* internal_default_instance() {
    return reinterpret_cast<const cudnnGetConvolutionForwardAlgorithm_v7Query*>(
               &_cudnnGetConvolutionForwardAlgorithm_v7Query_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(cudnnGetConvolutionForwardAlgorithm_v7Query* other);
  friend void swap(cudnnGetConvolutionForwardAlgorithm_v7Query& a, cudnnGetConvolutionForwardAlgorithm_v7Query& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cudnnGetConvolutionForwardAlgorithm_v7Query* New() const final {
    return CreateMaybeMessage<cudnnGetConvolutionForwardAlgorithm_v7Query>(NULL);
  }

  cudnnGetConvolutionForwardAlgorithm_v7Query* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cudnnGetConvolutionForwardAlgorithm_v7Query>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cudnnGetConvolutionForwardAlgorithm_v7Query& from);
  void MergeFrom(const cudnnGetConvolutionForwardAlgorithm_v7Query& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cudnnGetConvolutionForwardAlgorithm_v7Query* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes handle = 1;
  void clear_handle();
  static const int kHandleFieldNumber = 1;
  const ::std::string& handle() const;
  void set_handle(const ::std::string& value);
  #if LANG_CXX11
  void set_handle(::std::string&& value);
  #endif
  void set_handle(const char* value);
  void set_handle(const void* value, size_t size);
  ::std::string* mutable_handle();
  ::std::string* release_handle();
  void set_allocated_handle(::std::string* handle);

  // bytes x_desc = 2;
  void clear_x_desc();
  static const int kXDescFieldNumber = 2;
  const ::std::string& x_desc() const;
  void set_x_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_x_desc(::std::string&& value);
  #endif
  void set_x_desc(const char* value);
  void set_x_desc(const void* value, size_t size);
  ::std::string* mutable_x_desc();
  ::std::string* release_x_desc();
  void set_allocated_x_desc(::std::string* x_desc);

  // bytes w_desc = 3;
  void clear_w_desc();
  static const int kWDescFieldNumber = 3;
  const ::std::string& w_desc() const;
  void set_w_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_w_desc(::std::string&& value);
  #endif
  void set_w_desc(const char* value);
  void set_w_desc(const void* value, size_t size);
  ::std::string* mutable_w_desc();
  ::std::string* release_w_desc();
  void set_allocated_w_desc(::std::string* w_desc);

  // bytes conv_desc = 4;
  void clear_conv_desc();
  static const int kConvDescFieldNumber = 4;
  const ::std::string& conv_desc() const;
  void set_conv_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_conv_desc(::std::string&& value);
  #endif
  void set_conv_desc(const char* value);
  void set_conv_desc(const void* value, size_t size);
  ::std::string* mutable_conv_desc();
  ::std::string* release_conv_desc();
  void set_allocated_conv_desc(::std::string* conv_desc);

  // bytes y_desc = 5;
  void clear_y_desc();
  static const int kYDescFieldNumber = 5;
  const ::std::string& y_desc() const;
  void set_y_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_y_desc(::std::string&& value);
  #endif
  void set_y_desc(const char* value);
  void set_y_desc(const void* value, size_t size);
  ::std::string* mutable_y_desc();
  ::std::string* release_y_desc();
  void set_allocated_y_desc(::std::string* y_desc);

  // int32 count = 6;
  void clear_count();
  static const int kCountFieldNumber = 6;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr handle_;
  ::google::protobuf::internal::ArenaStringPtr x_desc_;
  ::google::protobuf::internal::ArenaStringPtr w_desc_;
  ::google::protobuf::internal::ArenaStringPtr conv_desc_;
  ::google::protobuf::internal::ArenaStringPtr y_desc_;
  ::google::protobuf::int32 count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cudnnGetConvolutionForwardAlgorithm_v7Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Response) */ {
 public:
  cudnnGetConvolutionForwardAlgorithm_v7Response();
  virtual ~cudnnGetConvolutionForwardAlgorithm_v7Response();

  cudnnGetConvolutionForwardAlgorithm_v7Response(const cudnnGetConvolutionForwardAlgorithm_v7Response& from);

  inline cudnnGetConvolutionForwardAlgorithm_v7Response& operator=(const cudnnGetConvolutionForwardAlgorithm_v7Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cudnnGetConvolutionForwardAlgorithm_v7Response(cudnnGetConvolutionForwardAlgorithm_v7Response&& from) noexcept
    : cudnnGetConvolutionForwardAlgorithm_v7Response() {
    *this = ::std::move(from);
  }

  inline cudnnGetConvolutionForwardAlgorithm_v7Response& operator=(cudnnGetConvolutionForwardAlgorithm_v7Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cudnnGetConvolutionForwardAlgorithm_v7Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cudnnGetConvolutionForwardAlgorithm_v7Response* internal_default_instance() {
    return reinterpret_cast<const cudnnGetConvolutionForwardAlgorithm_v7Response*>(
               &_cudnnGetConvolutionForwardAlgorithm_v7Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(cudnnGetConvolutionForwardAlgorithm_v7Response* other);
  friend void swap(cudnnGetConvolutionForwardAlgorithm_v7Response& a, cudnnGetConvolutionForwardAlgorithm_v7Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cudnnGetConvolutionForwardAlgorithm_v7Response* New() const final {
    return CreateMaybeMessage<cudnnGetConvolutionForwardAlgorithm_v7Response>(NULL);
  }

  cudnnGetConvolutionForwardAlgorithm_v7Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cudnnGetConvolutionForwardAlgorithm_v7Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cudnnGetConvolutionForwardAlgorithm_v7Response& from);
  void MergeFrom(const cudnnGetConvolutionForwardAlgorithm_v7Response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cudnnGetConvolutionForwardAlgorithm_v7Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes results = 3;
  void clear_results();
  static const int kResultsFieldNumber = 3;
  const ::std::string& results() const;
  void set_results(const ::std::string& value);
  #if LANG_CXX11
  void set_results(::std::string&& value);
  #endif
  void set_results(const char* value);
  void set_results(const void* value, size_t size);
  ::std::string* mutable_results();
  ::std::string* release_results();
  void set_allocated_results(::std::string* results);

  // int32 error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // int32 count = 2;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr results_;
  ::google::protobuf::int32 error_;
  ::google::protobuf::int32 count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cudnnConvolutionForwardQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cudnnConvolutionForwardQuery) */ {
 public:
  cudnnConvolutionForwardQuery();
  virtual ~cudnnConvolutionForwardQuery();

  cudnnConvolutionForwardQuery(const cudnnConvolutionForwardQuery& from);

  inline cudnnConvolutionForwardQuery& operator=(const cudnnConvolutionForwardQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cudnnConvolutionForwardQuery(cudnnConvolutionForwardQuery&& from) noexcept
    : cudnnConvolutionForwardQuery() {
    *this = ::std::move(from);
  }

  inline cudnnConvolutionForwardQuery& operator=(cudnnConvolutionForwardQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cudnnConvolutionForwardQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cudnnConvolutionForwardQuery* internal_default_instance() {
    return reinterpret_cast<const cudnnConvolutionForwardQuery*>(
               &_cudnnConvolutionForwardQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(cudnnConvolutionForwardQuery* other);
  friend void swap(cudnnConvolutionForwardQuery& a, cudnnConvolutionForwardQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cudnnConvolutionForwardQuery* New() const final {
    return CreateMaybeMessage<cudnnConvolutionForwardQuery>(NULL);
  }

  cudnnConvolutionForwardQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cudnnConvolutionForwardQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cudnnConvolutionForwardQuery& from);
  void MergeFrom(const cudnnConvolutionForwardQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cudnnConvolutionForwardQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes handle = 1;
  void clear_handle();
  static const int kHandleFieldNumber = 1;
  const ::std::string& handle() const;
  void set_handle(const ::std::string& value);
  #if LANG_CXX11
  void set_handle(::std::string&& value);
  #endif
  void set_handle(const char* value);
  void set_handle(const void* value, size_t size);
  ::std::string* mutable_handle();
  ::std::string* release_handle();
  void set_allocated_handle(::std::string* handle);

  // bytes x_desc = 3;
  void clear_x_desc();
  static const int kXDescFieldNumber = 3;
  const ::std::string& x_desc() const;
  void set_x_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_x_desc(::std::string&& value);
  #endif
  void set_x_desc(const char* value);
  void set_x_desc(const void* value, size_t size);
  ::std::string* mutable_x_desc();
  ::std::string* release_x_desc();
  void set_allocated_x_desc(::std::string* x_desc);

  // bytes w_Desc = 5;
  void clear_w_desc();
  static const int kWDescFieldNumber = 5;
  const ::std::string& w_desc() const;
  void set_w_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_w_desc(::std::string&& value);
  #endif
  void set_w_desc(const char* value);
  void set_w_desc(const void* value, size_t size);
  ::std::string* mutable_w_desc();
  ::std::string* release_w_desc();
  void set_allocated_w_desc(::std::string* w_desc);

  // bytes conv_desc = 7;
  void clear_conv_desc();
  static const int kConvDescFieldNumber = 7;
  const ::std::string& conv_desc() const;
  void set_conv_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_conv_desc(::std::string&& value);
  #endif
  void set_conv_desc(const char* value);
  void set_conv_desc(const void* value, size_t size);
  ::std::string* mutable_conv_desc();
  ::std::string* release_conv_desc();
  void set_allocated_conv_desc(::std::string* conv_desc);

  // bytes y_desc = 12;
  void clear_y_desc();
  static const int kYDescFieldNumber = 12;
  const ::std::string& y_desc() const;
  void set_y_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_y_desc(::std::string&& value);
  #endif
  void set_y_desc(const char* value);
  void set_y_desc(const void* value, size_t size);
  ::std::string* mutable_y_desc();
  ::std::string* release_y_desc();
  void set_allocated_y_desc(::std::string* y_desc);

  // uint64 x = 4;
  void clear_x();
  static const int kXFieldNumber = 4;
  ::google::protobuf::uint64 x() const;
  void set_x(::google::protobuf::uint64 value);

  // float alpha = 2;
  void clear_alpha();
  static const int kAlphaFieldNumber = 2;
  float alpha() const;
  void set_alpha(float value);

  // int32 algo = 8;
  void clear_algo();
  static const int kAlgoFieldNumber = 8;
  ::google::protobuf::int32 algo() const;
  void set_algo(::google::protobuf::int32 value);

  // uint64 w = 6;
  void clear_w();
  static const int kWFieldNumber = 6;
  ::google::protobuf::uint64 w() const;
  void set_w(::google::protobuf::uint64 value);

  // uint64 workspace = 9;
  void clear_workspace();
  static const int kWorkspaceFieldNumber = 9;
  ::google::protobuf::uint64 workspace() const;
  void set_workspace(::google::protobuf::uint64 value);

  // uint64 workspace_size = 10;
  void clear_workspace_size();
  static const int kWorkspaceSizeFieldNumber = 10;
  ::google::protobuf::uint64 workspace_size() const;
  void set_workspace_size(::google::protobuf::uint64 value);

  // uint64 y = 13;
  void clear_y();
  static const int kYFieldNumber = 13;
  ::google::protobuf::uint64 y() const;
  void set_y(::google::protobuf::uint64 value);

  // float beta = 11;
  void clear_beta();
  static const int kBetaFieldNumber = 11;
  float beta() const;
  void set_beta(float value);

  // @@protoc_insertion_point(class_scope:cudarpc.cudnnConvolutionForwardQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr handle_;
  ::google::protobuf::internal::ArenaStringPtr x_desc_;
  ::google::protobuf::internal::ArenaStringPtr w_desc_;
  ::google::protobuf::internal::ArenaStringPtr conv_desc_;
  ::google::protobuf::internal::ArenaStringPtr y_desc_;
  ::google::protobuf::uint64 x_;
  float alpha_;
  ::google::protobuf::int32 algo_;
  ::google::protobuf::uint64 w_;
  ::google::protobuf::uint64 workspace_;
  ::google::protobuf::uint64 workspace_size_;
  ::google::protobuf::uint64 y_;
  float beta_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cudnnBatchNormalizationForwardInferenceQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cudnnBatchNormalizationForwardInferenceQuery) */ {
 public:
  cudnnBatchNormalizationForwardInferenceQuery();
  virtual ~cudnnBatchNormalizationForwardInferenceQuery();

  cudnnBatchNormalizationForwardInferenceQuery(const cudnnBatchNormalizationForwardInferenceQuery& from);

  inline cudnnBatchNormalizationForwardInferenceQuery& operator=(const cudnnBatchNormalizationForwardInferenceQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cudnnBatchNormalizationForwardInferenceQuery(cudnnBatchNormalizationForwardInferenceQuery&& from) noexcept
    : cudnnBatchNormalizationForwardInferenceQuery() {
    *this = ::std::move(from);
  }

  inline cudnnBatchNormalizationForwardInferenceQuery& operator=(cudnnBatchNormalizationForwardInferenceQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cudnnBatchNormalizationForwardInferenceQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cudnnBatchNormalizationForwardInferenceQuery* internal_default_instance() {
    return reinterpret_cast<const cudnnBatchNormalizationForwardInferenceQuery*>(
               &_cudnnBatchNormalizationForwardInferenceQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(cudnnBatchNormalizationForwardInferenceQuery* other);
  friend void swap(cudnnBatchNormalizationForwardInferenceQuery& a, cudnnBatchNormalizationForwardInferenceQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cudnnBatchNormalizationForwardInferenceQuery* New() const final {
    return CreateMaybeMessage<cudnnBatchNormalizationForwardInferenceQuery>(NULL);
  }

  cudnnBatchNormalizationForwardInferenceQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cudnnBatchNormalizationForwardInferenceQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cudnnBatchNormalizationForwardInferenceQuery& from);
  void MergeFrom(const cudnnBatchNormalizationForwardInferenceQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cudnnBatchNormalizationForwardInferenceQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes handle = 1;
  void clear_handle();
  static const int kHandleFieldNumber = 1;
  const ::std::string& handle() const;
  void set_handle(const ::std::string& value);
  #if LANG_CXX11
  void set_handle(::std::string&& value);
  #endif
  void set_handle(const char* value);
  void set_handle(const void* value, size_t size);
  ::std::string* mutable_handle();
  ::std::string* release_handle();
  void set_allocated_handle(::std::string* handle);

  // bytes x_desc = 5;
  void clear_x_desc();
  static const int kXDescFieldNumber = 5;
  const ::std::string& x_desc() const;
  void set_x_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_x_desc(::std::string&& value);
  #endif
  void set_x_desc(const char* value);
  void set_x_desc(const void* value, size_t size);
  ::std::string* mutable_x_desc();
  ::std::string* release_x_desc();
  void set_allocated_x_desc(::std::string* x_desc);

  // bytes y_desc = 7;
  void clear_y_desc();
  static const int kYDescFieldNumber = 7;
  const ::std::string& y_desc() const;
  void set_y_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_y_desc(::std::string&& value);
  #endif
  void set_y_desc(const char* value);
  void set_y_desc(const void* value, size_t size);
  ::std::string* mutable_y_desc();
  ::std::string* release_y_desc();
  void set_allocated_y_desc(::std::string* y_desc);

  // bytes bn_Desc = 9;
  void clear_bn_desc();
  static const int kBnDescFieldNumber = 9;
  const ::std::string& bn_desc() const;
  void set_bn_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_bn_desc(::std::string&& value);
  #endif
  void set_bn_desc(const char* value);
  void set_bn_desc(const void* value, size_t size);
  ::std::string* mutable_bn_desc();
  ::std::string* release_bn_desc();
  void set_allocated_bn_desc(::std::string* bn_desc);

  // int32 mode = 2;
  void clear_mode();
  static const int kModeFieldNumber = 2;
  ::google::protobuf::int32 mode() const;
  void set_mode(::google::protobuf::int32 value);

  // float alpha = 3;
  void clear_alpha();
  static const int kAlphaFieldNumber = 3;
  float alpha() const;
  void set_alpha(float value);

  // uint64 x = 6;
  void clear_x();
  static const int kXFieldNumber = 6;
  ::google::protobuf::uint64 x() const;
  void set_x(::google::protobuf::uint64 value);

  // uint64 y = 8;
  void clear_y();
  static const int kYFieldNumber = 8;
  ::google::protobuf::uint64 y() const;
  void set_y(::google::protobuf::uint64 value);

  // uint64 bn_scale = 10;
  void clear_bn_scale();
  static const int kBnScaleFieldNumber = 10;
  ::google::protobuf::uint64 bn_scale() const;
  void set_bn_scale(::google::protobuf::uint64 value);

  // uint64 bn_bias = 11;
  void clear_bn_bias();
  static const int kBnBiasFieldNumber = 11;
  ::google::protobuf::uint64 bn_bias() const;
  void set_bn_bias(::google::protobuf::uint64 value);

  // uint64 es_mean = 12;
  void clear_es_mean();
  static const int kEsMeanFieldNumber = 12;
  ::google::protobuf::uint64 es_mean() const;
  void set_es_mean(::google::protobuf::uint64 value);

  // uint64 es_var = 13;
  void clear_es_var();
  static const int kEsVarFieldNumber = 13;
  ::google::protobuf::uint64 es_var() const;
  void set_es_var(::google::protobuf::uint64 value);

  // double epsilon = 14;
  void clear_epsilon();
  static const int kEpsilonFieldNumber = 14;
  double epsilon() const;
  void set_epsilon(double value);

  // float beta = 4;
  void clear_beta();
  static const int kBetaFieldNumber = 4;
  float beta() const;
  void set_beta(float value);

  // @@protoc_insertion_point(class_scope:cudarpc.cudnnBatchNormalizationForwardInferenceQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr handle_;
  ::google::protobuf::internal::ArenaStringPtr x_desc_;
  ::google::protobuf::internal::ArenaStringPtr y_desc_;
  ::google::protobuf::internal::ArenaStringPtr bn_desc_;
  ::google::protobuf::int32 mode_;
  float alpha_;
  ::google::protobuf::uint64 x_;
  ::google::protobuf::uint64 y_;
  ::google::protobuf::uint64 bn_scale_;
  ::google::protobuf::uint64 bn_bias_;
  ::google::protobuf::uint64 es_mean_;
  ::google::protobuf::uint64 es_var_;
  double epsilon_;
  float beta_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cuInitQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cuInitQuery) */ {
 public:
  cuInitQuery();
  virtual ~cuInitQuery();

  cuInitQuery(const cuInitQuery& from);

  inline cuInitQuery& operator=(const cuInitQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cuInitQuery(cuInitQuery&& from) noexcept
    : cuInitQuery() {
    *this = ::std::move(from);
  }

  inline cuInitQuery& operator=(cuInitQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cuInitQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cuInitQuery* internal_default_instance() {
    return reinterpret_cast<const cuInitQuery*>(
               &_cuInitQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(cuInitQuery* other);
  friend void swap(cuInitQuery& a, cuInitQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cuInitQuery* New() const final {
    return CreateMaybeMessage<cuInitQuery>(NULL);
  }

  cuInitQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cuInitQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cuInitQuery& from);
  void MergeFrom(const cuInitQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cuInitQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 flags = 1;
  void clear_flags();
  static const int kFlagsFieldNumber = 1;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cuInitQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 flags_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cuDevicePrimaryCtxGetStateQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cuDevicePrimaryCtxGetStateQuery) */ {
 public:
  cuDevicePrimaryCtxGetStateQuery();
  virtual ~cuDevicePrimaryCtxGetStateQuery();

  cuDevicePrimaryCtxGetStateQuery(const cuDevicePrimaryCtxGetStateQuery& from);

  inline cuDevicePrimaryCtxGetStateQuery& operator=(const cuDevicePrimaryCtxGetStateQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cuDevicePrimaryCtxGetStateQuery(cuDevicePrimaryCtxGetStateQuery&& from) noexcept
    : cuDevicePrimaryCtxGetStateQuery() {
    *this = ::std::move(from);
  }

  inline cuDevicePrimaryCtxGetStateQuery& operator=(cuDevicePrimaryCtxGetStateQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cuDevicePrimaryCtxGetStateQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cuDevicePrimaryCtxGetStateQuery* internal_default_instance() {
    return reinterpret_cast<const cuDevicePrimaryCtxGetStateQuery*>(
               &_cuDevicePrimaryCtxGetStateQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(cuDevicePrimaryCtxGetStateQuery* other);
  friend void swap(cuDevicePrimaryCtxGetStateQuery& a, cuDevicePrimaryCtxGetStateQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cuDevicePrimaryCtxGetStateQuery* New() const final {
    return CreateMaybeMessage<cuDevicePrimaryCtxGetStateQuery>(NULL);
  }

  cuDevicePrimaryCtxGetStateQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cuDevicePrimaryCtxGetStateQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cuDevicePrimaryCtxGetStateQuery& from);
  void MergeFrom(const cuDevicePrimaryCtxGetStateQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cuDevicePrimaryCtxGetStateQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 device = 1;
  void clear_device();
  static const int kDeviceFieldNumber = 1;
  ::google::protobuf::int64 device() const;
  void set_device(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cuDevicePrimaryCtxGetStateQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 device_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cuDevicePrimaryCtxGetStateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cuDevicePrimaryCtxGetStateResponse) */ {
 public:
  cuDevicePrimaryCtxGetStateResponse();
  virtual ~cuDevicePrimaryCtxGetStateResponse();

  cuDevicePrimaryCtxGetStateResponse(const cuDevicePrimaryCtxGetStateResponse& from);

  inline cuDevicePrimaryCtxGetStateResponse& operator=(const cuDevicePrimaryCtxGetStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cuDevicePrimaryCtxGetStateResponse(cuDevicePrimaryCtxGetStateResponse&& from) noexcept
    : cuDevicePrimaryCtxGetStateResponse() {
    *this = ::std::move(from);
  }

  inline cuDevicePrimaryCtxGetStateResponse& operator=(cuDevicePrimaryCtxGetStateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cuDevicePrimaryCtxGetStateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cuDevicePrimaryCtxGetStateResponse* internal_default_instance() {
    return reinterpret_cast<const cuDevicePrimaryCtxGetStateResponse*>(
               &_cuDevicePrimaryCtxGetStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(cuDevicePrimaryCtxGetStateResponse* other);
  friend void swap(cuDevicePrimaryCtxGetStateResponse& a, cuDevicePrimaryCtxGetStateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cuDevicePrimaryCtxGetStateResponse* New() const final {
    return CreateMaybeMessage<cuDevicePrimaryCtxGetStateResponse>(NULL);
  }

  cuDevicePrimaryCtxGetStateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cuDevicePrimaryCtxGetStateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cuDevicePrimaryCtxGetStateResponse& from);
  void MergeFrom(const cuDevicePrimaryCtxGetStateResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cuDevicePrimaryCtxGetStateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // uint32 flags = 2;
  void clear_flags();
  static const int kFlagsFieldNumber = 2;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // int32 active = 3;
  void clear_active();
  static const int kActiveFieldNumber = 3;
  ::google::protobuf::int32 active() const;
  void set_active(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cuDevicePrimaryCtxGetStateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 error_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::int32 active_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cuGetProcAddressQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cuGetProcAddressQuery) */ {
 public:
  cuGetProcAddressQuery();
  virtual ~cuGetProcAddressQuery();

  cuGetProcAddressQuery(const cuGetProcAddressQuery& from);

  inline cuGetProcAddressQuery& operator=(const cuGetProcAddressQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cuGetProcAddressQuery(cuGetProcAddressQuery&& from) noexcept
    : cuGetProcAddressQuery() {
    *this = ::std::move(from);
  }

  inline cuGetProcAddressQuery& operator=(cuGetProcAddressQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cuGetProcAddressQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cuGetProcAddressQuery* internal_default_instance() {
    return reinterpret_cast<const cuGetProcAddressQuery*>(
               &_cuGetProcAddressQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(cuGetProcAddressQuery* other);
  friend void swap(cuGetProcAddressQuery& a, cuGetProcAddressQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cuGetProcAddressQuery* New() const final {
    return CreateMaybeMessage<cuGetProcAddressQuery>(NULL);
  }

  cuGetProcAddressQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cuGetProcAddressQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cuGetProcAddressQuery& from);
  void MergeFrom(const cuGetProcAddressQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cuGetProcAddressQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes symbol = 1;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol(::std::string&& value);
  #endif
  void set_symbol(const char* value);
  void set_symbol(const void* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // uint64 flags = 3;
  void clear_flags();
  static const int kFlagsFieldNumber = 3;
  ::google::protobuf::uint64 flags() const;
  void set_flags(::google::protobuf::uint64 value);

  // int32 version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cuGetProcAddressQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::uint64 flags_;
  ::google::protobuf::int32 version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cuGetProcAddressResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cuGetProcAddressResponse) */ {
 public:
  cuGetProcAddressResponse();
  virtual ~cuGetProcAddressResponse();

  cuGetProcAddressResponse(const cuGetProcAddressResponse& from);

  inline cuGetProcAddressResponse& operator=(const cuGetProcAddressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cuGetProcAddressResponse(cuGetProcAddressResponse&& from) noexcept
    : cuGetProcAddressResponse() {
    *this = ::std::move(from);
  }

  inline cuGetProcAddressResponse& operator=(cuGetProcAddressResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cuGetProcAddressResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cuGetProcAddressResponse* internal_default_instance() {
    return reinterpret_cast<const cuGetProcAddressResponse*>(
               &_cuGetProcAddressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(cuGetProcAddressResponse* other);
  friend void swap(cuGetProcAddressResponse& a, cuGetProcAddressResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cuGetProcAddressResponse* New() const final {
    return CreateMaybeMessage<cuGetProcAddressResponse>(NULL);
  }

  cuGetProcAddressResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cuGetProcAddressResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cuGetProcAddressResponse& from);
  void MergeFrom(const cuGetProcAddressResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cuGetProcAddressResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 pfn = 2;
  void clear_pfn();
  static const int kPfnFieldNumber = 2;
  ::google::protobuf::uint64 pfn() const;
  void set_pfn(::google::protobuf::uint64 value);

  // int32 error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cuGetProcAddressResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 pfn_;
  ::google::protobuf::int32 error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class getVersionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.getVersionResponse) */ {
 public:
  getVersionResponse();
  virtual ~getVersionResponse();

  getVersionResponse(const getVersionResponse& from);

  inline getVersionResponse& operator=(const getVersionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  getVersionResponse(getVersionResponse&& from) noexcept
    : getVersionResponse() {
    *this = ::std::move(from);
  }

  inline getVersionResponse& operator=(getVersionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const getVersionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const getVersionResponse* internal_default_instance() {
    return reinterpret_cast<const getVersionResponse*>(
               &_getVersionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(getVersionResponse* other);
  friend void swap(getVersionResponse& a, getVersionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline getVersionResponse* New() const final {
    return CreateMaybeMessage<getVersionResponse>(NULL);
  }

  getVersionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<getVersionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const getVersionResponse& from);
  void MergeFrom(const getVersionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getVersionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // int32 version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.getVersionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 error_;
  ::google::protobuf::int32 version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cudaGetDeviceResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cudaGetDeviceResponse) */ {
 public:
  cudaGetDeviceResponse();
  virtual ~cudaGetDeviceResponse();

  cudaGetDeviceResponse(const cudaGetDeviceResponse& from);

  inline cudaGetDeviceResponse& operator=(const cudaGetDeviceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cudaGetDeviceResponse(cudaGetDeviceResponse&& from) noexcept
    : cudaGetDeviceResponse() {
    *this = ::std::move(from);
  }

  inline cudaGetDeviceResponse& operator=(cudaGetDeviceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cudaGetDeviceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cudaGetDeviceResponse* internal_default_instance() {
    return reinterpret_cast<const cudaGetDeviceResponse*>(
               &_cudaGetDeviceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(cudaGetDeviceResponse* other);
  friend void swap(cudaGetDeviceResponse& a, cudaGetDeviceResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cudaGetDeviceResponse* New() const final {
    return CreateMaybeMessage<cudaGetDeviceResponse>(NULL);
  }

  cudaGetDeviceResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cudaGetDeviceResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cudaGetDeviceResponse& from);
  void MergeFrom(const cudaGetDeviceResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cudaGetDeviceResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // int32 device = 2;
  void clear_device();
  static const int kDeviceFieldNumber = 2;
  ::google::protobuf::int32 device() const;
  void set_device(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cudaGetDeviceResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 error_;
  ::google::protobuf::int32 device_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cudaGetDeviceCountResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cudaGetDeviceCountResponse) */ {
 public:
  cudaGetDeviceCountResponse();
  virtual ~cudaGetDeviceCountResponse();

  cudaGetDeviceCountResponse(const cudaGetDeviceCountResponse& from);

  inline cudaGetDeviceCountResponse& operator=(const cudaGetDeviceCountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cudaGetDeviceCountResponse(cudaGetDeviceCountResponse&& from) noexcept
    : cudaGetDeviceCountResponse() {
    *this = ::std::move(from);
  }

  inline cudaGetDeviceCountResponse& operator=(cudaGetDeviceCountResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cudaGetDeviceCountResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cudaGetDeviceCountResponse* internal_default_instance() {
    return reinterpret_cast<const cudaGetDeviceCountResponse*>(
               &_cudaGetDeviceCountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(cudaGetDeviceCountResponse* other);
  friend void swap(cudaGetDeviceCountResponse& a, cudaGetDeviceCountResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cudaGetDeviceCountResponse* New() const final {
    return CreateMaybeMessage<cudaGetDeviceCountResponse>(NULL);
  }

  cudaGetDeviceCountResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cudaGetDeviceCountResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cudaGetDeviceCountResponse& from);
  void MergeFrom(const cudaGetDeviceCountResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cudaGetDeviceCountResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // int32 count = 2;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cudaGetDeviceCountResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 error_;
  ::google::protobuf::int32 count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cudaGetDevicePropertiesQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cudaGetDevicePropertiesQuery) */ {
 public:
  cudaGetDevicePropertiesQuery();
  virtual ~cudaGetDevicePropertiesQuery();

  cudaGetDevicePropertiesQuery(const cudaGetDevicePropertiesQuery& from);

  inline cudaGetDevicePropertiesQuery& operator=(const cudaGetDevicePropertiesQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cudaGetDevicePropertiesQuery(cudaGetDevicePropertiesQuery&& from) noexcept
    : cudaGetDevicePropertiesQuery() {
    *this = ::std::move(from);
  }

  inline cudaGetDevicePropertiesQuery& operator=(cudaGetDevicePropertiesQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cudaGetDevicePropertiesQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cudaGetDevicePropertiesQuery* internal_default_instance() {
    return reinterpret_cast<const cudaGetDevicePropertiesQuery*>(
               &_cudaGetDevicePropertiesQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(cudaGetDevicePropertiesQuery* other);
  friend void swap(cudaGetDevicePropertiesQuery& a, cudaGetDevicePropertiesQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cudaGetDevicePropertiesQuery* New() const final {
    return CreateMaybeMessage<cudaGetDevicePropertiesQuery>(NULL);
  }

  cudaGetDevicePropertiesQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cudaGetDevicePropertiesQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cudaGetDevicePropertiesQuery& from);
  void MergeFrom(const cudaGetDevicePropertiesQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cudaGetDevicePropertiesQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 device = 1;
  void clear_device();
  static const int kDeviceFieldNumber = 1;
  ::google::protobuf::int32 device() const;
  void set_device(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cudaGetDevicePropertiesQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 device_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cudaGetDevicePropertiesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cudaGetDevicePropertiesResponse) */ {
 public:
  cudaGetDevicePropertiesResponse();
  virtual ~cudaGetDevicePropertiesResponse();

  cudaGetDevicePropertiesResponse(const cudaGetDevicePropertiesResponse& from);

  inline cudaGetDevicePropertiesResponse& operator=(const cudaGetDevicePropertiesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cudaGetDevicePropertiesResponse(cudaGetDevicePropertiesResponse&& from) noexcept
    : cudaGetDevicePropertiesResponse() {
    *this = ::std::move(from);
  }

  inline cudaGetDevicePropertiesResponse& operator=(cudaGetDevicePropertiesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cudaGetDevicePropertiesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cudaGetDevicePropertiesResponse* internal_default_instance() {
    return reinterpret_cast<const cudaGetDevicePropertiesResponse*>(
               &_cudaGetDevicePropertiesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(cudaGetDevicePropertiesResponse* other);
  friend void swap(cudaGetDevicePropertiesResponse& a, cudaGetDevicePropertiesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cudaGetDevicePropertiesResponse* New() const final {
    return CreateMaybeMessage<cudaGetDevicePropertiesResponse>(NULL);
  }

  cudaGetDevicePropertiesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cudaGetDevicePropertiesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cudaGetDevicePropertiesResponse& from);
  void MergeFrom(const cudaGetDevicePropertiesResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cudaGetDevicePropertiesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes prop = 2;
  void clear_prop();
  static const int kPropFieldNumber = 2;
  const ::std::string& prop() const;
  void set_prop(const ::std::string& value);
  #if LANG_CXX11
  void set_prop(::std::string&& value);
  #endif
  void set_prop(const char* value);
  void set_prop(const void* value, size_t size);
  ::std::string* mutable_prop();
  ::std::string* release_prop();
  void set_allocated_prop(::std::string* prop);

  // int32 error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cudaGetDevicePropertiesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr prop_;
  ::google::protobuf::int32 error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cudaDeviceGetAttributeQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cudaDeviceGetAttributeQuery) */ {
 public:
  cudaDeviceGetAttributeQuery();
  virtual ~cudaDeviceGetAttributeQuery();

  cudaDeviceGetAttributeQuery(const cudaDeviceGetAttributeQuery& from);

  inline cudaDeviceGetAttributeQuery& operator=(const cudaDeviceGetAttributeQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cudaDeviceGetAttributeQuery(cudaDeviceGetAttributeQuery&& from) noexcept
    : cudaDeviceGetAttributeQuery() {
    *this = ::std::move(from);
  }

  inline cudaDeviceGetAttributeQuery& operator=(cudaDeviceGetAttributeQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cudaDeviceGetAttributeQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cudaDeviceGetAttributeQuery* internal_default_instance() {
    return reinterpret_cast<const cudaDeviceGetAttributeQuery*>(
               &_cudaDeviceGetAttributeQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(cudaDeviceGetAttributeQuery* other);
  friend void swap(cudaDeviceGetAttributeQuery& a, cudaDeviceGetAttributeQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cudaDeviceGetAttributeQuery* New() const final {
    return CreateMaybeMessage<cudaDeviceGetAttributeQuery>(NULL);
  }

  cudaDeviceGetAttributeQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cudaDeviceGetAttributeQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cudaDeviceGetAttributeQuery& from);
  void MergeFrom(const cudaDeviceGetAttributeQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cudaDeviceGetAttributeQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 attr = 1;
  void clear_attr();
  static const int kAttrFieldNumber = 1;
  ::google::protobuf::int32 attr() const;
  void set_attr(::google::protobuf::int32 value);

  // int32 device = 2;
  void clear_device();
  static const int kDeviceFieldNumber = 2;
  ::google::protobuf::int32 device() const;
  void set_device(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cudaDeviceGetAttributeQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 attr_;
  ::google::protobuf::int32 device_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cudaDeviceGetAttributeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cudaDeviceGetAttributeResponse) */ {
 public:
  cudaDeviceGetAttributeResponse();
  virtual ~cudaDeviceGetAttributeResponse();

  cudaDeviceGetAttributeResponse(const cudaDeviceGetAttributeResponse& from);

  inline cudaDeviceGetAttributeResponse& operator=(const cudaDeviceGetAttributeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cudaDeviceGetAttributeResponse(cudaDeviceGetAttributeResponse&& from) noexcept
    : cudaDeviceGetAttributeResponse() {
    *this = ::std::move(from);
  }

  inline cudaDeviceGetAttributeResponse& operator=(cudaDeviceGetAttributeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cudaDeviceGetAttributeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cudaDeviceGetAttributeResponse* internal_default_instance() {
    return reinterpret_cast<const cudaDeviceGetAttributeResponse*>(
               &_cudaDeviceGetAttributeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(cudaDeviceGetAttributeResponse* other);
  friend void swap(cudaDeviceGetAttributeResponse& a, cudaDeviceGetAttributeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cudaDeviceGetAttributeResponse* New() const final {
    return CreateMaybeMessage<cudaDeviceGetAttributeResponse>(NULL);
  }

  cudaDeviceGetAttributeResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cudaDeviceGetAttributeResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cudaDeviceGetAttributeResponse& from);
  void MergeFrom(const cudaDeviceGetAttributeResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cudaDeviceGetAttributeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // int32 value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cudaDeviceGetAttributeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 error_;
  ::google::protobuf::int32 value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cudaMallocQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cudaMallocQuery) */ {
 public:
  cudaMallocQuery();
  virtual ~cudaMallocQuery();

  cudaMallocQuery(const cudaMallocQuery& from);

  inline cudaMallocQuery& operator=(const cudaMallocQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cudaMallocQuery(cudaMallocQuery&& from) noexcept
    : cudaMallocQuery() {
    *this = ::std::move(from);
  }

  inline cudaMallocQuery& operator=(cudaMallocQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cudaMallocQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cudaMallocQuery* internal_default_instance() {
    return reinterpret_cast<const cudaMallocQuery*>(
               &_cudaMallocQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(cudaMallocQuery* other);
  friend void swap(cudaMallocQuery& a, cudaMallocQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cudaMallocQuery* New() const final {
    return CreateMaybeMessage<cudaMallocQuery>(NULL);
  }

  cudaMallocQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cudaMallocQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cudaMallocQuery& from);
  void MergeFrom(const cudaMallocQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cudaMallocQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 size = 1;
  void clear_size();
  static const int kSizeFieldNumber = 1;
  ::google::protobuf::uint64 size() const;
  void set_size(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cudaMallocQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cudaMallocResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cudaMallocResponse) */ {
 public:
  cudaMallocResponse();
  virtual ~cudaMallocResponse();

  cudaMallocResponse(const cudaMallocResponse& from);

  inline cudaMallocResponse& operator=(const cudaMallocResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cudaMallocResponse(cudaMallocResponse&& from) noexcept
    : cudaMallocResponse() {
    *this = ::std::move(from);
  }

  inline cudaMallocResponse& operator=(cudaMallocResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cudaMallocResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cudaMallocResponse* internal_default_instance() {
    return reinterpret_cast<const cudaMallocResponse*>(
               &_cudaMallocResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(cudaMallocResponse* other);
  friend void swap(cudaMallocResponse& a, cudaMallocResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cudaMallocResponse* New() const final {
    return CreateMaybeMessage<cudaMallocResponse>(NULL);
  }

  cudaMallocResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cudaMallocResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cudaMallocResponse& from);
  void MergeFrom(const cudaMallocResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cudaMallocResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 ptr = 2;
  void clear_ptr();
  static const int kPtrFieldNumber = 2;
  ::google::protobuf::uint64 ptr() const;
  void set_ptr(::google::protobuf::uint64 value);

  // int32 error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cudaMallocResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 ptr_;
  ::google::protobuf::int32 error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cudaFreeQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cudaFreeQuery) */ {
 public:
  cudaFreeQuery();
  virtual ~cudaFreeQuery();

  cudaFreeQuery(const cudaFreeQuery& from);

  inline cudaFreeQuery& operator=(const cudaFreeQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cudaFreeQuery(cudaFreeQuery&& from) noexcept
    : cudaFreeQuery() {
    *this = ::std::move(from);
  }

  inline cudaFreeQuery& operator=(cudaFreeQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cudaFreeQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cudaFreeQuery* internal_default_instance() {
    return reinterpret_cast<const cudaFreeQuery*>(
               &_cudaFreeQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(cudaFreeQuery* other);
  friend void swap(cudaFreeQuery& a, cudaFreeQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cudaFreeQuery* New() const final {
    return CreateMaybeMessage<cudaFreeQuery>(NULL);
  }

  cudaFreeQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cudaFreeQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cudaFreeQuery& from);
  void MergeFrom(const cudaFreeQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cudaFreeQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 ptr = 1;
  void clear_ptr();
  static const int kPtrFieldNumber = 1;
  ::google::protobuf::uint64 ptr() const;
  void set_ptr(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cudaFreeQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 ptr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cudaMemcpyQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cudaMemcpyQuery) */ {
 public:
  cudaMemcpyQuery();
  virtual ~cudaMemcpyQuery();

  cudaMemcpyQuery(const cudaMemcpyQuery& from);

  inline cudaMemcpyQuery& operator=(const cudaMemcpyQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cudaMemcpyQuery(cudaMemcpyQuery&& from) noexcept
    : cudaMemcpyQuery() {
    *this = ::std::move(from);
  }

  inline cudaMemcpyQuery& operator=(cudaMemcpyQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cudaMemcpyQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cudaMemcpyQuery* internal_default_instance() {
    return reinterpret_cast<const cudaMemcpyQuery*>(
               &_cudaMemcpyQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(cudaMemcpyQuery* other);
  friend void swap(cudaMemcpyQuery& a, cudaMemcpyQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cudaMemcpyQuery* New() const final {
    return CreateMaybeMessage<cudaMemcpyQuery>(NULL);
  }

  cudaMemcpyQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cudaMemcpyQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cudaMemcpyQuery& from);
  void MergeFrom(const cudaMemcpyQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cudaMemcpyQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes payload = 5;
  void clear_payload();
  static const int kPayloadFieldNumber = 5;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  #if LANG_CXX11
  void set_payload(::std::string&& value);
  #endif
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);

  // uint64 src = 2;
  void clear_src();
  static const int kSrcFieldNumber = 2;
  ::google::protobuf::uint64 src() const;
  void set_src(::google::protobuf::uint64 value);

  // uint64 dst = 3;
  void clear_dst();
  static const int kDstFieldNumber = 3;
  ::google::protobuf::uint64 dst() const;
  void set_dst(::google::protobuf::uint64 value);

  // uint64 count = 4;
  void clear_count();
  static const int kCountFieldNumber = 4;
  ::google::protobuf::uint64 count() const;
  void set_count(::google::protobuf::uint64 value);

  // int32 kind = 1;
  void clear_kind();
  static const int kKindFieldNumber = 1;
  ::google::protobuf::int32 kind() const;
  void set_kind(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cudaMemcpyQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  ::google::protobuf::uint64 src_;
  ::google::protobuf::uint64 dst_;
  ::google::protobuf::uint64 count_;
  ::google::protobuf::int32 kind_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cudaMemcpyResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cudaMemcpyResponse) */ {
 public:
  cudaMemcpyResponse();
  virtual ~cudaMemcpyResponse();

  cudaMemcpyResponse(const cudaMemcpyResponse& from);

  inline cudaMemcpyResponse& operator=(const cudaMemcpyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cudaMemcpyResponse(cudaMemcpyResponse&& from) noexcept
    : cudaMemcpyResponse() {
    *this = ::std::move(from);
  }

  inline cudaMemcpyResponse& operator=(cudaMemcpyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cudaMemcpyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cudaMemcpyResponse* internal_default_instance() {
    return reinterpret_cast<const cudaMemcpyResponse*>(
               &_cudaMemcpyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(cudaMemcpyResponse* other);
  friend void swap(cudaMemcpyResponse& a, cudaMemcpyResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cudaMemcpyResponse* New() const final {
    return CreateMaybeMessage<cudaMemcpyResponse>(NULL);
  }

  cudaMemcpyResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cudaMemcpyResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cudaMemcpyResponse& from);
  void MergeFrom(const cudaMemcpyResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cudaMemcpyResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes payload = 2;
  void clear_payload();
  static const int kPayloadFieldNumber = 2;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  #if LANG_CXX11
  void set_payload(::std::string&& value);
  #endif
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);

  // int32 error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cudaMemcpyResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  ::google::protobuf::int32 error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cudaMemcpyAsyncQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cudaMemcpyAsyncQuery) */ {
 public:
  cudaMemcpyAsyncQuery();
  virtual ~cudaMemcpyAsyncQuery();

  cudaMemcpyAsyncQuery(const cudaMemcpyAsyncQuery& from);

  inline cudaMemcpyAsyncQuery& operator=(const cudaMemcpyAsyncQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cudaMemcpyAsyncQuery(cudaMemcpyAsyncQuery&& from) noexcept
    : cudaMemcpyAsyncQuery() {
    *this = ::std::move(from);
  }

  inline cudaMemcpyAsyncQuery& operator=(cudaMemcpyAsyncQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cudaMemcpyAsyncQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cudaMemcpyAsyncQuery* internal_default_instance() {
    return reinterpret_cast<const cudaMemcpyAsyncQuery*>(
               &_cudaMemcpyAsyncQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(cudaMemcpyAsyncQuery* other);
  friend void swap(cudaMemcpyAsyncQuery& a, cudaMemcpyAsyncQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cudaMemcpyAsyncQuery* New() const final {
    return CreateMaybeMessage<cudaMemcpyAsyncQuery>(NULL);
  }

  cudaMemcpyAsyncQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cudaMemcpyAsyncQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cudaMemcpyAsyncQuery& from);
  void MergeFrom(const cudaMemcpyAsyncQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cudaMemcpyAsyncQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes payload = 5;
  void clear_payload();
  static const int kPayloadFieldNumber = 5;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  #if LANG_CXX11
  void set_payload(::std::string&& value);
  #endif
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);

  // bytes stream = 6;
  void clear_stream();
  static const int kStreamFieldNumber = 6;
  const ::std::string& stream() const;
  void set_stream(const ::std::string& value);
  #if LANG_CXX11
  void set_stream(::std::string&& value);
  #endif
  void set_stream(const char* value);
  void set_stream(const void* value, size_t size);
  ::std::string* mutable_stream();
  ::std::string* release_stream();
  void set_allocated_stream(::std::string* stream);

  // uint64 src = 2;
  void clear_src();
  static const int kSrcFieldNumber = 2;
  ::google::protobuf::uint64 src() const;
  void set_src(::google::protobuf::uint64 value);

  // uint64 dst = 3;
  void clear_dst();
  static const int kDstFieldNumber = 3;
  ::google::protobuf::uint64 dst() const;
  void set_dst(::google::protobuf::uint64 value);

  // uint64 count = 4;
  void clear_count();
  static const int kCountFieldNumber = 4;
  ::google::protobuf::uint64 count() const;
  void set_count(::google::protobuf::uint64 value);

  // int32 kind = 1;
  void clear_kind();
  static const int kKindFieldNumber = 1;
  ::google::protobuf::int32 kind() const;
  void set_kind(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cudaMemcpyAsyncQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  ::google::protobuf::internal::ArenaStringPtr stream_;
  ::google::protobuf::uint64 src_;
  ::google::protobuf::uint64 dst_;
  ::google::protobuf::uint64 count_;
  ::google::protobuf::int32 kind_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cudaGetSymbolAddressQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cudaGetSymbolAddressQuery) */ {
 public:
  cudaGetSymbolAddressQuery();
  virtual ~cudaGetSymbolAddressQuery();

  cudaGetSymbolAddressQuery(const cudaGetSymbolAddressQuery& from);

  inline cudaGetSymbolAddressQuery& operator=(const cudaGetSymbolAddressQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cudaGetSymbolAddressQuery(cudaGetSymbolAddressQuery&& from) noexcept
    : cudaGetSymbolAddressQuery() {
    *this = ::std::move(from);
  }

  inline cudaGetSymbolAddressQuery& operator=(cudaGetSymbolAddressQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cudaGetSymbolAddressQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cudaGetSymbolAddressQuery* internal_default_instance() {
    return reinterpret_cast<const cudaGetSymbolAddressQuery*>(
               &_cudaGetSymbolAddressQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(cudaGetSymbolAddressQuery* other);
  friend void swap(cudaGetSymbolAddressQuery& a, cudaGetSymbolAddressQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cudaGetSymbolAddressQuery* New() const final {
    return CreateMaybeMessage<cudaGetSymbolAddressQuery>(NULL);
  }

  cudaGetSymbolAddressQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cudaGetSymbolAddressQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cudaGetSymbolAddressQuery& from);
  void MergeFrom(const cudaGetSymbolAddressQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cudaGetSymbolAddressQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 symbol = 1;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  ::google::protobuf::uint64 symbol() const;
  void set_symbol(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cudaGetSymbolAddressQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 symbol_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cudaGetSymbolAddressResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cudaGetSymbolAddressResponse) */ {
 public:
  cudaGetSymbolAddressResponse();
  virtual ~cudaGetSymbolAddressResponse();

  cudaGetSymbolAddressResponse(const cudaGetSymbolAddressResponse& from);

  inline cudaGetSymbolAddressResponse& operator=(const cudaGetSymbolAddressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cudaGetSymbolAddressResponse(cudaGetSymbolAddressResponse&& from) noexcept
    : cudaGetSymbolAddressResponse() {
    *this = ::std::move(from);
  }

  inline cudaGetSymbolAddressResponse& operator=(cudaGetSymbolAddressResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cudaGetSymbolAddressResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cudaGetSymbolAddressResponse* internal_default_instance() {
    return reinterpret_cast<const cudaGetSymbolAddressResponse*>(
               &_cudaGetSymbolAddressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(cudaGetSymbolAddressResponse* other);
  friend void swap(cudaGetSymbolAddressResponse& a, cudaGetSymbolAddressResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cudaGetSymbolAddressResponse* New() const final {
    return CreateMaybeMessage<cudaGetSymbolAddressResponse>(NULL);
  }

  cudaGetSymbolAddressResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cudaGetSymbolAddressResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cudaGetSymbolAddressResponse& from);
  void MergeFrom(const cudaGetSymbolAddressResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cudaGetSymbolAddressResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 ptr = 2;
  void clear_ptr();
  static const int kPtrFieldNumber = 2;
  ::google::protobuf::uint64 ptr() const;
  void set_ptr(::google::protobuf::uint64 value);

  // int32 error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cudaGetSymbolAddressResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 ptr_;
  ::google::protobuf::int32 error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cudaMemcpyAsyncResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cudaMemcpyAsyncResponse) */ {
 public:
  cudaMemcpyAsyncResponse();
  virtual ~cudaMemcpyAsyncResponse();

  cudaMemcpyAsyncResponse(const cudaMemcpyAsyncResponse& from);

  inline cudaMemcpyAsyncResponse& operator=(const cudaMemcpyAsyncResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cudaMemcpyAsyncResponse(cudaMemcpyAsyncResponse&& from) noexcept
    : cudaMemcpyAsyncResponse() {
    *this = ::std::move(from);
  }

  inline cudaMemcpyAsyncResponse& operator=(cudaMemcpyAsyncResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cudaMemcpyAsyncResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cudaMemcpyAsyncResponse* internal_default_instance() {
    return reinterpret_cast<const cudaMemcpyAsyncResponse*>(
               &_cudaMemcpyAsyncResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(cudaMemcpyAsyncResponse* other);
  friend void swap(cudaMemcpyAsyncResponse& a, cudaMemcpyAsyncResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cudaMemcpyAsyncResponse* New() const final {
    return CreateMaybeMessage<cudaMemcpyAsyncResponse>(NULL);
  }

  cudaMemcpyAsyncResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cudaMemcpyAsyncResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cudaMemcpyAsyncResponse& from);
  void MergeFrom(const cudaMemcpyAsyncResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cudaMemcpyAsyncResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes payload = 2;
  void clear_payload();
  static const int kPayloadFieldNumber = 2;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  #if LANG_CXX11
  void set_payload(::std::string&& value);
  #endif
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);

  // uint64 ptr = 1;
  void clear_ptr();
  static const int kPtrFieldNumber = 1;
  ::google::protobuf::uint64 ptr() const;
  void set_ptr(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cudaMemcpyAsyncResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  ::google::protobuf::uint64 ptr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cudaMemsetAsyncQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cudaMemsetAsyncQuery) */ {
 public:
  cudaMemsetAsyncQuery();
  virtual ~cudaMemsetAsyncQuery();

  cudaMemsetAsyncQuery(const cudaMemsetAsyncQuery& from);

  inline cudaMemsetAsyncQuery& operator=(const cudaMemsetAsyncQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cudaMemsetAsyncQuery(cudaMemsetAsyncQuery&& from) noexcept
    : cudaMemsetAsyncQuery() {
    *this = ::std::move(from);
  }

  inline cudaMemsetAsyncQuery& operator=(cudaMemsetAsyncQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cudaMemsetAsyncQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cudaMemsetAsyncQuery* internal_default_instance() {
    return reinterpret_cast<const cudaMemsetAsyncQuery*>(
               &_cudaMemsetAsyncQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(cudaMemsetAsyncQuery* other);
  friend void swap(cudaMemsetAsyncQuery& a, cudaMemsetAsyncQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cudaMemsetAsyncQuery* New() const final {
    return CreateMaybeMessage<cudaMemsetAsyncQuery>(NULL);
  }

  cudaMemsetAsyncQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cudaMemsetAsyncQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cudaMemsetAsyncQuery& from);
  void MergeFrom(const cudaMemsetAsyncQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cudaMemsetAsyncQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes stream = 4;
  void clear_stream();
  static const int kStreamFieldNumber = 4;
  const ::std::string& stream() const;
  void set_stream(const ::std::string& value);
  #if LANG_CXX11
  void set_stream(::std::string&& value);
  #endif
  void set_stream(const char* value);
  void set_stream(const void* value, size_t size);
  ::std::string* mutable_stream();
  ::std::string* release_stream();
  void set_allocated_stream(::std::string* stream);

  // uint64 ptr = 1;
  void clear_ptr();
  static const int kPtrFieldNumber = 1;
  ::google::protobuf::uint64 ptr() const;
  void set_ptr(::google::protobuf::uint64 value);

  // uint64 count = 3;
  void clear_count();
  static const int kCountFieldNumber = 3;
  ::google::protobuf::uint64 count() const;
  void set_count(::google::protobuf::uint64 value);

  // int32 value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cudaMemsetAsyncQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr stream_;
  ::google::protobuf::uint64 ptr_;
  ::google::protobuf::uint64 count_;
  ::google::protobuf::int32 value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AsyncResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.AsyncResponse) */ {
 public:
  AsyncResponse();
  virtual ~AsyncResponse();

  AsyncResponse(const AsyncResponse& from);

  inline AsyncResponse& operator=(const AsyncResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AsyncResponse(AsyncResponse&& from) noexcept
    : AsyncResponse() {
    *this = ::std::move(from);
  }

  inline AsyncResponse& operator=(AsyncResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AsyncResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AsyncResponse* internal_default_instance() {
    return reinterpret_cast<const AsyncResponse*>(
               &_AsyncResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(AsyncResponse* other);
  friend void swap(AsyncResponse& a, AsyncResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AsyncResponse* New() const final {
    return CreateMaybeMessage<AsyncResponse>(NULL);
  }

  AsyncResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AsyncResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AsyncResponse& from);
  void MergeFrom(const AsyncResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AsyncResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cudarpc.cudaMemcpyAsyncResponse responses = 2;
  int responses_size() const;
  void clear_responses();
  static const int kResponsesFieldNumber = 2;
  ::cudarpc::cudaMemcpyAsyncResponse* mutable_responses(int index);
  ::google::protobuf::RepeatedPtrField< ::cudarpc::cudaMemcpyAsyncResponse >*
      mutable_responses();
  const ::cudarpc::cudaMemcpyAsyncResponse& responses(int index) const;
  ::cudarpc::cudaMemcpyAsyncResponse* add_responses();
  const ::google::protobuf::RepeatedPtrField< ::cudarpc::cudaMemcpyAsyncResponse >&
      responses() const;

  // int32 error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.AsyncResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::cudarpc::cudaMemcpyAsyncResponse > responses_;
  ::google::protobuf::int32 error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cudaStreamCreateWithFlagsQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cudaStreamCreateWithFlagsQuery) */ {
 public:
  cudaStreamCreateWithFlagsQuery();
  virtual ~cudaStreamCreateWithFlagsQuery();

  cudaStreamCreateWithFlagsQuery(const cudaStreamCreateWithFlagsQuery& from);

  inline cudaStreamCreateWithFlagsQuery& operator=(const cudaStreamCreateWithFlagsQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cudaStreamCreateWithFlagsQuery(cudaStreamCreateWithFlagsQuery&& from) noexcept
    : cudaStreamCreateWithFlagsQuery() {
    *this = ::std::move(from);
  }

  inline cudaStreamCreateWithFlagsQuery& operator=(cudaStreamCreateWithFlagsQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cudaStreamCreateWithFlagsQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cudaStreamCreateWithFlagsQuery* internal_default_instance() {
    return reinterpret_cast<const cudaStreamCreateWithFlagsQuery*>(
               &_cudaStreamCreateWithFlagsQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(cudaStreamCreateWithFlagsQuery* other);
  friend void swap(cudaStreamCreateWithFlagsQuery& a, cudaStreamCreateWithFlagsQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cudaStreamCreateWithFlagsQuery* New() const final {
    return CreateMaybeMessage<cudaStreamCreateWithFlagsQuery>(NULL);
  }

  cudaStreamCreateWithFlagsQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cudaStreamCreateWithFlagsQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cudaStreamCreateWithFlagsQuery& from);
  void MergeFrom(const cudaStreamCreateWithFlagsQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cudaStreamCreateWithFlagsQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 flags = 1;
  void clear_flags();
  static const int kFlagsFieldNumber = 1;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cudaStreamCreateWithFlagsQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 flags_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cudaStreamCreateWithPriorityQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cudaStreamCreateWithPriorityQuery) */ {
 public:
  cudaStreamCreateWithPriorityQuery();
  virtual ~cudaStreamCreateWithPriorityQuery();

  cudaStreamCreateWithPriorityQuery(const cudaStreamCreateWithPriorityQuery& from);

  inline cudaStreamCreateWithPriorityQuery& operator=(const cudaStreamCreateWithPriorityQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cudaStreamCreateWithPriorityQuery(cudaStreamCreateWithPriorityQuery&& from) noexcept
    : cudaStreamCreateWithPriorityQuery() {
    *this = ::std::move(from);
  }

  inline cudaStreamCreateWithPriorityQuery& operator=(cudaStreamCreateWithPriorityQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cudaStreamCreateWithPriorityQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cudaStreamCreateWithPriorityQuery* internal_default_instance() {
    return reinterpret_cast<const cudaStreamCreateWithPriorityQuery*>(
               &_cudaStreamCreateWithPriorityQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(cudaStreamCreateWithPriorityQuery* other);
  friend void swap(cudaStreamCreateWithPriorityQuery& a, cudaStreamCreateWithPriorityQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cudaStreamCreateWithPriorityQuery* New() const final {
    return CreateMaybeMessage<cudaStreamCreateWithPriorityQuery>(NULL);
  }

  cudaStreamCreateWithPriorityQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cudaStreamCreateWithPriorityQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cudaStreamCreateWithPriorityQuery& from);
  void MergeFrom(const cudaStreamCreateWithPriorityQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cudaStreamCreateWithPriorityQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 flags = 1;
  void clear_flags();
  static const int kFlagsFieldNumber = 1;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // int32 priority = 2;
  void clear_priority();
  static const int kPriorityFieldNumber = 2;
  ::google::protobuf::int32 priority() const;
  void set_priority(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cudaStreamCreateWithPriorityQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::int32 priority_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cudaStreamCreateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cudaStreamCreateResponse) */ {
 public:
  cudaStreamCreateResponse();
  virtual ~cudaStreamCreateResponse();

  cudaStreamCreateResponse(const cudaStreamCreateResponse& from);

  inline cudaStreamCreateResponse& operator=(const cudaStreamCreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cudaStreamCreateResponse(cudaStreamCreateResponse&& from) noexcept
    : cudaStreamCreateResponse() {
    *this = ::std::move(from);
  }

  inline cudaStreamCreateResponse& operator=(cudaStreamCreateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cudaStreamCreateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cudaStreamCreateResponse* internal_default_instance() {
    return reinterpret_cast<const cudaStreamCreateResponse*>(
               &_cudaStreamCreateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void Swap(cudaStreamCreateResponse* other);
  friend void swap(cudaStreamCreateResponse& a, cudaStreamCreateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cudaStreamCreateResponse* New() const final {
    return CreateMaybeMessage<cudaStreamCreateResponse>(NULL);
  }

  cudaStreamCreateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cudaStreamCreateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cudaStreamCreateResponse& from);
  void MergeFrom(const cudaStreamCreateResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cudaStreamCreateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes stream = 2;
  void clear_stream();
  static const int kStreamFieldNumber = 2;
  const ::std::string& stream() const;
  void set_stream(const ::std::string& value);
  #if LANG_CXX11
  void set_stream(::std::string&& value);
  #endif
  void set_stream(const char* value);
  void set_stream(const void* value, size_t size);
  ::std::string* mutable_stream();
  ::std::string* release_stream();
  void set_allocated_stream(::std::string* stream);

  // int32 error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cudaStreamCreateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr stream_;
  ::google::protobuf::int32 error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cudaStreamIsCapturingResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cudaStreamIsCapturingResponse) */ {
 public:
  cudaStreamIsCapturingResponse();
  virtual ~cudaStreamIsCapturingResponse();

  cudaStreamIsCapturingResponse(const cudaStreamIsCapturingResponse& from);

  inline cudaStreamIsCapturingResponse& operator=(const cudaStreamIsCapturingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cudaStreamIsCapturingResponse(cudaStreamIsCapturingResponse&& from) noexcept
    : cudaStreamIsCapturingResponse() {
    *this = ::std::move(from);
  }

  inline cudaStreamIsCapturingResponse& operator=(cudaStreamIsCapturingResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cudaStreamIsCapturingResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cudaStreamIsCapturingResponse* internal_default_instance() {
    return reinterpret_cast<const cudaStreamIsCapturingResponse*>(
               &_cudaStreamIsCapturingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  void Swap(cudaStreamIsCapturingResponse* other);
  friend void swap(cudaStreamIsCapturingResponse& a, cudaStreamIsCapturingResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cudaStreamIsCapturingResponse* New() const final {
    return CreateMaybeMessage<cudaStreamIsCapturingResponse>(NULL);
  }

  cudaStreamIsCapturingResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cudaStreamIsCapturingResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cudaStreamIsCapturingResponse& from);
  void MergeFrom(const cudaStreamIsCapturingResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cudaStreamIsCapturingResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // int32 status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cudaStreamIsCapturingResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 error_;
  ::google::protobuf::int32 status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cudaStreamGetCaptureInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cudaStreamGetCaptureInfoResponse) */ {
 public:
  cudaStreamGetCaptureInfoResponse();
  virtual ~cudaStreamGetCaptureInfoResponse();

  cudaStreamGetCaptureInfoResponse(const cudaStreamGetCaptureInfoResponse& from);

  inline cudaStreamGetCaptureInfoResponse& operator=(const cudaStreamGetCaptureInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cudaStreamGetCaptureInfoResponse(cudaStreamGetCaptureInfoResponse&& from) noexcept
    : cudaStreamGetCaptureInfoResponse() {
    *this = ::std::move(from);
  }

  inline cudaStreamGetCaptureInfoResponse& operator=(cudaStreamGetCaptureInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cudaStreamGetCaptureInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cudaStreamGetCaptureInfoResponse* internal_default_instance() {
    return reinterpret_cast<const cudaStreamGetCaptureInfoResponse*>(
               &_cudaStreamGetCaptureInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  void Swap(cudaStreamGetCaptureInfoResponse* other);
  friend void swap(cudaStreamGetCaptureInfoResponse& a, cudaStreamGetCaptureInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cudaStreamGetCaptureInfoResponse* New() const final {
    return CreateMaybeMessage<cudaStreamGetCaptureInfoResponse>(NULL);
  }

  cudaStreamGetCaptureInfoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cudaStreamGetCaptureInfoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cudaStreamGetCaptureInfoResponse& from);
  void MergeFrom(const cudaStreamGetCaptureInfoResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cudaStreamGetCaptureInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // int32 status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // uint64 pid = 3;
  void clear_pid();
  static const int kPidFieldNumber = 3;
  ::google::protobuf::uint64 pid() const;
  void set_pid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cudaStreamGetCaptureInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 error_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::uint64 pid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cudaEventCreateWithFlagsQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cudaEventCreateWithFlagsQuery) */ {
 public:
  cudaEventCreateWithFlagsQuery();
  virtual ~cudaEventCreateWithFlagsQuery();

  cudaEventCreateWithFlagsQuery(const cudaEventCreateWithFlagsQuery& from);

  inline cudaEventCreateWithFlagsQuery& operator=(const cudaEventCreateWithFlagsQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cudaEventCreateWithFlagsQuery(cudaEventCreateWithFlagsQuery&& from) noexcept
    : cudaEventCreateWithFlagsQuery() {
    *this = ::std::move(from);
  }

  inline cudaEventCreateWithFlagsQuery& operator=(cudaEventCreateWithFlagsQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cudaEventCreateWithFlagsQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cudaEventCreateWithFlagsQuery* internal_default_instance() {
    return reinterpret_cast<const cudaEventCreateWithFlagsQuery*>(
               &_cudaEventCreateWithFlagsQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  void Swap(cudaEventCreateWithFlagsQuery* other);
  friend void swap(cudaEventCreateWithFlagsQuery& a, cudaEventCreateWithFlagsQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cudaEventCreateWithFlagsQuery* New() const final {
    return CreateMaybeMessage<cudaEventCreateWithFlagsQuery>(NULL);
  }

  cudaEventCreateWithFlagsQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cudaEventCreateWithFlagsQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cudaEventCreateWithFlagsQuery& from);
  void MergeFrom(const cudaEventCreateWithFlagsQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cudaEventCreateWithFlagsQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 flags = 1;
  void clear_flags();
  static const int kFlagsFieldNumber = 1;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cudaEventCreateWithFlagsQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 flags_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cudaEventCreateWithFlagsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cudaEventCreateWithFlagsResponse) */ {
 public:
  cudaEventCreateWithFlagsResponse();
  virtual ~cudaEventCreateWithFlagsResponse();

  cudaEventCreateWithFlagsResponse(const cudaEventCreateWithFlagsResponse& from);

  inline cudaEventCreateWithFlagsResponse& operator=(const cudaEventCreateWithFlagsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cudaEventCreateWithFlagsResponse(cudaEventCreateWithFlagsResponse&& from) noexcept
    : cudaEventCreateWithFlagsResponse() {
    *this = ::std::move(from);
  }

  inline cudaEventCreateWithFlagsResponse& operator=(cudaEventCreateWithFlagsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cudaEventCreateWithFlagsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cudaEventCreateWithFlagsResponse* internal_default_instance() {
    return reinterpret_cast<const cudaEventCreateWithFlagsResponse*>(
               &_cudaEventCreateWithFlagsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  void Swap(cudaEventCreateWithFlagsResponse* other);
  friend void swap(cudaEventCreateWithFlagsResponse& a, cudaEventCreateWithFlagsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cudaEventCreateWithFlagsResponse* New() const final {
    return CreateMaybeMessage<cudaEventCreateWithFlagsResponse>(NULL);
  }

  cudaEventCreateWithFlagsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cudaEventCreateWithFlagsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cudaEventCreateWithFlagsResponse& from);
  void MergeFrom(const cudaEventCreateWithFlagsResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cudaEventCreateWithFlagsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes event = 2;
  void clear_event();
  static const int kEventFieldNumber = 2;
  const ::std::string& event() const;
  void set_event(const ::std::string& value);
  #if LANG_CXX11
  void set_event(::std::string&& value);
  #endif
  void set_event(const char* value);
  void set_event(const void* value, size_t size);
  ::std::string* mutable_event();
  ::std::string* release_event();
  void set_allocated_event(::std::string* event);

  // int32 error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cudaEventCreateWithFlagsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr event_;
  ::google::protobuf::int32 error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cudaEventRecordQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cudaEventRecordQuery) */ {
 public:
  cudaEventRecordQuery();
  virtual ~cudaEventRecordQuery();

  cudaEventRecordQuery(const cudaEventRecordQuery& from);

  inline cudaEventRecordQuery& operator=(const cudaEventRecordQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cudaEventRecordQuery(cudaEventRecordQuery&& from) noexcept
    : cudaEventRecordQuery() {
    *this = ::std::move(from);
  }

  inline cudaEventRecordQuery& operator=(cudaEventRecordQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cudaEventRecordQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cudaEventRecordQuery* internal_default_instance() {
    return reinterpret_cast<const cudaEventRecordQuery*>(
               &_cudaEventRecordQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  void Swap(cudaEventRecordQuery* other);
  friend void swap(cudaEventRecordQuery& a, cudaEventRecordQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cudaEventRecordQuery* New() const final {
    return CreateMaybeMessage<cudaEventRecordQuery>(NULL);
  }

  cudaEventRecordQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cudaEventRecordQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cudaEventRecordQuery& from);
  void MergeFrom(const cudaEventRecordQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cudaEventRecordQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes event = 1;
  void clear_event();
  static const int kEventFieldNumber = 1;
  const ::std::string& event() const;
  void set_event(const ::std::string& value);
  #if LANG_CXX11
  void set_event(::std::string&& value);
  #endif
  void set_event(const char* value);
  void set_event(const void* value, size_t size);
  ::std::string* mutable_event();
  ::std::string* release_event();
  void set_allocated_event(::std::string* event);

  // bytes stream = 2;
  void clear_stream();
  static const int kStreamFieldNumber = 2;
  const ::std::string& stream() const;
  void set_stream(const ::std::string& value);
  #if LANG_CXX11
  void set_stream(::std::string&& value);
  #endif
  void set_stream(const char* value);
  void set_stream(const void* value, size_t size);
  ::std::string* mutable_stream();
  ::std::string* release_stream();
  void set_allocated_stream(::std::string* stream);

  // @@protoc_insertion_point(class_scope:cudarpc.cudaEventRecordQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr event_;
  ::google::protobuf::internal::ArenaStringPtr stream_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cudaLaunchKernelQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cudarpc.cudaLaunchKernelQuery) */ {
 public:
  cudaLaunchKernelQuery();
  virtual ~cudaLaunchKernelQuery();

  cudaLaunchKernelQuery(const cudaLaunchKernelQuery& from);

  inline cudaLaunchKernelQuery& operator=(const cudaLaunchKernelQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cudaLaunchKernelQuery(cudaLaunchKernelQuery&& from) noexcept
    : cudaLaunchKernelQuery() {
    *this = ::std::move(from);
  }

  inline cudaLaunchKernelQuery& operator=(cudaLaunchKernelQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cudaLaunchKernelQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cudaLaunchKernelQuery* internal_default_instance() {
    return reinterpret_cast<const cudaLaunchKernelQuery*>(
               &_cudaLaunchKernelQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  void Swap(cudaLaunchKernelQuery* other);
  friend void swap(cudaLaunchKernelQuery& a, cudaLaunchKernelQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cudaLaunchKernelQuery* New() const final {
    return CreateMaybeMessage<cudaLaunchKernelQuery>(NULL);
  }

  cudaLaunchKernelQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cudaLaunchKernelQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cudaLaunchKernelQuery& from);
  void MergeFrom(const cudaLaunchKernelQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cudaLaunchKernelQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes args = 8;
  int args_size() const;
  void clear_args();
  static const int kArgsFieldNumber = 8;
  const ::std::string& args(int index) const;
  ::std::string* mutable_args(int index);
  void set_args(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_args(int index, ::std::string&& value);
  #endif
  void set_args(int index, const char* value);
  void set_args(int index, const void* value, size_t size);
  ::std::string* add_args();
  void add_args(const ::std::string& value);
  #if LANG_CXX11
  void add_args(::std::string&& value);
  #endif
  void add_args(const char* value);
  void add_args(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& args() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_args();

  // string function = 1;
  void clear_function();
  static const int kFunctionFieldNumber = 1;
  const ::std::string& function() const;
  void set_function(const ::std::string& value);
  #if LANG_CXX11
  void set_function(::std::string&& value);
  #endif
  void set_function(const char* value);
  void set_function(const char* value, size_t size);
  ::std::string* mutable_function();
  ::std::string* release_function();
  void set_allocated_function(::std::string* function);

  // bytes stream = 10;
  void clear_stream();
  static const int kStreamFieldNumber = 10;
  const ::std::string& stream() const;
  void set_stream(const ::std::string& value);
  #if LANG_CXX11
  void set_stream(::std::string&& value);
  #endif
  void set_stream(const char* value);
  void set_stream(const void* value, size_t size);
  ::std::string* mutable_stream();
  ::std::string* release_stream();
  void set_allocated_stream(::std::string* stream);

  // uint32 grid_dim_x = 2;
  void clear_grid_dim_x();
  static const int kGridDimXFieldNumber = 2;
  ::google::protobuf::uint32 grid_dim_x() const;
  void set_grid_dim_x(::google::protobuf::uint32 value);

  // uint32 grid_dim_y = 3;
  void clear_grid_dim_y();
  static const int kGridDimYFieldNumber = 3;
  ::google::protobuf::uint32 grid_dim_y() const;
  void set_grid_dim_y(::google::protobuf::uint32 value);

  // uint32 grid_dim_z = 4;
  void clear_grid_dim_z();
  static const int kGridDimZFieldNumber = 4;
  ::google::protobuf::uint32 grid_dim_z() const;
  void set_grid_dim_z(::google::protobuf::uint32 value);

  // uint32 block_dim_x = 5;
  void clear_block_dim_x();
  static const int kBlockDimXFieldNumber = 5;
  ::google::protobuf::uint32 block_dim_x() const;
  void set_block_dim_x(::google::protobuf::uint32 value);

  // uint32 block_dim_y = 6;
  void clear_block_dim_y();
  static const int kBlockDimYFieldNumber = 6;
  ::google::protobuf::uint32 block_dim_y() const;
  void set_block_dim_y(::google::protobuf::uint32 value);

  // uint32 block_dim_z = 7;
  void clear_block_dim_z();
  static const int kBlockDimZFieldNumber = 7;
  ::google::protobuf::uint32 block_dim_z() const;
  void set_block_dim_z(::google::protobuf::uint32 value);

  // uint64 shared_mem = 9;
  void clear_shared_mem();
  static const int kSharedMemFieldNumber = 9;
  ::google::protobuf::uint64 shared_mem() const;
  void set_shared_mem(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:cudarpc.cudaLaunchKernelQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> args_;
  ::google::protobuf::internal::ArenaStringPtr function_;
  ::google::protobuf::internal::ArenaStringPtr stream_;
  ::google::protobuf::uint32 grid_dim_x_;
  ::google::protobuf::uint32 grid_dim_y_;
  ::google::protobuf::uint32 grid_dim_z_;
  ::google::protobuf::uint32 block_dim_x_;
  ::google::protobuf::uint32 block_dim_y_;
  ::google::protobuf::uint32 block_dim_z_;
  ::google::protobuf::uint64 shared_mem_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cudarpc_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WapperQuery

// .cudarpc.QueryType type = 1;
inline void WapperQuery::clear_type() {
  type_ = 0;
}
inline ::cudarpc::QueryType WapperQuery::type() const {
  // @@protoc_insertion_point(field_get:cudarpc.WapperQuery.type)
  return static_cast< ::cudarpc::QueryType >(type_);
}
inline void WapperQuery::set_type(::cudarpc::QueryType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.WapperQuery.type)
}

// bytes query = 2;
inline void WapperQuery::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WapperQuery::query() const {
  // @@protoc_insertion_point(field_get:cudarpc.WapperQuery.query)
  return query_.GetNoArena();
}
inline void WapperQuery::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.WapperQuery.query)
}
#if LANG_CXX11
inline void WapperQuery::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.WapperQuery.query)
}
#endif
inline void WapperQuery::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.WapperQuery.query)
}
inline void WapperQuery::set_query(const void* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.WapperQuery.query)
}
inline ::std::string* WapperQuery::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.WapperQuery.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WapperQuery::release_query() {
  // @@protoc_insertion_point(field_release:cudarpc.WapperQuery.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WapperQuery::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.WapperQuery.query)
}

// -------------------------------------------------------------------

// QueryList

// repeated .cudarpc.WapperQuery queries = 1;
inline int QueryList::queries_size() const {
  return queries_.size();
}
inline void QueryList::clear_queries() {
  queries_.Clear();
}
inline ::cudarpc::WapperQuery* QueryList::mutable_queries(int index) {
  // @@protoc_insertion_point(field_mutable:cudarpc.QueryList.queries)
  return queries_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cudarpc::WapperQuery >*
QueryList::mutable_queries() {
  // @@protoc_insertion_point(field_mutable_list:cudarpc.QueryList.queries)
  return &queries_;
}
inline const ::cudarpc::WapperQuery& QueryList::queries(int index) const {
  // @@protoc_insertion_point(field_get:cudarpc.QueryList.queries)
  return queries_.Get(index);
}
inline ::cudarpc::WapperQuery* QueryList::add_queries() {
  // @@protoc_insertion_point(field_add:cudarpc.QueryList.queries)
  return queries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cudarpc::WapperQuery >&
QueryList::queries() const {
  // @@protoc_insertion_point(field_list:cudarpc.QueryList.queries)
  return queries_;
}

// int32 client_id = 3;
inline void QueryList::clear_client_id() {
  client_id_ = 0;
}
inline ::google::protobuf::int32 QueryList::client_id() const {
  // @@protoc_insertion_point(field_get:cudarpc.QueryList.client_id)
  return client_id_;
}
inline void QueryList::set_client_id(::google::protobuf::int32 value) {
  
  client_id_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.QueryList.client_id)
}

// int32 index = 4;
inline void QueryList::clear_index() {
  index_ = 0;
}
inline ::google::protobuf::int32 QueryList::index() const {
  // @@protoc_insertion_point(field_get:cudarpc.QueryList.index)
  return index_;
}
inline void QueryList::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.QueryList.index)
}

// -------------------------------------------------------------------

// genericResponse

// int32 error = 1;
inline void genericResponse::clear_error() {
  error_ = 0;
}
inline ::google::protobuf::int32 genericResponse::error() const {
  // @@protoc_insertion_point(field_get:cudarpc.genericResponse.error)
  return error_;
}
inline void genericResponse::set_error(::google::protobuf::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.genericResponse.error)
}

// -------------------------------------------------------------------

// handleResponse

// int32 error = 1;
inline void handleResponse::clear_error() {
  error_ = 0;
}
inline ::google::protobuf::int32 handleResponse::error() const {
  // @@protoc_insertion_point(field_get:cudarpc.handleResponse.error)
  return error_;
}
inline void handleResponse::set_error(::google::protobuf::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.handleResponse.error)
}

// bytes handle = 2;
inline void handleResponse::clear_handle() {
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& handleResponse::handle() const {
  // @@protoc_insertion_point(field_get:cudarpc.handleResponse.handle)
  return handle_.GetNoArena();
}
inline void handleResponse::set_handle(const ::std::string& value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.handleResponse.handle)
}
#if LANG_CXX11
inline void handleResponse::set_handle(::std::string&& value) {
  
  handle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.handleResponse.handle)
}
#endif
inline void handleResponse::set_handle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.handleResponse.handle)
}
inline void handleResponse::set_handle(const void* value, size_t size) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.handleResponse.handle)
}
inline ::std::string* handleResponse::mutable_handle() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.handleResponse.handle)
  return handle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* handleResponse::release_handle() {
  // @@protoc_insertion_point(field_release:cudarpc.handleResponse.handle)
  
  return handle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void handleResponse::set_allocated_handle(::std::string* handle) {
  if (handle != NULL) {
    
  } else {
    
  }
  handle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handle);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.handleResponse.handle)
}

// -------------------------------------------------------------------

// setStreamQuery

// bytes handle = 1;
inline void setStreamQuery::clear_handle() {
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& setStreamQuery::handle() const {
  // @@protoc_insertion_point(field_get:cudarpc.setStreamQuery.handle)
  return handle_.GetNoArena();
}
inline void setStreamQuery::set_handle(const ::std::string& value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.setStreamQuery.handle)
}
#if LANG_CXX11
inline void setStreamQuery::set_handle(::std::string&& value) {
  
  handle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.setStreamQuery.handle)
}
#endif
inline void setStreamQuery::set_handle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.setStreamQuery.handle)
}
inline void setStreamQuery::set_handle(const void* value, size_t size) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.setStreamQuery.handle)
}
inline ::std::string* setStreamQuery::mutable_handle() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.setStreamQuery.handle)
  return handle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* setStreamQuery::release_handle() {
  // @@protoc_insertion_point(field_release:cudarpc.setStreamQuery.handle)
  
  return handle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void setStreamQuery::set_allocated_handle(::std::string* handle) {
  if (handle != NULL) {
    
  } else {
    
  }
  handle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handle);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.setStreamQuery.handle)
}

// bytes stream = 2;
inline void setStreamQuery::clear_stream() {
  stream_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& setStreamQuery::stream() const {
  // @@protoc_insertion_point(field_get:cudarpc.setStreamQuery.stream)
  return stream_.GetNoArena();
}
inline void setStreamQuery::set_stream(const ::std::string& value) {
  
  stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.setStreamQuery.stream)
}
#if LANG_CXX11
inline void setStreamQuery::set_stream(::std::string&& value) {
  
  stream_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.setStreamQuery.stream)
}
#endif
inline void setStreamQuery::set_stream(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.setStreamQuery.stream)
}
inline void setStreamQuery::set_stream(const void* value, size_t size) {
  
  stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.setStreamQuery.stream)
}
inline ::std::string* setStreamQuery::mutable_stream() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.setStreamQuery.stream)
  return stream_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* setStreamQuery::release_stream() {
  // @@protoc_insertion_point(field_release:cudarpc.setStreamQuery.stream)
  
  return stream_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void setStreamQuery::set_allocated_stream(::std::string* stream) {
  if (stream != NULL) {
    
  } else {
    
  }
  stream_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.setStreamQuery.stream)
}

// -------------------------------------------------------------------

// cublasSetMathModeQuery

// bytes handle = 1;
inline void cublasSetMathModeQuery::clear_handle() {
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cublasSetMathModeQuery::handle() const {
  // @@protoc_insertion_point(field_get:cudarpc.cublasSetMathModeQuery.handle)
  return handle_.GetNoArena();
}
inline void cublasSetMathModeQuery::set_handle(const ::std::string& value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cublasSetMathModeQuery.handle)
}
#if LANG_CXX11
inline void cublasSetMathModeQuery::set_handle(::std::string&& value) {
  
  handle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cublasSetMathModeQuery.handle)
}
#endif
inline void cublasSetMathModeQuery::set_handle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cublasSetMathModeQuery.handle)
}
inline void cublasSetMathModeQuery::set_handle(const void* value, size_t size) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cublasSetMathModeQuery.handle)
}
inline ::std::string* cublasSetMathModeQuery::mutable_handle() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cublasSetMathModeQuery.handle)
  return handle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cublasSetMathModeQuery::release_handle() {
  // @@protoc_insertion_point(field_release:cudarpc.cublasSetMathModeQuery.handle)
  
  return handle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cublasSetMathModeQuery::set_allocated_handle(::std::string* handle) {
  if (handle != NULL) {
    
  } else {
    
  }
  handle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handle);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cublasSetMathModeQuery.handle)
}

// int32 mode = 2;
inline void cublasSetMathModeQuery::clear_mode() {
  mode_ = 0;
}
inline ::google::protobuf::int32 cublasSetMathModeQuery::mode() const {
  // @@protoc_insertion_point(field_get:cudarpc.cublasSetMathModeQuery.mode)
  return mode_;
}
inline void cublasSetMathModeQuery::set_mode(::google::protobuf::int32 value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cublasSetMathModeQuery.mode)
}

// -------------------------------------------------------------------

// cublasGetMathModeResponse

// int32 error = 1;
inline void cublasGetMathModeResponse::clear_error() {
  error_ = 0;
}
inline ::google::protobuf::int32 cublasGetMathModeResponse::error() const {
  // @@protoc_insertion_point(field_get:cudarpc.cublasGetMathModeResponse.error)
  return error_;
}
inline void cublasGetMathModeResponse::set_error(::google::protobuf::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cublasGetMathModeResponse.error)
}

// int32 mode = 2;
inline void cublasGetMathModeResponse::clear_mode() {
  mode_ = 0;
}
inline ::google::protobuf::int32 cublasGetMathModeResponse::mode() const {
  // @@protoc_insertion_point(field_get:cudarpc.cublasGetMathModeResponse.mode)
  return mode_;
}
inline void cublasGetMathModeResponse::set_mode(::google::protobuf::int32 value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cublasGetMathModeResponse.mode)
}

// -------------------------------------------------------------------

// cublasSgemmQuery

// bytes handle = 1;
inline void cublasSgemmQuery::clear_handle() {
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cublasSgemmQuery::handle() const {
  // @@protoc_insertion_point(field_get:cudarpc.cublasSgemmQuery.handle)
  return handle_.GetNoArena();
}
inline void cublasSgemmQuery::set_handle(const ::std::string& value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cublasSgemmQuery.handle)
}
#if LANG_CXX11
inline void cublasSgemmQuery::set_handle(::std::string&& value) {
  
  handle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cublasSgemmQuery.handle)
}
#endif
inline void cublasSgemmQuery::set_handle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cublasSgemmQuery.handle)
}
inline void cublasSgemmQuery::set_handle(const void* value, size_t size) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cublasSgemmQuery.handle)
}
inline ::std::string* cublasSgemmQuery::mutable_handle() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cublasSgemmQuery.handle)
  return handle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cublasSgemmQuery::release_handle() {
  // @@protoc_insertion_point(field_release:cudarpc.cublasSgemmQuery.handle)
  
  return handle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cublasSgemmQuery::set_allocated_handle(::std::string* handle) {
  if (handle != NULL) {
    
  } else {
    
  }
  handle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handle);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cublasSgemmQuery.handle)
}

// int32 transa = 2;
inline void cublasSgemmQuery::clear_transa() {
  transa_ = 0;
}
inline ::google::protobuf::int32 cublasSgemmQuery::transa() const {
  // @@protoc_insertion_point(field_get:cudarpc.cublasSgemmQuery.transa)
  return transa_;
}
inline void cublasSgemmQuery::set_transa(::google::protobuf::int32 value) {
  
  transa_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cublasSgemmQuery.transa)
}

// int32 transb = 3;
inline void cublasSgemmQuery::clear_transb() {
  transb_ = 0;
}
inline ::google::protobuf::int32 cublasSgemmQuery::transb() const {
  // @@protoc_insertion_point(field_get:cudarpc.cublasSgemmQuery.transb)
  return transb_;
}
inline void cublasSgemmQuery::set_transb(::google::protobuf::int32 value) {
  
  transb_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cublasSgemmQuery.transb)
}

// int32 m = 4;
inline void cublasSgemmQuery::clear_m() {
  m_ = 0;
}
inline ::google::protobuf::int32 cublasSgemmQuery::m() const {
  // @@protoc_insertion_point(field_get:cudarpc.cublasSgemmQuery.m)
  return m_;
}
inline void cublasSgemmQuery::set_m(::google::protobuf::int32 value) {
  
  m_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cublasSgemmQuery.m)
}

// int32 n = 5;
inline void cublasSgemmQuery::clear_n() {
  n_ = 0;
}
inline ::google::protobuf::int32 cublasSgemmQuery::n() const {
  // @@protoc_insertion_point(field_get:cudarpc.cublasSgemmQuery.n)
  return n_;
}
inline void cublasSgemmQuery::set_n(::google::protobuf::int32 value) {
  
  n_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cublasSgemmQuery.n)
}

// int32 k = 6;
inline void cublasSgemmQuery::clear_k() {
  k_ = 0;
}
inline ::google::protobuf::int32 cublasSgemmQuery::k() const {
  // @@protoc_insertion_point(field_get:cudarpc.cublasSgemmQuery.k)
  return k_;
}
inline void cublasSgemmQuery::set_k(::google::protobuf::int32 value) {
  
  k_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cublasSgemmQuery.k)
}

// float alpha = 7;
inline void cublasSgemmQuery::clear_alpha() {
  alpha_ = 0;
}
inline float cublasSgemmQuery::alpha() const {
  // @@protoc_insertion_point(field_get:cudarpc.cublasSgemmQuery.alpha)
  return alpha_;
}
inline void cublasSgemmQuery::set_alpha(float value) {
  
  alpha_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cublasSgemmQuery.alpha)
}

// uint64 matrix_a = 8;
inline void cublasSgemmQuery::clear_matrix_a() {
  matrix_a_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 cublasSgemmQuery::matrix_a() const {
  // @@protoc_insertion_point(field_get:cudarpc.cublasSgemmQuery.matrix_a)
  return matrix_a_;
}
inline void cublasSgemmQuery::set_matrix_a(::google::protobuf::uint64 value) {
  
  matrix_a_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cublasSgemmQuery.matrix_a)
}

// int32 lda = 9;
inline void cublasSgemmQuery::clear_lda() {
  lda_ = 0;
}
inline ::google::protobuf::int32 cublasSgemmQuery::lda() const {
  // @@protoc_insertion_point(field_get:cudarpc.cublasSgemmQuery.lda)
  return lda_;
}
inline void cublasSgemmQuery::set_lda(::google::protobuf::int32 value) {
  
  lda_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cublasSgemmQuery.lda)
}

// uint64 matrix_b = 10;
inline void cublasSgemmQuery::clear_matrix_b() {
  matrix_b_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 cublasSgemmQuery::matrix_b() const {
  // @@protoc_insertion_point(field_get:cudarpc.cublasSgemmQuery.matrix_b)
  return matrix_b_;
}
inline void cublasSgemmQuery::set_matrix_b(::google::protobuf::uint64 value) {
  
  matrix_b_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cublasSgemmQuery.matrix_b)
}

// int32 ldb = 11;
inline void cublasSgemmQuery::clear_ldb() {
  ldb_ = 0;
}
inline ::google::protobuf::int32 cublasSgemmQuery::ldb() const {
  // @@protoc_insertion_point(field_get:cudarpc.cublasSgemmQuery.ldb)
  return ldb_;
}
inline void cublasSgemmQuery::set_ldb(::google::protobuf::int32 value) {
  
  ldb_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cublasSgemmQuery.ldb)
}

// float beta = 12;
inline void cublasSgemmQuery::clear_beta() {
  beta_ = 0;
}
inline float cublasSgemmQuery::beta() const {
  // @@protoc_insertion_point(field_get:cudarpc.cublasSgemmQuery.beta)
  return beta_;
}
inline void cublasSgemmQuery::set_beta(float value) {
  
  beta_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cublasSgemmQuery.beta)
}

// uint64 matrix_c = 13;
inline void cublasSgemmQuery::clear_matrix_c() {
  matrix_c_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 cublasSgemmQuery::matrix_c() const {
  // @@protoc_insertion_point(field_get:cudarpc.cublasSgemmQuery.matrix_c)
  return matrix_c_;
}
inline void cublasSgemmQuery::set_matrix_c(::google::protobuf::uint64 value) {
  
  matrix_c_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cublasSgemmQuery.matrix_c)
}

// int32 ldc = 14;
inline void cublasSgemmQuery::clear_ldc() {
  ldc_ = 0;
}
inline ::google::protobuf::int32 cublasSgemmQuery::ldc() const {
  // @@protoc_insertion_point(field_get:cudarpc.cublasSgemmQuery.ldc)
  return ldc_;
}
inline void cublasSgemmQuery::set_ldc(::google::protobuf::int32 value) {
  
  ldc_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cublasSgemmQuery.ldc)
}

// -------------------------------------------------------------------

// cublasSgemmStridedBatchedQuery

// bytes handle = 1;
inline void cublasSgemmStridedBatchedQuery::clear_handle() {
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cublasSgemmStridedBatchedQuery::handle() const {
  // @@protoc_insertion_point(field_get:cudarpc.cublasSgemmStridedBatchedQuery.handle)
  return handle_.GetNoArena();
}
inline void cublasSgemmStridedBatchedQuery::set_handle(const ::std::string& value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cublasSgemmStridedBatchedQuery.handle)
}
#if LANG_CXX11
inline void cublasSgemmStridedBatchedQuery::set_handle(::std::string&& value) {
  
  handle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cublasSgemmStridedBatchedQuery.handle)
}
#endif
inline void cublasSgemmStridedBatchedQuery::set_handle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cublasSgemmStridedBatchedQuery.handle)
}
inline void cublasSgemmStridedBatchedQuery::set_handle(const void* value, size_t size) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cublasSgemmStridedBatchedQuery.handle)
}
inline ::std::string* cublasSgemmStridedBatchedQuery::mutable_handle() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cublasSgemmStridedBatchedQuery.handle)
  return handle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cublasSgemmStridedBatchedQuery::release_handle() {
  // @@protoc_insertion_point(field_release:cudarpc.cublasSgemmStridedBatchedQuery.handle)
  
  return handle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cublasSgemmStridedBatchedQuery::set_allocated_handle(::std::string* handle) {
  if (handle != NULL) {
    
  } else {
    
  }
  handle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handle);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cublasSgemmStridedBatchedQuery.handle)
}

// int32 transa = 2;
inline void cublasSgemmStridedBatchedQuery::clear_transa() {
  transa_ = 0;
}
inline ::google::protobuf::int32 cublasSgemmStridedBatchedQuery::transa() const {
  // @@protoc_insertion_point(field_get:cudarpc.cublasSgemmStridedBatchedQuery.transa)
  return transa_;
}
inline void cublasSgemmStridedBatchedQuery::set_transa(::google::protobuf::int32 value) {
  
  transa_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cublasSgemmStridedBatchedQuery.transa)
}

// int32 transb = 3;
inline void cublasSgemmStridedBatchedQuery::clear_transb() {
  transb_ = 0;
}
inline ::google::protobuf::int32 cublasSgemmStridedBatchedQuery::transb() const {
  // @@protoc_insertion_point(field_get:cudarpc.cublasSgemmStridedBatchedQuery.transb)
  return transb_;
}
inline void cublasSgemmStridedBatchedQuery::set_transb(::google::protobuf::int32 value) {
  
  transb_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cublasSgemmStridedBatchedQuery.transb)
}

// int32 m = 4;
inline void cublasSgemmStridedBatchedQuery::clear_m() {
  m_ = 0;
}
inline ::google::protobuf::int32 cublasSgemmStridedBatchedQuery::m() const {
  // @@protoc_insertion_point(field_get:cudarpc.cublasSgemmStridedBatchedQuery.m)
  return m_;
}
inline void cublasSgemmStridedBatchedQuery::set_m(::google::protobuf::int32 value) {
  
  m_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cublasSgemmStridedBatchedQuery.m)
}

// int32 n = 5;
inline void cublasSgemmStridedBatchedQuery::clear_n() {
  n_ = 0;
}
inline ::google::protobuf::int32 cublasSgemmStridedBatchedQuery::n() const {
  // @@protoc_insertion_point(field_get:cudarpc.cublasSgemmStridedBatchedQuery.n)
  return n_;
}
inline void cublasSgemmStridedBatchedQuery::set_n(::google::protobuf::int32 value) {
  
  n_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cublasSgemmStridedBatchedQuery.n)
}

// int32 k = 6;
inline void cublasSgemmStridedBatchedQuery::clear_k() {
  k_ = 0;
}
inline ::google::protobuf::int32 cublasSgemmStridedBatchedQuery::k() const {
  // @@protoc_insertion_point(field_get:cudarpc.cublasSgemmStridedBatchedQuery.k)
  return k_;
}
inline void cublasSgemmStridedBatchedQuery::set_k(::google::protobuf::int32 value) {
  
  k_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cublasSgemmStridedBatchedQuery.k)
}

// float alpha = 7;
inline void cublasSgemmStridedBatchedQuery::clear_alpha() {
  alpha_ = 0;
}
inline float cublasSgemmStridedBatchedQuery::alpha() const {
  // @@protoc_insertion_point(field_get:cudarpc.cublasSgemmStridedBatchedQuery.alpha)
  return alpha_;
}
inline void cublasSgemmStridedBatchedQuery::set_alpha(float value) {
  
  alpha_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cublasSgemmStridedBatchedQuery.alpha)
}

// uint64 matrix_a = 8;
inline void cublasSgemmStridedBatchedQuery::clear_matrix_a() {
  matrix_a_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 cublasSgemmStridedBatchedQuery::matrix_a() const {
  // @@protoc_insertion_point(field_get:cudarpc.cublasSgemmStridedBatchedQuery.matrix_a)
  return matrix_a_;
}
inline void cublasSgemmStridedBatchedQuery::set_matrix_a(::google::protobuf::uint64 value) {
  
  matrix_a_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cublasSgemmStridedBatchedQuery.matrix_a)
}

// int32 lda = 9;
inline void cublasSgemmStridedBatchedQuery::clear_lda() {
  lda_ = 0;
}
inline ::google::protobuf::int32 cublasSgemmStridedBatchedQuery::lda() const {
  // @@protoc_insertion_point(field_get:cudarpc.cublasSgemmStridedBatchedQuery.lda)
  return lda_;
}
inline void cublasSgemmStridedBatchedQuery::set_lda(::google::protobuf::int32 value) {
  
  lda_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cublasSgemmStridedBatchedQuery.lda)
}

// uint64 matrix_b = 10;
inline void cublasSgemmStridedBatchedQuery::clear_matrix_b() {
  matrix_b_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 cublasSgemmStridedBatchedQuery::matrix_b() const {
  // @@protoc_insertion_point(field_get:cudarpc.cublasSgemmStridedBatchedQuery.matrix_b)
  return matrix_b_;
}
inline void cublasSgemmStridedBatchedQuery::set_matrix_b(::google::protobuf::uint64 value) {
  
  matrix_b_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cublasSgemmStridedBatchedQuery.matrix_b)
}

// int32 ldb = 11;
inline void cublasSgemmStridedBatchedQuery::clear_ldb() {
  ldb_ = 0;
}
inline ::google::protobuf::int32 cublasSgemmStridedBatchedQuery::ldb() const {
  // @@protoc_insertion_point(field_get:cudarpc.cublasSgemmStridedBatchedQuery.ldb)
  return ldb_;
}
inline void cublasSgemmStridedBatchedQuery::set_ldb(::google::protobuf::int32 value) {
  
  ldb_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cublasSgemmStridedBatchedQuery.ldb)
}

// float beta = 12;
inline void cublasSgemmStridedBatchedQuery::clear_beta() {
  beta_ = 0;
}
inline float cublasSgemmStridedBatchedQuery::beta() const {
  // @@protoc_insertion_point(field_get:cudarpc.cublasSgemmStridedBatchedQuery.beta)
  return beta_;
}
inline void cublasSgemmStridedBatchedQuery::set_beta(float value) {
  
  beta_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cublasSgemmStridedBatchedQuery.beta)
}

// uint64 matrix_c = 13;
inline void cublasSgemmStridedBatchedQuery::clear_matrix_c() {
  matrix_c_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 cublasSgemmStridedBatchedQuery::matrix_c() const {
  // @@protoc_insertion_point(field_get:cudarpc.cublasSgemmStridedBatchedQuery.matrix_c)
  return matrix_c_;
}
inline void cublasSgemmStridedBatchedQuery::set_matrix_c(::google::protobuf::uint64 value) {
  
  matrix_c_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cublasSgemmStridedBatchedQuery.matrix_c)
}

// int32 ldc = 14;
inline void cublasSgemmStridedBatchedQuery::clear_ldc() {
  ldc_ = 0;
}
inline ::google::protobuf::int32 cublasSgemmStridedBatchedQuery::ldc() const {
  // @@protoc_insertion_point(field_get:cudarpc.cublasSgemmStridedBatchedQuery.ldc)
  return ldc_;
}
inline void cublasSgemmStridedBatchedQuery::set_ldc(::google::protobuf::int32 value) {
  
  ldc_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cublasSgemmStridedBatchedQuery.ldc)
}

// int64 stride_a = 15;
inline void cublasSgemmStridedBatchedQuery::clear_stride_a() {
  stride_a_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 cublasSgemmStridedBatchedQuery::stride_a() const {
  // @@protoc_insertion_point(field_get:cudarpc.cublasSgemmStridedBatchedQuery.stride_a)
  return stride_a_;
}
inline void cublasSgemmStridedBatchedQuery::set_stride_a(::google::protobuf::int64 value) {
  
  stride_a_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cublasSgemmStridedBatchedQuery.stride_a)
}

// int64 stride_b = 16;
inline void cublasSgemmStridedBatchedQuery::clear_stride_b() {
  stride_b_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 cublasSgemmStridedBatchedQuery::stride_b() const {
  // @@protoc_insertion_point(field_get:cudarpc.cublasSgemmStridedBatchedQuery.stride_b)
  return stride_b_;
}
inline void cublasSgemmStridedBatchedQuery::set_stride_b(::google::protobuf::int64 value) {
  
  stride_b_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cublasSgemmStridedBatchedQuery.stride_b)
}

// int64 stride_c = 17;
inline void cublasSgemmStridedBatchedQuery::clear_stride_c() {
  stride_c_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 cublasSgemmStridedBatchedQuery::stride_c() const {
  // @@protoc_insertion_point(field_get:cudarpc.cublasSgemmStridedBatchedQuery.stride_c)
  return stride_c_;
}
inline void cublasSgemmStridedBatchedQuery::set_stride_c(::google::protobuf::int64 value) {
  
  stride_c_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cublasSgemmStridedBatchedQuery.stride_c)
}

// int32 count = 18;
inline void cublasSgemmStridedBatchedQuery::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 cublasSgemmStridedBatchedQuery::count() const {
  // @@protoc_insertion_point(field_get:cudarpc.cublasSgemmStridedBatchedQuery.count)
  return count_;
}
inline void cublasSgemmStridedBatchedQuery::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cublasSgemmStridedBatchedQuery.count)
}

// -------------------------------------------------------------------

// cudnnCreateDesciptorResponse

// int32 error = 1;
inline void cudnnCreateDesciptorResponse::clear_error() {
  error_ = 0;
}
inline ::google::protobuf::int32 cudnnCreateDesciptorResponse::error() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnCreateDesciptorResponse.error)
  return error_;
}
inline void cudnnCreateDesciptorResponse::set_error(::google::protobuf::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudnnCreateDesciptorResponse.error)
}

// bytes cudnn_descriptor = 2;
inline void cudnnCreateDesciptorResponse::clear_cudnn_descriptor() {
  cudnn_descriptor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cudnnCreateDesciptorResponse::cudnn_descriptor() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnCreateDesciptorResponse.cudnn_descriptor)
  return cudnn_descriptor_.GetNoArena();
}
inline void cudnnCreateDesciptorResponse::set_cudnn_descriptor(const ::std::string& value) {
  
  cudnn_descriptor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cudnnCreateDesciptorResponse.cudnn_descriptor)
}
#if LANG_CXX11
inline void cudnnCreateDesciptorResponse::set_cudnn_descriptor(::std::string&& value) {
  
  cudnn_descriptor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cudnnCreateDesciptorResponse.cudnn_descriptor)
}
#endif
inline void cudnnCreateDesciptorResponse::set_cudnn_descriptor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cudnn_descriptor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cudnnCreateDesciptorResponse.cudnn_descriptor)
}
inline void cudnnCreateDesciptorResponse::set_cudnn_descriptor(const void* value, size_t size) {
  
  cudnn_descriptor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cudnnCreateDesciptorResponse.cudnn_descriptor)
}
inline ::std::string* cudnnCreateDesciptorResponse::mutable_cudnn_descriptor() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cudnnCreateDesciptorResponse.cudnn_descriptor)
  return cudnn_descriptor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cudnnCreateDesciptorResponse::release_cudnn_descriptor() {
  // @@protoc_insertion_point(field_release:cudarpc.cudnnCreateDesciptorResponse.cudnn_descriptor)
  
  return cudnn_descriptor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cudnnCreateDesciptorResponse::set_allocated_cudnn_descriptor(::std::string* cudnn_descriptor) {
  if (cudnn_descriptor != NULL) {
    
  } else {
    
  }
  cudnn_descriptor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cudnn_descriptor);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cudnnCreateDesciptorResponse.cudnn_descriptor)
}

// -------------------------------------------------------------------

// cudnnSetTensorNdDescriptorQuery

// bytes cudnn_descriptor = 1;
inline void cudnnSetTensorNdDescriptorQuery::clear_cudnn_descriptor() {
  cudnn_descriptor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cudnnSetTensorNdDescriptorQuery::cudnn_descriptor() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnSetTensorNdDescriptorQuery.cudnn_descriptor)
  return cudnn_descriptor_.GetNoArena();
}
inline void cudnnSetTensorNdDescriptorQuery::set_cudnn_descriptor(const ::std::string& value) {
  
  cudnn_descriptor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cudnnSetTensorNdDescriptorQuery.cudnn_descriptor)
}
#if LANG_CXX11
inline void cudnnSetTensorNdDescriptorQuery::set_cudnn_descriptor(::std::string&& value) {
  
  cudnn_descriptor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cudnnSetTensorNdDescriptorQuery.cudnn_descriptor)
}
#endif
inline void cudnnSetTensorNdDescriptorQuery::set_cudnn_descriptor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cudnn_descriptor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cudnnSetTensorNdDescriptorQuery.cudnn_descriptor)
}
inline void cudnnSetTensorNdDescriptorQuery::set_cudnn_descriptor(const void* value, size_t size) {
  
  cudnn_descriptor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cudnnSetTensorNdDescriptorQuery.cudnn_descriptor)
}
inline ::std::string* cudnnSetTensorNdDescriptorQuery::mutable_cudnn_descriptor() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cudnnSetTensorNdDescriptorQuery.cudnn_descriptor)
  return cudnn_descriptor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cudnnSetTensorNdDescriptorQuery::release_cudnn_descriptor() {
  // @@protoc_insertion_point(field_release:cudarpc.cudnnSetTensorNdDescriptorQuery.cudnn_descriptor)
  
  return cudnn_descriptor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cudnnSetTensorNdDescriptorQuery::set_allocated_cudnn_descriptor(::std::string* cudnn_descriptor) {
  if (cudnn_descriptor != NULL) {
    
  } else {
    
  }
  cudnn_descriptor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cudnn_descriptor);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cudnnSetTensorNdDescriptorQuery.cudnn_descriptor)
}

// int32 type = 2;
inline void cudnnSetTensorNdDescriptorQuery::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 cudnnSetTensorNdDescriptorQuery::type() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnSetTensorNdDescriptorQuery.type)
  return type_;
}
inline void cudnnSetTensorNdDescriptorQuery::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudnnSetTensorNdDescriptorQuery.type)
}

// int32 dims = 3;
inline void cudnnSetTensorNdDescriptorQuery::clear_dims() {
  dims_ = 0;
}
inline ::google::protobuf::int32 cudnnSetTensorNdDescriptorQuery::dims() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnSetTensorNdDescriptorQuery.dims)
  return dims_;
}
inline void cudnnSetTensorNdDescriptorQuery::set_dims(::google::protobuf::int32 value) {
  
  dims_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudnnSetTensorNdDescriptorQuery.dims)
}

// repeated int32 dim_a = 4;
inline int cudnnSetTensorNdDescriptorQuery::dim_a_size() const {
  return dim_a_.size();
}
inline void cudnnSetTensorNdDescriptorQuery::clear_dim_a() {
  dim_a_.Clear();
}
inline ::google::protobuf::int32 cudnnSetTensorNdDescriptorQuery::dim_a(int index) const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnSetTensorNdDescriptorQuery.dim_a)
  return dim_a_.Get(index);
}
inline void cudnnSetTensorNdDescriptorQuery::set_dim_a(int index, ::google::protobuf::int32 value) {
  dim_a_.Set(index, value);
  // @@protoc_insertion_point(field_set:cudarpc.cudnnSetTensorNdDescriptorQuery.dim_a)
}
inline void cudnnSetTensorNdDescriptorQuery::add_dim_a(::google::protobuf::int32 value) {
  dim_a_.Add(value);
  // @@protoc_insertion_point(field_add:cudarpc.cudnnSetTensorNdDescriptorQuery.dim_a)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
cudnnSetTensorNdDescriptorQuery::dim_a() const {
  // @@protoc_insertion_point(field_list:cudarpc.cudnnSetTensorNdDescriptorQuery.dim_a)
  return dim_a_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
cudnnSetTensorNdDescriptorQuery::mutable_dim_a() {
  // @@protoc_insertion_point(field_mutable_list:cudarpc.cudnnSetTensorNdDescriptorQuery.dim_a)
  return &dim_a_;
}

// repeated int32 stride_a = 5;
inline int cudnnSetTensorNdDescriptorQuery::stride_a_size() const {
  return stride_a_.size();
}
inline void cudnnSetTensorNdDescriptorQuery::clear_stride_a() {
  stride_a_.Clear();
}
inline ::google::protobuf::int32 cudnnSetTensorNdDescriptorQuery::stride_a(int index) const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnSetTensorNdDescriptorQuery.stride_a)
  return stride_a_.Get(index);
}
inline void cudnnSetTensorNdDescriptorQuery::set_stride_a(int index, ::google::protobuf::int32 value) {
  stride_a_.Set(index, value);
  // @@protoc_insertion_point(field_set:cudarpc.cudnnSetTensorNdDescriptorQuery.stride_a)
}
inline void cudnnSetTensorNdDescriptorQuery::add_stride_a(::google::protobuf::int32 value) {
  stride_a_.Add(value);
  // @@protoc_insertion_point(field_add:cudarpc.cudnnSetTensorNdDescriptorQuery.stride_a)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
cudnnSetTensorNdDescriptorQuery::stride_a() const {
  // @@protoc_insertion_point(field_list:cudarpc.cudnnSetTensorNdDescriptorQuery.stride_a)
  return stride_a_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
cudnnSetTensorNdDescriptorQuery::mutable_stride_a() {
  // @@protoc_insertion_point(field_mutable_list:cudarpc.cudnnSetTensorNdDescriptorQuery.stride_a)
  return &stride_a_;
}

// -------------------------------------------------------------------

// cudnnSetFilterNdDescriptorQuery

// bytes cudnn_descriptor = 1;
inline void cudnnSetFilterNdDescriptorQuery::clear_cudnn_descriptor() {
  cudnn_descriptor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cudnnSetFilterNdDescriptorQuery::cudnn_descriptor() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnSetFilterNdDescriptorQuery.cudnn_descriptor)
  return cudnn_descriptor_.GetNoArena();
}
inline void cudnnSetFilterNdDescriptorQuery::set_cudnn_descriptor(const ::std::string& value) {
  
  cudnn_descriptor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cudnnSetFilterNdDescriptorQuery.cudnn_descriptor)
}
#if LANG_CXX11
inline void cudnnSetFilterNdDescriptorQuery::set_cudnn_descriptor(::std::string&& value) {
  
  cudnn_descriptor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cudnnSetFilterNdDescriptorQuery.cudnn_descriptor)
}
#endif
inline void cudnnSetFilterNdDescriptorQuery::set_cudnn_descriptor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cudnn_descriptor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cudnnSetFilterNdDescriptorQuery.cudnn_descriptor)
}
inline void cudnnSetFilterNdDescriptorQuery::set_cudnn_descriptor(const void* value, size_t size) {
  
  cudnn_descriptor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cudnnSetFilterNdDescriptorQuery.cudnn_descriptor)
}
inline ::std::string* cudnnSetFilterNdDescriptorQuery::mutable_cudnn_descriptor() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cudnnSetFilterNdDescriptorQuery.cudnn_descriptor)
  return cudnn_descriptor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cudnnSetFilterNdDescriptorQuery::release_cudnn_descriptor() {
  // @@protoc_insertion_point(field_release:cudarpc.cudnnSetFilterNdDescriptorQuery.cudnn_descriptor)
  
  return cudnn_descriptor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cudnnSetFilterNdDescriptorQuery::set_allocated_cudnn_descriptor(::std::string* cudnn_descriptor) {
  if (cudnn_descriptor != NULL) {
    
  } else {
    
  }
  cudnn_descriptor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cudnn_descriptor);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cudnnSetFilterNdDescriptorQuery.cudnn_descriptor)
}

// int32 type = 2;
inline void cudnnSetFilterNdDescriptorQuery::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 cudnnSetFilterNdDescriptorQuery::type() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnSetFilterNdDescriptorQuery.type)
  return type_;
}
inline void cudnnSetFilterNdDescriptorQuery::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudnnSetFilterNdDescriptorQuery.type)
}

// int32 format = 3;
inline void cudnnSetFilterNdDescriptorQuery::clear_format() {
  format_ = 0;
}
inline ::google::protobuf::int32 cudnnSetFilterNdDescriptorQuery::format() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnSetFilterNdDescriptorQuery.format)
  return format_;
}
inline void cudnnSetFilterNdDescriptorQuery::set_format(::google::protobuf::int32 value) {
  
  format_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudnnSetFilterNdDescriptorQuery.format)
}

// int32 dims = 4;
inline void cudnnSetFilterNdDescriptorQuery::clear_dims() {
  dims_ = 0;
}
inline ::google::protobuf::int32 cudnnSetFilterNdDescriptorQuery::dims() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnSetFilterNdDescriptorQuery.dims)
  return dims_;
}
inline void cudnnSetFilterNdDescriptorQuery::set_dims(::google::protobuf::int32 value) {
  
  dims_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudnnSetFilterNdDescriptorQuery.dims)
}

// repeated int32 dim_a = 5;
inline int cudnnSetFilterNdDescriptorQuery::dim_a_size() const {
  return dim_a_.size();
}
inline void cudnnSetFilterNdDescriptorQuery::clear_dim_a() {
  dim_a_.Clear();
}
inline ::google::protobuf::int32 cudnnSetFilterNdDescriptorQuery::dim_a(int index) const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnSetFilterNdDescriptorQuery.dim_a)
  return dim_a_.Get(index);
}
inline void cudnnSetFilterNdDescriptorQuery::set_dim_a(int index, ::google::protobuf::int32 value) {
  dim_a_.Set(index, value);
  // @@protoc_insertion_point(field_set:cudarpc.cudnnSetFilterNdDescriptorQuery.dim_a)
}
inline void cudnnSetFilterNdDescriptorQuery::add_dim_a(::google::protobuf::int32 value) {
  dim_a_.Add(value);
  // @@protoc_insertion_point(field_add:cudarpc.cudnnSetFilterNdDescriptorQuery.dim_a)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
cudnnSetFilterNdDescriptorQuery::dim_a() const {
  // @@protoc_insertion_point(field_list:cudarpc.cudnnSetFilterNdDescriptorQuery.dim_a)
  return dim_a_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
cudnnSetFilterNdDescriptorQuery::mutable_dim_a() {
  // @@protoc_insertion_point(field_mutable_list:cudarpc.cudnnSetFilterNdDescriptorQuery.dim_a)
  return &dim_a_;
}

// -------------------------------------------------------------------

// cudnnSetConvolutionNdDescriptorQuery

// bytes cudnn_descriptor = 1;
inline void cudnnSetConvolutionNdDescriptorQuery::clear_cudnn_descriptor() {
  cudnn_descriptor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cudnnSetConvolutionNdDescriptorQuery::cudnn_descriptor() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnSetConvolutionNdDescriptorQuery.cudnn_descriptor)
  return cudnn_descriptor_.GetNoArena();
}
inline void cudnnSetConvolutionNdDescriptorQuery::set_cudnn_descriptor(const ::std::string& value) {
  
  cudnn_descriptor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cudnnSetConvolutionNdDescriptorQuery.cudnn_descriptor)
}
#if LANG_CXX11
inline void cudnnSetConvolutionNdDescriptorQuery::set_cudnn_descriptor(::std::string&& value) {
  
  cudnn_descriptor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cudnnSetConvolutionNdDescriptorQuery.cudnn_descriptor)
}
#endif
inline void cudnnSetConvolutionNdDescriptorQuery::set_cudnn_descriptor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cudnn_descriptor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cudnnSetConvolutionNdDescriptorQuery.cudnn_descriptor)
}
inline void cudnnSetConvolutionNdDescriptorQuery::set_cudnn_descriptor(const void* value, size_t size) {
  
  cudnn_descriptor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cudnnSetConvolutionNdDescriptorQuery.cudnn_descriptor)
}
inline ::std::string* cudnnSetConvolutionNdDescriptorQuery::mutable_cudnn_descriptor() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cudnnSetConvolutionNdDescriptorQuery.cudnn_descriptor)
  return cudnn_descriptor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cudnnSetConvolutionNdDescriptorQuery::release_cudnn_descriptor() {
  // @@protoc_insertion_point(field_release:cudarpc.cudnnSetConvolutionNdDescriptorQuery.cudnn_descriptor)
  
  return cudnn_descriptor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cudnnSetConvolutionNdDescriptorQuery::set_allocated_cudnn_descriptor(::std::string* cudnn_descriptor) {
  if (cudnn_descriptor != NULL) {
    
  } else {
    
  }
  cudnn_descriptor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cudnn_descriptor);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cudnnSetConvolutionNdDescriptorQuery.cudnn_descriptor)
}

// int32 length = 2;
inline void cudnnSetConvolutionNdDescriptorQuery::clear_length() {
  length_ = 0;
}
inline ::google::protobuf::int32 cudnnSetConvolutionNdDescriptorQuery::length() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnSetConvolutionNdDescriptorQuery.length)
  return length_;
}
inline void cudnnSetConvolutionNdDescriptorQuery::set_length(::google::protobuf::int32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudnnSetConvolutionNdDescriptorQuery.length)
}

// repeated int32 pad_a = 3;
inline int cudnnSetConvolutionNdDescriptorQuery::pad_a_size() const {
  return pad_a_.size();
}
inline void cudnnSetConvolutionNdDescriptorQuery::clear_pad_a() {
  pad_a_.Clear();
}
inline ::google::protobuf::int32 cudnnSetConvolutionNdDescriptorQuery::pad_a(int index) const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnSetConvolutionNdDescriptorQuery.pad_a)
  return pad_a_.Get(index);
}
inline void cudnnSetConvolutionNdDescriptorQuery::set_pad_a(int index, ::google::protobuf::int32 value) {
  pad_a_.Set(index, value);
  // @@protoc_insertion_point(field_set:cudarpc.cudnnSetConvolutionNdDescriptorQuery.pad_a)
}
inline void cudnnSetConvolutionNdDescriptorQuery::add_pad_a(::google::protobuf::int32 value) {
  pad_a_.Add(value);
  // @@protoc_insertion_point(field_add:cudarpc.cudnnSetConvolutionNdDescriptorQuery.pad_a)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
cudnnSetConvolutionNdDescriptorQuery::pad_a() const {
  // @@protoc_insertion_point(field_list:cudarpc.cudnnSetConvolutionNdDescriptorQuery.pad_a)
  return pad_a_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
cudnnSetConvolutionNdDescriptorQuery::mutable_pad_a() {
  // @@protoc_insertion_point(field_mutable_list:cudarpc.cudnnSetConvolutionNdDescriptorQuery.pad_a)
  return &pad_a_;
}

// repeated int32 stride_a = 4;
inline int cudnnSetConvolutionNdDescriptorQuery::stride_a_size() const {
  return stride_a_.size();
}
inline void cudnnSetConvolutionNdDescriptorQuery::clear_stride_a() {
  stride_a_.Clear();
}
inline ::google::protobuf::int32 cudnnSetConvolutionNdDescriptorQuery::stride_a(int index) const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnSetConvolutionNdDescriptorQuery.stride_a)
  return stride_a_.Get(index);
}
inline void cudnnSetConvolutionNdDescriptorQuery::set_stride_a(int index, ::google::protobuf::int32 value) {
  stride_a_.Set(index, value);
  // @@protoc_insertion_point(field_set:cudarpc.cudnnSetConvolutionNdDescriptorQuery.stride_a)
}
inline void cudnnSetConvolutionNdDescriptorQuery::add_stride_a(::google::protobuf::int32 value) {
  stride_a_.Add(value);
  // @@protoc_insertion_point(field_add:cudarpc.cudnnSetConvolutionNdDescriptorQuery.stride_a)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
cudnnSetConvolutionNdDescriptorQuery::stride_a() const {
  // @@protoc_insertion_point(field_list:cudarpc.cudnnSetConvolutionNdDescriptorQuery.stride_a)
  return stride_a_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
cudnnSetConvolutionNdDescriptorQuery::mutable_stride_a() {
  // @@protoc_insertion_point(field_mutable_list:cudarpc.cudnnSetConvolutionNdDescriptorQuery.stride_a)
  return &stride_a_;
}

// repeated int32 dilation_a = 5;
inline int cudnnSetConvolutionNdDescriptorQuery::dilation_a_size() const {
  return dilation_a_.size();
}
inline void cudnnSetConvolutionNdDescriptorQuery::clear_dilation_a() {
  dilation_a_.Clear();
}
inline ::google::protobuf::int32 cudnnSetConvolutionNdDescriptorQuery::dilation_a(int index) const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnSetConvolutionNdDescriptorQuery.dilation_a)
  return dilation_a_.Get(index);
}
inline void cudnnSetConvolutionNdDescriptorQuery::set_dilation_a(int index, ::google::protobuf::int32 value) {
  dilation_a_.Set(index, value);
  // @@protoc_insertion_point(field_set:cudarpc.cudnnSetConvolutionNdDescriptorQuery.dilation_a)
}
inline void cudnnSetConvolutionNdDescriptorQuery::add_dilation_a(::google::protobuf::int32 value) {
  dilation_a_.Add(value);
  // @@protoc_insertion_point(field_add:cudarpc.cudnnSetConvolutionNdDescriptorQuery.dilation_a)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
cudnnSetConvolutionNdDescriptorQuery::dilation_a() const {
  // @@protoc_insertion_point(field_list:cudarpc.cudnnSetConvolutionNdDescriptorQuery.dilation_a)
  return dilation_a_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
cudnnSetConvolutionNdDescriptorQuery::mutable_dilation_a() {
  // @@protoc_insertion_point(field_mutable_list:cudarpc.cudnnSetConvolutionNdDescriptorQuery.dilation_a)
  return &dilation_a_;
}

// int32 mode = 6;
inline void cudnnSetConvolutionNdDescriptorQuery::clear_mode() {
  mode_ = 0;
}
inline ::google::protobuf::int32 cudnnSetConvolutionNdDescriptorQuery::mode() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnSetConvolutionNdDescriptorQuery.mode)
  return mode_;
}
inline void cudnnSetConvolutionNdDescriptorQuery::set_mode(::google::protobuf::int32 value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudnnSetConvolutionNdDescriptorQuery.mode)
}

// int32 type = 7;
inline void cudnnSetConvolutionNdDescriptorQuery::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 cudnnSetConvolutionNdDescriptorQuery::type() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnSetConvolutionNdDescriptorQuery.type)
  return type_;
}
inline void cudnnSetConvolutionNdDescriptorQuery::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudnnSetConvolutionNdDescriptorQuery.type)
}

// -------------------------------------------------------------------

// cudnnSetConvolutionGroupCountQuery

// bytes cudnn_descriptor = 1;
inline void cudnnSetConvolutionGroupCountQuery::clear_cudnn_descriptor() {
  cudnn_descriptor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cudnnSetConvolutionGroupCountQuery::cudnn_descriptor() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnSetConvolutionGroupCountQuery.cudnn_descriptor)
  return cudnn_descriptor_.GetNoArena();
}
inline void cudnnSetConvolutionGroupCountQuery::set_cudnn_descriptor(const ::std::string& value) {
  
  cudnn_descriptor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cudnnSetConvolutionGroupCountQuery.cudnn_descriptor)
}
#if LANG_CXX11
inline void cudnnSetConvolutionGroupCountQuery::set_cudnn_descriptor(::std::string&& value) {
  
  cudnn_descriptor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cudnnSetConvolutionGroupCountQuery.cudnn_descriptor)
}
#endif
inline void cudnnSetConvolutionGroupCountQuery::set_cudnn_descriptor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cudnn_descriptor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cudnnSetConvolutionGroupCountQuery.cudnn_descriptor)
}
inline void cudnnSetConvolutionGroupCountQuery::set_cudnn_descriptor(const void* value, size_t size) {
  
  cudnn_descriptor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cudnnSetConvolutionGroupCountQuery.cudnn_descriptor)
}
inline ::std::string* cudnnSetConvolutionGroupCountQuery::mutable_cudnn_descriptor() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cudnnSetConvolutionGroupCountQuery.cudnn_descriptor)
  return cudnn_descriptor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cudnnSetConvolutionGroupCountQuery::release_cudnn_descriptor() {
  // @@protoc_insertion_point(field_release:cudarpc.cudnnSetConvolutionGroupCountQuery.cudnn_descriptor)
  
  return cudnn_descriptor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cudnnSetConvolutionGroupCountQuery::set_allocated_cudnn_descriptor(::std::string* cudnn_descriptor) {
  if (cudnn_descriptor != NULL) {
    
  } else {
    
  }
  cudnn_descriptor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cudnn_descriptor);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cudnnSetConvolutionGroupCountQuery.cudnn_descriptor)
}

// int32 count = 2;
inline void cudnnSetConvolutionGroupCountQuery::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 cudnnSetConvolutionGroupCountQuery::count() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnSetConvolutionGroupCountQuery.count)
  return count_;
}
inline void cudnnSetConvolutionGroupCountQuery::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudnnSetConvolutionGroupCountQuery.count)
}

// -------------------------------------------------------------------

// cudnnSetConvolutionMathTypeQuery

// bytes cudnn_descriptor = 1;
inline void cudnnSetConvolutionMathTypeQuery::clear_cudnn_descriptor() {
  cudnn_descriptor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cudnnSetConvolutionMathTypeQuery::cudnn_descriptor() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnSetConvolutionMathTypeQuery.cudnn_descriptor)
  return cudnn_descriptor_.GetNoArena();
}
inline void cudnnSetConvolutionMathTypeQuery::set_cudnn_descriptor(const ::std::string& value) {
  
  cudnn_descriptor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cudnnSetConvolutionMathTypeQuery.cudnn_descriptor)
}
#if LANG_CXX11
inline void cudnnSetConvolutionMathTypeQuery::set_cudnn_descriptor(::std::string&& value) {
  
  cudnn_descriptor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cudnnSetConvolutionMathTypeQuery.cudnn_descriptor)
}
#endif
inline void cudnnSetConvolutionMathTypeQuery::set_cudnn_descriptor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cudnn_descriptor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cudnnSetConvolutionMathTypeQuery.cudnn_descriptor)
}
inline void cudnnSetConvolutionMathTypeQuery::set_cudnn_descriptor(const void* value, size_t size) {
  
  cudnn_descriptor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cudnnSetConvolutionMathTypeQuery.cudnn_descriptor)
}
inline ::std::string* cudnnSetConvolutionMathTypeQuery::mutable_cudnn_descriptor() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cudnnSetConvolutionMathTypeQuery.cudnn_descriptor)
  return cudnn_descriptor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cudnnSetConvolutionMathTypeQuery::release_cudnn_descriptor() {
  // @@protoc_insertion_point(field_release:cudarpc.cudnnSetConvolutionMathTypeQuery.cudnn_descriptor)
  
  return cudnn_descriptor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cudnnSetConvolutionMathTypeQuery::set_allocated_cudnn_descriptor(::std::string* cudnn_descriptor) {
  if (cudnn_descriptor != NULL) {
    
  } else {
    
  }
  cudnn_descriptor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cudnn_descriptor);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cudnnSetConvolutionMathTypeQuery.cudnn_descriptor)
}

// int32 type = 2;
inline void cudnnSetConvolutionMathTypeQuery::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 cudnnSetConvolutionMathTypeQuery::type() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnSetConvolutionMathTypeQuery.type)
  return type_;
}
inline void cudnnSetConvolutionMathTypeQuery::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudnnSetConvolutionMathTypeQuery.type)
}

// -------------------------------------------------------------------

// cudnnGetConvolutionForwardAlgorithm_v7Query

// bytes handle = 1;
inline void cudnnGetConvolutionForwardAlgorithm_v7Query::clear_handle() {
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cudnnGetConvolutionForwardAlgorithm_v7Query::handle() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.handle)
  return handle_.GetNoArena();
}
inline void cudnnGetConvolutionForwardAlgorithm_v7Query::set_handle(const ::std::string& value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.handle)
}
#if LANG_CXX11
inline void cudnnGetConvolutionForwardAlgorithm_v7Query::set_handle(::std::string&& value) {
  
  handle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.handle)
}
#endif
inline void cudnnGetConvolutionForwardAlgorithm_v7Query::set_handle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.handle)
}
inline void cudnnGetConvolutionForwardAlgorithm_v7Query::set_handle(const void* value, size_t size) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.handle)
}
inline ::std::string* cudnnGetConvolutionForwardAlgorithm_v7Query::mutable_handle() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.handle)
  return handle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cudnnGetConvolutionForwardAlgorithm_v7Query::release_handle() {
  // @@protoc_insertion_point(field_release:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.handle)
  
  return handle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cudnnGetConvolutionForwardAlgorithm_v7Query::set_allocated_handle(::std::string* handle) {
  if (handle != NULL) {
    
  } else {
    
  }
  handle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handle);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.handle)
}

// bytes x_desc = 2;
inline void cudnnGetConvolutionForwardAlgorithm_v7Query::clear_x_desc() {
  x_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cudnnGetConvolutionForwardAlgorithm_v7Query::x_desc() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.x_desc)
  return x_desc_.GetNoArena();
}
inline void cudnnGetConvolutionForwardAlgorithm_v7Query::set_x_desc(const ::std::string& value) {
  
  x_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.x_desc)
}
#if LANG_CXX11
inline void cudnnGetConvolutionForwardAlgorithm_v7Query::set_x_desc(::std::string&& value) {
  
  x_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.x_desc)
}
#endif
inline void cudnnGetConvolutionForwardAlgorithm_v7Query::set_x_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  x_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.x_desc)
}
inline void cudnnGetConvolutionForwardAlgorithm_v7Query::set_x_desc(const void* value, size_t size) {
  
  x_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.x_desc)
}
inline ::std::string* cudnnGetConvolutionForwardAlgorithm_v7Query::mutable_x_desc() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.x_desc)
  return x_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cudnnGetConvolutionForwardAlgorithm_v7Query::release_x_desc() {
  // @@protoc_insertion_point(field_release:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.x_desc)
  
  return x_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cudnnGetConvolutionForwardAlgorithm_v7Query::set_allocated_x_desc(::std::string* x_desc) {
  if (x_desc != NULL) {
    
  } else {
    
  }
  x_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), x_desc);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.x_desc)
}

// bytes w_desc = 3;
inline void cudnnGetConvolutionForwardAlgorithm_v7Query::clear_w_desc() {
  w_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cudnnGetConvolutionForwardAlgorithm_v7Query::w_desc() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.w_desc)
  return w_desc_.GetNoArena();
}
inline void cudnnGetConvolutionForwardAlgorithm_v7Query::set_w_desc(const ::std::string& value) {
  
  w_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.w_desc)
}
#if LANG_CXX11
inline void cudnnGetConvolutionForwardAlgorithm_v7Query::set_w_desc(::std::string&& value) {
  
  w_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.w_desc)
}
#endif
inline void cudnnGetConvolutionForwardAlgorithm_v7Query::set_w_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  w_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.w_desc)
}
inline void cudnnGetConvolutionForwardAlgorithm_v7Query::set_w_desc(const void* value, size_t size) {
  
  w_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.w_desc)
}
inline ::std::string* cudnnGetConvolutionForwardAlgorithm_v7Query::mutable_w_desc() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.w_desc)
  return w_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cudnnGetConvolutionForwardAlgorithm_v7Query::release_w_desc() {
  // @@protoc_insertion_point(field_release:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.w_desc)
  
  return w_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cudnnGetConvolutionForwardAlgorithm_v7Query::set_allocated_w_desc(::std::string* w_desc) {
  if (w_desc != NULL) {
    
  } else {
    
  }
  w_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), w_desc);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.w_desc)
}

// bytes conv_desc = 4;
inline void cudnnGetConvolutionForwardAlgorithm_v7Query::clear_conv_desc() {
  conv_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cudnnGetConvolutionForwardAlgorithm_v7Query::conv_desc() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.conv_desc)
  return conv_desc_.GetNoArena();
}
inline void cudnnGetConvolutionForwardAlgorithm_v7Query::set_conv_desc(const ::std::string& value) {
  
  conv_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.conv_desc)
}
#if LANG_CXX11
inline void cudnnGetConvolutionForwardAlgorithm_v7Query::set_conv_desc(::std::string&& value) {
  
  conv_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.conv_desc)
}
#endif
inline void cudnnGetConvolutionForwardAlgorithm_v7Query::set_conv_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  conv_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.conv_desc)
}
inline void cudnnGetConvolutionForwardAlgorithm_v7Query::set_conv_desc(const void* value, size_t size) {
  
  conv_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.conv_desc)
}
inline ::std::string* cudnnGetConvolutionForwardAlgorithm_v7Query::mutable_conv_desc() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.conv_desc)
  return conv_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cudnnGetConvolutionForwardAlgorithm_v7Query::release_conv_desc() {
  // @@protoc_insertion_point(field_release:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.conv_desc)
  
  return conv_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cudnnGetConvolutionForwardAlgorithm_v7Query::set_allocated_conv_desc(::std::string* conv_desc) {
  if (conv_desc != NULL) {
    
  } else {
    
  }
  conv_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conv_desc);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.conv_desc)
}

// bytes y_desc = 5;
inline void cudnnGetConvolutionForwardAlgorithm_v7Query::clear_y_desc() {
  y_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cudnnGetConvolutionForwardAlgorithm_v7Query::y_desc() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.y_desc)
  return y_desc_.GetNoArena();
}
inline void cudnnGetConvolutionForwardAlgorithm_v7Query::set_y_desc(const ::std::string& value) {
  
  y_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.y_desc)
}
#if LANG_CXX11
inline void cudnnGetConvolutionForwardAlgorithm_v7Query::set_y_desc(::std::string&& value) {
  
  y_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.y_desc)
}
#endif
inline void cudnnGetConvolutionForwardAlgorithm_v7Query::set_y_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  y_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.y_desc)
}
inline void cudnnGetConvolutionForwardAlgorithm_v7Query::set_y_desc(const void* value, size_t size) {
  
  y_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.y_desc)
}
inline ::std::string* cudnnGetConvolutionForwardAlgorithm_v7Query::mutable_y_desc() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.y_desc)
  return y_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cudnnGetConvolutionForwardAlgorithm_v7Query::release_y_desc() {
  // @@protoc_insertion_point(field_release:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.y_desc)
  
  return y_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cudnnGetConvolutionForwardAlgorithm_v7Query::set_allocated_y_desc(::std::string* y_desc) {
  if (y_desc != NULL) {
    
  } else {
    
  }
  y_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), y_desc);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.y_desc)
}

// int32 count = 6;
inline void cudnnGetConvolutionForwardAlgorithm_v7Query::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 cudnnGetConvolutionForwardAlgorithm_v7Query::count() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.count)
  return count_;
}
inline void cudnnGetConvolutionForwardAlgorithm_v7Query::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Query.count)
}

// -------------------------------------------------------------------

// cudnnGetConvolutionForwardAlgorithm_v7Response

// int32 error = 1;
inline void cudnnGetConvolutionForwardAlgorithm_v7Response::clear_error() {
  error_ = 0;
}
inline ::google::protobuf::int32 cudnnGetConvolutionForwardAlgorithm_v7Response::error() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Response.error)
  return error_;
}
inline void cudnnGetConvolutionForwardAlgorithm_v7Response::set_error(::google::protobuf::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Response.error)
}

// int32 count = 2;
inline void cudnnGetConvolutionForwardAlgorithm_v7Response::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 cudnnGetConvolutionForwardAlgorithm_v7Response::count() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Response.count)
  return count_;
}
inline void cudnnGetConvolutionForwardAlgorithm_v7Response::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Response.count)
}

// bytes results = 3;
inline void cudnnGetConvolutionForwardAlgorithm_v7Response::clear_results() {
  results_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cudnnGetConvolutionForwardAlgorithm_v7Response::results() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Response.results)
  return results_.GetNoArena();
}
inline void cudnnGetConvolutionForwardAlgorithm_v7Response::set_results(const ::std::string& value) {
  
  results_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Response.results)
}
#if LANG_CXX11
inline void cudnnGetConvolutionForwardAlgorithm_v7Response::set_results(::std::string&& value) {
  
  results_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Response.results)
}
#endif
inline void cudnnGetConvolutionForwardAlgorithm_v7Response::set_results(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  results_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Response.results)
}
inline void cudnnGetConvolutionForwardAlgorithm_v7Response::set_results(const void* value, size_t size) {
  
  results_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Response.results)
}
inline ::std::string* cudnnGetConvolutionForwardAlgorithm_v7Response::mutable_results() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Response.results)
  return results_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cudnnGetConvolutionForwardAlgorithm_v7Response::release_results() {
  // @@protoc_insertion_point(field_release:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Response.results)
  
  return results_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cudnnGetConvolutionForwardAlgorithm_v7Response::set_allocated_results(::std::string* results) {
  if (results != NULL) {
    
  } else {
    
  }
  results_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), results);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cudnnGetConvolutionForwardAlgorithm_v7Response.results)
}

// -------------------------------------------------------------------

// cudnnConvolutionForwardQuery

// bytes handle = 1;
inline void cudnnConvolutionForwardQuery::clear_handle() {
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cudnnConvolutionForwardQuery::handle() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnConvolutionForwardQuery.handle)
  return handle_.GetNoArena();
}
inline void cudnnConvolutionForwardQuery::set_handle(const ::std::string& value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cudnnConvolutionForwardQuery.handle)
}
#if LANG_CXX11
inline void cudnnConvolutionForwardQuery::set_handle(::std::string&& value) {
  
  handle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cudnnConvolutionForwardQuery.handle)
}
#endif
inline void cudnnConvolutionForwardQuery::set_handle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cudnnConvolutionForwardQuery.handle)
}
inline void cudnnConvolutionForwardQuery::set_handle(const void* value, size_t size) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cudnnConvolutionForwardQuery.handle)
}
inline ::std::string* cudnnConvolutionForwardQuery::mutable_handle() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cudnnConvolutionForwardQuery.handle)
  return handle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cudnnConvolutionForwardQuery::release_handle() {
  // @@protoc_insertion_point(field_release:cudarpc.cudnnConvolutionForwardQuery.handle)
  
  return handle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cudnnConvolutionForwardQuery::set_allocated_handle(::std::string* handle) {
  if (handle != NULL) {
    
  } else {
    
  }
  handle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handle);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cudnnConvolutionForwardQuery.handle)
}

// float alpha = 2;
inline void cudnnConvolutionForwardQuery::clear_alpha() {
  alpha_ = 0;
}
inline float cudnnConvolutionForwardQuery::alpha() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnConvolutionForwardQuery.alpha)
  return alpha_;
}
inline void cudnnConvolutionForwardQuery::set_alpha(float value) {
  
  alpha_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudnnConvolutionForwardQuery.alpha)
}

// bytes x_desc = 3;
inline void cudnnConvolutionForwardQuery::clear_x_desc() {
  x_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cudnnConvolutionForwardQuery::x_desc() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnConvolutionForwardQuery.x_desc)
  return x_desc_.GetNoArena();
}
inline void cudnnConvolutionForwardQuery::set_x_desc(const ::std::string& value) {
  
  x_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cudnnConvolutionForwardQuery.x_desc)
}
#if LANG_CXX11
inline void cudnnConvolutionForwardQuery::set_x_desc(::std::string&& value) {
  
  x_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cudnnConvolutionForwardQuery.x_desc)
}
#endif
inline void cudnnConvolutionForwardQuery::set_x_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  x_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cudnnConvolutionForwardQuery.x_desc)
}
inline void cudnnConvolutionForwardQuery::set_x_desc(const void* value, size_t size) {
  
  x_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cudnnConvolutionForwardQuery.x_desc)
}
inline ::std::string* cudnnConvolutionForwardQuery::mutable_x_desc() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cudnnConvolutionForwardQuery.x_desc)
  return x_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cudnnConvolutionForwardQuery::release_x_desc() {
  // @@protoc_insertion_point(field_release:cudarpc.cudnnConvolutionForwardQuery.x_desc)
  
  return x_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cudnnConvolutionForwardQuery::set_allocated_x_desc(::std::string* x_desc) {
  if (x_desc != NULL) {
    
  } else {
    
  }
  x_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), x_desc);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cudnnConvolutionForwardQuery.x_desc)
}

// uint64 x = 4;
inline void cudnnConvolutionForwardQuery::clear_x() {
  x_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 cudnnConvolutionForwardQuery::x() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnConvolutionForwardQuery.x)
  return x_;
}
inline void cudnnConvolutionForwardQuery::set_x(::google::protobuf::uint64 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudnnConvolutionForwardQuery.x)
}

// bytes w_Desc = 5;
inline void cudnnConvolutionForwardQuery::clear_w_desc() {
  w_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cudnnConvolutionForwardQuery::w_desc() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnConvolutionForwardQuery.w_Desc)
  return w_desc_.GetNoArena();
}
inline void cudnnConvolutionForwardQuery::set_w_desc(const ::std::string& value) {
  
  w_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cudnnConvolutionForwardQuery.w_Desc)
}
#if LANG_CXX11
inline void cudnnConvolutionForwardQuery::set_w_desc(::std::string&& value) {
  
  w_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cudnnConvolutionForwardQuery.w_Desc)
}
#endif
inline void cudnnConvolutionForwardQuery::set_w_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  w_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cudnnConvolutionForwardQuery.w_Desc)
}
inline void cudnnConvolutionForwardQuery::set_w_desc(const void* value, size_t size) {
  
  w_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cudnnConvolutionForwardQuery.w_Desc)
}
inline ::std::string* cudnnConvolutionForwardQuery::mutable_w_desc() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cudnnConvolutionForwardQuery.w_Desc)
  return w_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cudnnConvolutionForwardQuery::release_w_desc() {
  // @@protoc_insertion_point(field_release:cudarpc.cudnnConvolutionForwardQuery.w_Desc)
  
  return w_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cudnnConvolutionForwardQuery::set_allocated_w_desc(::std::string* w_desc) {
  if (w_desc != NULL) {
    
  } else {
    
  }
  w_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), w_desc);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cudnnConvolutionForwardQuery.w_Desc)
}

// uint64 w = 6;
inline void cudnnConvolutionForwardQuery::clear_w() {
  w_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 cudnnConvolutionForwardQuery::w() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnConvolutionForwardQuery.w)
  return w_;
}
inline void cudnnConvolutionForwardQuery::set_w(::google::protobuf::uint64 value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudnnConvolutionForwardQuery.w)
}

// bytes conv_desc = 7;
inline void cudnnConvolutionForwardQuery::clear_conv_desc() {
  conv_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cudnnConvolutionForwardQuery::conv_desc() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnConvolutionForwardQuery.conv_desc)
  return conv_desc_.GetNoArena();
}
inline void cudnnConvolutionForwardQuery::set_conv_desc(const ::std::string& value) {
  
  conv_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cudnnConvolutionForwardQuery.conv_desc)
}
#if LANG_CXX11
inline void cudnnConvolutionForwardQuery::set_conv_desc(::std::string&& value) {
  
  conv_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cudnnConvolutionForwardQuery.conv_desc)
}
#endif
inline void cudnnConvolutionForwardQuery::set_conv_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  conv_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cudnnConvolutionForwardQuery.conv_desc)
}
inline void cudnnConvolutionForwardQuery::set_conv_desc(const void* value, size_t size) {
  
  conv_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cudnnConvolutionForwardQuery.conv_desc)
}
inline ::std::string* cudnnConvolutionForwardQuery::mutable_conv_desc() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cudnnConvolutionForwardQuery.conv_desc)
  return conv_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cudnnConvolutionForwardQuery::release_conv_desc() {
  // @@protoc_insertion_point(field_release:cudarpc.cudnnConvolutionForwardQuery.conv_desc)
  
  return conv_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cudnnConvolutionForwardQuery::set_allocated_conv_desc(::std::string* conv_desc) {
  if (conv_desc != NULL) {
    
  } else {
    
  }
  conv_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conv_desc);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cudnnConvolutionForwardQuery.conv_desc)
}

// int32 algo = 8;
inline void cudnnConvolutionForwardQuery::clear_algo() {
  algo_ = 0;
}
inline ::google::protobuf::int32 cudnnConvolutionForwardQuery::algo() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnConvolutionForwardQuery.algo)
  return algo_;
}
inline void cudnnConvolutionForwardQuery::set_algo(::google::protobuf::int32 value) {
  
  algo_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudnnConvolutionForwardQuery.algo)
}

// uint64 workspace = 9;
inline void cudnnConvolutionForwardQuery::clear_workspace() {
  workspace_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 cudnnConvolutionForwardQuery::workspace() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnConvolutionForwardQuery.workspace)
  return workspace_;
}
inline void cudnnConvolutionForwardQuery::set_workspace(::google::protobuf::uint64 value) {
  
  workspace_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudnnConvolutionForwardQuery.workspace)
}

// uint64 workspace_size = 10;
inline void cudnnConvolutionForwardQuery::clear_workspace_size() {
  workspace_size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 cudnnConvolutionForwardQuery::workspace_size() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnConvolutionForwardQuery.workspace_size)
  return workspace_size_;
}
inline void cudnnConvolutionForwardQuery::set_workspace_size(::google::protobuf::uint64 value) {
  
  workspace_size_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudnnConvolutionForwardQuery.workspace_size)
}

// float beta = 11;
inline void cudnnConvolutionForwardQuery::clear_beta() {
  beta_ = 0;
}
inline float cudnnConvolutionForwardQuery::beta() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnConvolutionForwardQuery.beta)
  return beta_;
}
inline void cudnnConvolutionForwardQuery::set_beta(float value) {
  
  beta_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudnnConvolutionForwardQuery.beta)
}

// bytes y_desc = 12;
inline void cudnnConvolutionForwardQuery::clear_y_desc() {
  y_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cudnnConvolutionForwardQuery::y_desc() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnConvolutionForwardQuery.y_desc)
  return y_desc_.GetNoArena();
}
inline void cudnnConvolutionForwardQuery::set_y_desc(const ::std::string& value) {
  
  y_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cudnnConvolutionForwardQuery.y_desc)
}
#if LANG_CXX11
inline void cudnnConvolutionForwardQuery::set_y_desc(::std::string&& value) {
  
  y_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cudnnConvolutionForwardQuery.y_desc)
}
#endif
inline void cudnnConvolutionForwardQuery::set_y_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  y_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cudnnConvolutionForwardQuery.y_desc)
}
inline void cudnnConvolutionForwardQuery::set_y_desc(const void* value, size_t size) {
  
  y_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cudnnConvolutionForwardQuery.y_desc)
}
inline ::std::string* cudnnConvolutionForwardQuery::mutable_y_desc() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cudnnConvolutionForwardQuery.y_desc)
  return y_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cudnnConvolutionForwardQuery::release_y_desc() {
  // @@protoc_insertion_point(field_release:cudarpc.cudnnConvolutionForwardQuery.y_desc)
  
  return y_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cudnnConvolutionForwardQuery::set_allocated_y_desc(::std::string* y_desc) {
  if (y_desc != NULL) {
    
  } else {
    
  }
  y_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), y_desc);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cudnnConvolutionForwardQuery.y_desc)
}

// uint64 y = 13;
inline void cudnnConvolutionForwardQuery::clear_y() {
  y_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 cudnnConvolutionForwardQuery::y() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnConvolutionForwardQuery.y)
  return y_;
}
inline void cudnnConvolutionForwardQuery::set_y(::google::protobuf::uint64 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudnnConvolutionForwardQuery.y)
}

// -------------------------------------------------------------------

// cudnnBatchNormalizationForwardInferenceQuery

// bytes handle = 1;
inline void cudnnBatchNormalizationForwardInferenceQuery::clear_handle() {
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cudnnBatchNormalizationForwardInferenceQuery::handle() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.handle)
  return handle_.GetNoArena();
}
inline void cudnnBatchNormalizationForwardInferenceQuery::set_handle(const ::std::string& value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.handle)
}
#if LANG_CXX11
inline void cudnnBatchNormalizationForwardInferenceQuery::set_handle(::std::string&& value) {
  
  handle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.handle)
}
#endif
inline void cudnnBatchNormalizationForwardInferenceQuery::set_handle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.handle)
}
inline void cudnnBatchNormalizationForwardInferenceQuery::set_handle(const void* value, size_t size) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.handle)
}
inline ::std::string* cudnnBatchNormalizationForwardInferenceQuery::mutable_handle() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.handle)
  return handle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cudnnBatchNormalizationForwardInferenceQuery::release_handle() {
  // @@protoc_insertion_point(field_release:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.handle)
  
  return handle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cudnnBatchNormalizationForwardInferenceQuery::set_allocated_handle(::std::string* handle) {
  if (handle != NULL) {
    
  } else {
    
  }
  handle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handle);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.handle)
}

// int32 mode = 2;
inline void cudnnBatchNormalizationForwardInferenceQuery::clear_mode() {
  mode_ = 0;
}
inline ::google::protobuf::int32 cudnnBatchNormalizationForwardInferenceQuery::mode() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.mode)
  return mode_;
}
inline void cudnnBatchNormalizationForwardInferenceQuery::set_mode(::google::protobuf::int32 value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.mode)
}

// float alpha = 3;
inline void cudnnBatchNormalizationForwardInferenceQuery::clear_alpha() {
  alpha_ = 0;
}
inline float cudnnBatchNormalizationForwardInferenceQuery::alpha() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.alpha)
  return alpha_;
}
inline void cudnnBatchNormalizationForwardInferenceQuery::set_alpha(float value) {
  
  alpha_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.alpha)
}

// float beta = 4;
inline void cudnnBatchNormalizationForwardInferenceQuery::clear_beta() {
  beta_ = 0;
}
inline float cudnnBatchNormalizationForwardInferenceQuery::beta() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.beta)
  return beta_;
}
inline void cudnnBatchNormalizationForwardInferenceQuery::set_beta(float value) {
  
  beta_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.beta)
}

// bytes x_desc = 5;
inline void cudnnBatchNormalizationForwardInferenceQuery::clear_x_desc() {
  x_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cudnnBatchNormalizationForwardInferenceQuery::x_desc() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.x_desc)
  return x_desc_.GetNoArena();
}
inline void cudnnBatchNormalizationForwardInferenceQuery::set_x_desc(const ::std::string& value) {
  
  x_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.x_desc)
}
#if LANG_CXX11
inline void cudnnBatchNormalizationForwardInferenceQuery::set_x_desc(::std::string&& value) {
  
  x_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.x_desc)
}
#endif
inline void cudnnBatchNormalizationForwardInferenceQuery::set_x_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  x_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.x_desc)
}
inline void cudnnBatchNormalizationForwardInferenceQuery::set_x_desc(const void* value, size_t size) {
  
  x_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.x_desc)
}
inline ::std::string* cudnnBatchNormalizationForwardInferenceQuery::mutable_x_desc() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.x_desc)
  return x_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cudnnBatchNormalizationForwardInferenceQuery::release_x_desc() {
  // @@protoc_insertion_point(field_release:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.x_desc)
  
  return x_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cudnnBatchNormalizationForwardInferenceQuery::set_allocated_x_desc(::std::string* x_desc) {
  if (x_desc != NULL) {
    
  } else {
    
  }
  x_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), x_desc);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.x_desc)
}

// uint64 x = 6;
inline void cudnnBatchNormalizationForwardInferenceQuery::clear_x() {
  x_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 cudnnBatchNormalizationForwardInferenceQuery::x() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.x)
  return x_;
}
inline void cudnnBatchNormalizationForwardInferenceQuery::set_x(::google::protobuf::uint64 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.x)
}

// bytes y_desc = 7;
inline void cudnnBatchNormalizationForwardInferenceQuery::clear_y_desc() {
  y_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cudnnBatchNormalizationForwardInferenceQuery::y_desc() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.y_desc)
  return y_desc_.GetNoArena();
}
inline void cudnnBatchNormalizationForwardInferenceQuery::set_y_desc(const ::std::string& value) {
  
  y_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.y_desc)
}
#if LANG_CXX11
inline void cudnnBatchNormalizationForwardInferenceQuery::set_y_desc(::std::string&& value) {
  
  y_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.y_desc)
}
#endif
inline void cudnnBatchNormalizationForwardInferenceQuery::set_y_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  y_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.y_desc)
}
inline void cudnnBatchNormalizationForwardInferenceQuery::set_y_desc(const void* value, size_t size) {
  
  y_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.y_desc)
}
inline ::std::string* cudnnBatchNormalizationForwardInferenceQuery::mutable_y_desc() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.y_desc)
  return y_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cudnnBatchNormalizationForwardInferenceQuery::release_y_desc() {
  // @@protoc_insertion_point(field_release:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.y_desc)
  
  return y_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cudnnBatchNormalizationForwardInferenceQuery::set_allocated_y_desc(::std::string* y_desc) {
  if (y_desc != NULL) {
    
  } else {
    
  }
  y_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), y_desc);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.y_desc)
}

// uint64 y = 8;
inline void cudnnBatchNormalizationForwardInferenceQuery::clear_y() {
  y_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 cudnnBatchNormalizationForwardInferenceQuery::y() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.y)
  return y_;
}
inline void cudnnBatchNormalizationForwardInferenceQuery::set_y(::google::protobuf::uint64 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.y)
}

// bytes bn_Desc = 9;
inline void cudnnBatchNormalizationForwardInferenceQuery::clear_bn_desc() {
  bn_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cudnnBatchNormalizationForwardInferenceQuery::bn_desc() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.bn_Desc)
  return bn_desc_.GetNoArena();
}
inline void cudnnBatchNormalizationForwardInferenceQuery::set_bn_desc(const ::std::string& value) {
  
  bn_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.bn_Desc)
}
#if LANG_CXX11
inline void cudnnBatchNormalizationForwardInferenceQuery::set_bn_desc(::std::string&& value) {
  
  bn_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.bn_Desc)
}
#endif
inline void cudnnBatchNormalizationForwardInferenceQuery::set_bn_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bn_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.bn_Desc)
}
inline void cudnnBatchNormalizationForwardInferenceQuery::set_bn_desc(const void* value, size_t size) {
  
  bn_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.bn_Desc)
}
inline ::std::string* cudnnBatchNormalizationForwardInferenceQuery::mutable_bn_desc() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.bn_Desc)
  return bn_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cudnnBatchNormalizationForwardInferenceQuery::release_bn_desc() {
  // @@protoc_insertion_point(field_release:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.bn_Desc)
  
  return bn_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cudnnBatchNormalizationForwardInferenceQuery::set_allocated_bn_desc(::std::string* bn_desc) {
  if (bn_desc != NULL) {
    
  } else {
    
  }
  bn_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bn_desc);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.bn_Desc)
}

// uint64 bn_scale = 10;
inline void cudnnBatchNormalizationForwardInferenceQuery::clear_bn_scale() {
  bn_scale_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 cudnnBatchNormalizationForwardInferenceQuery::bn_scale() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.bn_scale)
  return bn_scale_;
}
inline void cudnnBatchNormalizationForwardInferenceQuery::set_bn_scale(::google::protobuf::uint64 value) {
  
  bn_scale_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.bn_scale)
}

// uint64 bn_bias = 11;
inline void cudnnBatchNormalizationForwardInferenceQuery::clear_bn_bias() {
  bn_bias_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 cudnnBatchNormalizationForwardInferenceQuery::bn_bias() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.bn_bias)
  return bn_bias_;
}
inline void cudnnBatchNormalizationForwardInferenceQuery::set_bn_bias(::google::protobuf::uint64 value) {
  
  bn_bias_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.bn_bias)
}

// uint64 es_mean = 12;
inline void cudnnBatchNormalizationForwardInferenceQuery::clear_es_mean() {
  es_mean_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 cudnnBatchNormalizationForwardInferenceQuery::es_mean() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.es_mean)
  return es_mean_;
}
inline void cudnnBatchNormalizationForwardInferenceQuery::set_es_mean(::google::protobuf::uint64 value) {
  
  es_mean_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.es_mean)
}

// uint64 es_var = 13;
inline void cudnnBatchNormalizationForwardInferenceQuery::clear_es_var() {
  es_var_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 cudnnBatchNormalizationForwardInferenceQuery::es_var() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.es_var)
  return es_var_;
}
inline void cudnnBatchNormalizationForwardInferenceQuery::set_es_var(::google::protobuf::uint64 value) {
  
  es_var_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.es_var)
}

// double epsilon = 14;
inline void cudnnBatchNormalizationForwardInferenceQuery::clear_epsilon() {
  epsilon_ = 0;
}
inline double cudnnBatchNormalizationForwardInferenceQuery::epsilon() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.epsilon)
  return epsilon_;
}
inline void cudnnBatchNormalizationForwardInferenceQuery::set_epsilon(double value) {
  
  epsilon_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudnnBatchNormalizationForwardInferenceQuery.epsilon)
}

// -------------------------------------------------------------------

// cuInitQuery

// uint32 flags = 1;
inline void cuInitQuery::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 cuInitQuery::flags() const {
  // @@protoc_insertion_point(field_get:cudarpc.cuInitQuery.flags)
  return flags_;
}
inline void cuInitQuery::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cuInitQuery.flags)
}

// -------------------------------------------------------------------

// cuDevicePrimaryCtxGetStateQuery

// int64 device = 1;
inline void cuDevicePrimaryCtxGetStateQuery::clear_device() {
  device_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 cuDevicePrimaryCtxGetStateQuery::device() const {
  // @@protoc_insertion_point(field_get:cudarpc.cuDevicePrimaryCtxGetStateQuery.device)
  return device_;
}
inline void cuDevicePrimaryCtxGetStateQuery::set_device(::google::protobuf::int64 value) {
  
  device_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cuDevicePrimaryCtxGetStateQuery.device)
}

// -------------------------------------------------------------------

// cuDevicePrimaryCtxGetStateResponse

// int32 error = 1;
inline void cuDevicePrimaryCtxGetStateResponse::clear_error() {
  error_ = 0;
}
inline ::google::protobuf::int32 cuDevicePrimaryCtxGetStateResponse::error() const {
  // @@protoc_insertion_point(field_get:cudarpc.cuDevicePrimaryCtxGetStateResponse.error)
  return error_;
}
inline void cuDevicePrimaryCtxGetStateResponse::set_error(::google::protobuf::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cuDevicePrimaryCtxGetStateResponse.error)
}

// uint32 flags = 2;
inline void cuDevicePrimaryCtxGetStateResponse::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 cuDevicePrimaryCtxGetStateResponse::flags() const {
  // @@protoc_insertion_point(field_get:cudarpc.cuDevicePrimaryCtxGetStateResponse.flags)
  return flags_;
}
inline void cuDevicePrimaryCtxGetStateResponse::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cuDevicePrimaryCtxGetStateResponse.flags)
}

// int32 active = 3;
inline void cuDevicePrimaryCtxGetStateResponse::clear_active() {
  active_ = 0;
}
inline ::google::protobuf::int32 cuDevicePrimaryCtxGetStateResponse::active() const {
  // @@protoc_insertion_point(field_get:cudarpc.cuDevicePrimaryCtxGetStateResponse.active)
  return active_;
}
inline void cuDevicePrimaryCtxGetStateResponse::set_active(::google::protobuf::int32 value) {
  
  active_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cuDevicePrimaryCtxGetStateResponse.active)
}

// -------------------------------------------------------------------

// cuGetProcAddressQuery

// bytes symbol = 1;
inline void cuGetProcAddressQuery::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cuGetProcAddressQuery::symbol() const {
  // @@protoc_insertion_point(field_get:cudarpc.cuGetProcAddressQuery.symbol)
  return symbol_.GetNoArena();
}
inline void cuGetProcAddressQuery::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cuGetProcAddressQuery.symbol)
}
#if LANG_CXX11
inline void cuGetProcAddressQuery::set_symbol(::std::string&& value) {
  
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cuGetProcAddressQuery.symbol)
}
#endif
inline void cuGetProcAddressQuery::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cuGetProcAddressQuery.symbol)
}
inline void cuGetProcAddressQuery::set_symbol(const void* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cuGetProcAddressQuery.symbol)
}
inline ::std::string* cuGetProcAddressQuery::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cuGetProcAddressQuery.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cuGetProcAddressQuery::release_symbol() {
  // @@protoc_insertion_point(field_release:cudarpc.cuGetProcAddressQuery.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cuGetProcAddressQuery::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cuGetProcAddressQuery.symbol)
}

// int32 version = 2;
inline void cuGetProcAddressQuery::clear_version() {
  version_ = 0;
}
inline ::google::protobuf::int32 cuGetProcAddressQuery::version() const {
  // @@protoc_insertion_point(field_get:cudarpc.cuGetProcAddressQuery.version)
  return version_;
}
inline void cuGetProcAddressQuery::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cuGetProcAddressQuery.version)
}

// uint64 flags = 3;
inline void cuGetProcAddressQuery::clear_flags() {
  flags_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 cuGetProcAddressQuery::flags() const {
  // @@protoc_insertion_point(field_get:cudarpc.cuGetProcAddressQuery.flags)
  return flags_;
}
inline void cuGetProcAddressQuery::set_flags(::google::protobuf::uint64 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cuGetProcAddressQuery.flags)
}

// -------------------------------------------------------------------

// cuGetProcAddressResponse

// int32 error = 1;
inline void cuGetProcAddressResponse::clear_error() {
  error_ = 0;
}
inline ::google::protobuf::int32 cuGetProcAddressResponse::error() const {
  // @@protoc_insertion_point(field_get:cudarpc.cuGetProcAddressResponse.error)
  return error_;
}
inline void cuGetProcAddressResponse::set_error(::google::protobuf::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cuGetProcAddressResponse.error)
}

// uint64 pfn = 2;
inline void cuGetProcAddressResponse::clear_pfn() {
  pfn_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 cuGetProcAddressResponse::pfn() const {
  // @@protoc_insertion_point(field_get:cudarpc.cuGetProcAddressResponse.pfn)
  return pfn_;
}
inline void cuGetProcAddressResponse::set_pfn(::google::protobuf::uint64 value) {
  
  pfn_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cuGetProcAddressResponse.pfn)
}

// -------------------------------------------------------------------

// getVersionResponse

// int32 error = 1;
inline void getVersionResponse::clear_error() {
  error_ = 0;
}
inline ::google::protobuf::int32 getVersionResponse::error() const {
  // @@protoc_insertion_point(field_get:cudarpc.getVersionResponse.error)
  return error_;
}
inline void getVersionResponse::set_error(::google::protobuf::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.getVersionResponse.error)
}

// int32 version = 2;
inline void getVersionResponse::clear_version() {
  version_ = 0;
}
inline ::google::protobuf::int32 getVersionResponse::version() const {
  // @@protoc_insertion_point(field_get:cudarpc.getVersionResponse.version)
  return version_;
}
inline void getVersionResponse::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.getVersionResponse.version)
}

// -------------------------------------------------------------------

// cudaGetDeviceResponse

// int32 error = 1;
inline void cudaGetDeviceResponse::clear_error() {
  error_ = 0;
}
inline ::google::protobuf::int32 cudaGetDeviceResponse::error() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaGetDeviceResponse.error)
  return error_;
}
inline void cudaGetDeviceResponse::set_error(::google::protobuf::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaGetDeviceResponse.error)
}

// int32 device = 2;
inline void cudaGetDeviceResponse::clear_device() {
  device_ = 0;
}
inline ::google::protobuf::int32 cudaGetDeviceResponse::device() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaGetDeviceResponse.device)
  return device_;
}
inline void cudaGetDeviceResponse::set_device(::google::protobuf::int32 value) {
  
  device_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaGetDeviceResponse.device)
}

// -------------------------------------------------------------------

// cudaGetDeviceCountResponse

// int32 error = 1;
inline void cudaGetDeviceCountResponse::clear_error() {
  error_ = 0;
}
inline ::google::protobuf::int32 cudaGetDeviceCountResponse::error() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaGetDeviceCountResponse.error)
  return error_;
}
inline void cudaGetDeviceCountResponse::set_error(::google::protobuf::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaGetDeviceCountResponse.error)
}

// int32 count = 2;
inline void cudaGetDeviceCountResponse::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 cudaGetDeviceCountResponse::count() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaGetDeviceCountResponse.count)
  return count_;
}
inline void cudaGetDeviceCountResponse::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaGetDeviceCountResponse.count)
}

// -------------------------------------------------------------------

// cudaGetDevicePropertiesQuery

// int32 device = 1;
inline void cudaGetDevicePropertiesQuery::clear_device() {
  device_ = 0;
}
inline ::google::protobuf::int32 cudaGetDevicePropertiesQuery::device() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaGetDevicePropertiesQuery.device)
  return device_;
}
inline void cudaGetDevicePropertiesQuery::set_device(::google::protobuf::int32 value) {
  
  device_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaGetDevicePropertiesQuery.device)
}

// -------------------------------------------------------------------

// cudaGetDevicePropertiesResponse

// int32 error = 1;
inline void cudaGetDevicePropertiesResponse::clear_error() {
  error_ = 0;
}
inline ::google::protobuf::int32 cudaGetDevicePropertiesResponse::error() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaGetDevicePropertiesResponse.error)
  return error_;
}
inline void cudaGetDevicePropertiesResponse::set_error(::google::protobuf::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaGetDevicePropertiesResponse.error)
}

// bytes prop = 2;
inline void cudaGetDevicePropertiesResponse::clear_prop() {
  prop_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cudaGetDevicePropertiesResponse::prop() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaGetDevicePropertiesResponse.prop)
  return prop_.GetNoArena();
}
inline void cudaGetDevicePropertiesResponse::set_prop(const ::std::string& value) {
  
  prop_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cudaGetDevicePropertiesResponse.prop)
}
#if LANG_CXX11
inline void cudaGetDevicePropertiesResponse::set_prop(::std::string&& value) {
  
  prop_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cudaGetDevicePropertiesResponse.prop)
}
#endif
inline void cudaGetDevicePropertiesResponse::set_prop(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  prop_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cudaGetDevicePropertiesResponse.prop)
}
inline void cudaGetDevicePropertiesResponse::set_prop(const void* value, size_t size) {
  
  prop_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cudaGetDevicePropertiesResponse.prop)
}
inline ::std::string* cudaGetDevicePropertiesResponse::mutable_prop() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cudaGetDevicePropertiesResponse.prop)
  return prop_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cudaGetDevicePropertiesResponse::release_prop() {
  // @@protoc_insertion_point(field_release:cudarpc.cudaGetDevicePropertiesResponse.prop)
  
  return prop_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cudaGetDevicePropertiesResponse::set_allocated_prop(::std::string* prop) {
  if (prop != NULL) {
    
  } else {
    
  }
  prop_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prop);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cudaGetDevicePropertiesResponse.prop)
}

// -------------------------------------------------------------------

// cudaDeviceGetAttributeQuery

// int32 attr = 1;
inline void cudaDeviceGetAttributeQuery::clear_attr() {
  attr_ = 0;
}
inline ::google::protobuf::int32 cudaDeviceGetAttributeQuery::attr() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaDeviceGetAttributeQuery.attr)
  return attr_;
}
inline void cudaDeviceGetAttributeQuery::set_attr(::google::protobuf::int32 value) {
  
  attr_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaDeviceGetAttributeQuery.attr)
}

// int32 device = 2;
inline void cudaDeviceGetAttributeQuery::clear_device() {
  device_ = 0;
}
inline ::google::protobuf::int32 cudaDeviceGetAttributeQuery::device() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaDeviceGetAttributeQuery.device)
  return device_;
}
inline void cudaDeviceGetAttributeQuery::set_device(::google::protobuf::int32 value) {
  
  device_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaDeviceGetAttributeQuery.device)
}

// -------------------------------------------------------------------

// cudaDeviceGetAttributeResponse

// int32 error = 1;
inline void cudaDeviceGetAttributeResponse::clear_error() {
  error_ = 0;
}
inline ::google::protobuf::int32 cudaDeviceGetAttributeResponse::error() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaDeviceGetAttributeResponse.error)
  return error_;
}
inline void cudaDeviceGetAttributeResponse::set_error(::google::protobuf::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaDeviceGetAttributeResponse.error)
}

// int32 value = 2;
inline void cudaDeviceGetAttributeResponse::clear_value() {
  value_ = 0;
}
inline ::google::protobuf::int32 cudaDeviceGetAttributeResponse::value() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaDeviceGetAttributeResponse.value)
  return value_;
}
inline void cudaDeviceGetAttributeResponse::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaDeviceGetAttributeResponse.value)
}

// -------------------------------------------------------------------

// cudaMallocQuery

// uint64 size = 1;
inline void cudaMallocQuery::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 cudaMallocQuery::size() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaMallocQuery.size)
  return size_;
}
inline void cudaMallocQuery::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaMallocQuery.size)
}

// -------------------------------------------------------------------

// cudaMallocResponse

// int32 error = 1;
inline void cudaMallocResponse::clear_error() {
  error_ = 0;
}
inline ::google::protobuf::int32 cudaMallocResponse::error() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaMallocResponse.error)
  return error_;
}
inline void cudaMallocResponse::set_error(::google::protobuf::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaMallocResponse.error)
}

// uint64 ptr = 2;
inline void cudaMallocResponse::clear_ptr() {
  ptr_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 cudaMallocResponse::ptr() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaMallocResponse.ptr)
  return ptr_;
}
inline void cudaMallocResponse::set_ptr(::google::protobuf::uint64 value) {
  
  ptr_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaMallocResponse.ptr)
}

// -------------------------------------------------------------------

// cudaFreeQuery

// uint64 ptr = 1;
inline void cudaFreeQuery::clear_ptr() {
  ptr_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 cudaFreeQuery::ptr() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaFreeQuery.ptr)
  return ptr_;
}
inline void cudaFreeQuery::set_ptr(::google::protobuf::uint64 value) {
  
  ptr_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaFreeQuery.ptr)
}

// -------------------------------------------------------------------

// cudaMemcpyQuery

// int32 kind = 1;
inline void cudaMemcpyQuery::clear_kind() {
  kind_ = 0;
}
inline ::google::protobuf::int32 cudaMemcpyQuery::kind() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaMemcpyQuery.kind)
  return kind_;
}
inline void cudaMemcpyQuery::set_kind(::google::protobuf::int32 value) {
  
  kind_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaMemcpyQuery.kind)
}

// uint64 src = 2;
inline void cudaMemcpyQuery::clear_src() {
  src_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 cudaMemcpyQuery::src() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaMemcpyQuery.src)
  return src_;
}
inline void cudaMemcpyQuery::set_src(::google::protobuf::uint64 value) {
  
  src_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaMemcpyQuery.src)
}

// uint64 dst = 3;
inline void cudaMemcpyQuery::clear_dst() {
  dst_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 cudaMemcpyQuery::dst() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaMemcpyQuery.dst)
  return dst_;
}
inline void cudaMemcpyQuery::set_dst(::google::protobuf::uint64 value) {
  
  dst_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaMemcpyQuery.dst)
}

// uint64 count = 4;
inline void cudaMemcpyQuery::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 cudaMemcpyQuery::count() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaMemcpyQuery.count)
  return count_;
}
inline void cudaMemcpyQuery::set_count(::google::protobuf::uint64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaMemcpyQuery.count)
}

// bytes payload = 5;
inline void cudaMemcpyQuery::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cudaMemcpyQuery::payload() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaMemcpyQuery.payload)
  return payload_.GetNoArena();
}
inline void cudaMemcpyQuery::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cudaMemcpyQuery.payload)
}
#if LANG_CXX11
inline void cudaMemcpyQuery::set_payload(::std::string&& value) {
  
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cudaMemcpyQuery.payload)
}
#endif
inline void cudaMemcpyQuery::set_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cudaMemcpyQuery.payload)
}
inline void cudaMemcpyQuery::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cudaMemcpyQuery.payload)
}
inline ::std::string* cudaMemcpyQuery::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cudaMemcpyQuery.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cudaMemcpyQuery::release_payload() {
  // @@protoc_insertion_point(field_release:cudarpc.cudaMemcpyQuery.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cudaMemcpyQuery::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cudaMemcpyQuery.payload)
}

// -------------------------------------------------------------------

// cudaMemcpyResponse

// int32 error = 1;
inline void cudaMemcpyResponse::clear_error() {
  error_ = 0;
}
inline ::google::protobuf::int32 cudaMemcpyResponse::error() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaMemcpyResponse.error)
  return error_;
}
inline void cudaMemcpyResponse::set_error(::google::protobuf::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaMemcpyResponse.error)
}

// bytes payload = 2;
inline void cudaMemcpyResponse::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cudaMemcpyResponse::payload() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaMemcpyResponse.payload)
  return payload_.GetNoArena();
}
inline void cudaMemcpyResponse::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cudaMemcpyResponse.payload)
}
#if LANG_CXX11
inline void cudaMemcpyResponse::set_payload(::std::string&& value) {
  
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cudaMemcpyResponse.payload)
}
#endif
inline void cudaMemcpyResponse::set_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cudaMemcpyResponse.payload)
}
inline void cudaMemcpyResponse::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cudaMemcpyResponse.payload)
}
inline ::std::string* cudaMemcpyResponse::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cudaMemcpyResponse.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cudaMemcpyResponse::release_payload() {
  // @@protoc_insertion_point(field_release:cudarpc.cudaMemcpyResponse.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cudaMemcpyResponse::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cudaMemcpyResponse.payload)
}

// -------------------------------------------------------------------

// cudaMemcpyAsyncQuery

// int32 kind = 1;
inline void cudaMemcpyAsyncQuery::clear_kind() {
  kind_ = 0;
}
inline ::google::protobuf::int32 cudaMemcpyAsyncQuery::kind() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaMemcpyAsyncQuery.kind)
  return kind_;
}
inline void cudaMemcpyAsyncQuery::set_kind(::google::protobuf::int32 value) {
  
  kind_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaMemcpyAsyncQuery.kind)
}

// uint64 src = 2;
inline void cudaMemcpyAsyncQuery::clear_src() {
  src_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 cudaMemcpyAsyncQuery::src() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaMemcpyAsyncQuery.src)
  return src_;
}
inline void cudaMemcpyAsyncQuery::set_src(::google::protobuf::uint64 value) {
  
  src_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaMemcpyAsyncQuery.src)
}

// uint64 dst = 3;
inline void cudaMemcpyAsyncQuery::clear_dst() {
  dst_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 cudaMemcpyAsyncQuery::dst() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaMemcpyAsyncQuery.dst)
  return dst_;
}
inline void cudaMemcpyAsyncQuery::set_dst(::google::protobuf::uint64 value) {
  
  dst_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaMemcpyAsyncQuery.dst)
}

// uint64 count = 4;
inline void cudaMemcpyAsyncQuery::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 cudaMemcpyAsyncQuery::count() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaMemcpyAsyncQuery.count)
  return count_;
}
inline void cudaMemcpyAsyncQuery::set_count(::google::protobuf::uint64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaMemcpyAsyncQuery.count)
}

// bytes payload = 5;
inline void cudaMemcpyAsyncQuery::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cudaMemcpyAsyncQuery::payload() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaMemcpyAsyncQuery.payload)
  return payload_.GetNoArena();
}
inline void cudaMemcpyAsyncQuery::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cudaMemcpyAsyncQuery.payload)
}
#if LANG_CXX11
inline void cudaMemcpyAsyncQuery::set_payload(::std::string&& value) {
  
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cudaMemcpyAsyncQuery.payload)
}
#endif
inline void cudaMemcpyAsyncQuery::set_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cudaMemcpyAsyncQuery.payload)
}
inline void cudaMemcpyAsyncQuery::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cudaMemcpyAsyncQuery.payload)
}
inline ::std::string* cudaMemcpyAsyncQuery::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cudaMemcpyAsyncQuery.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cudaMemcpyAsyncQuery::release_payload() {
  // @@protoc_insertion_point(field_release:cudarpc.cudaMemcpyAsyncQuery.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cudaMemcpyAsyncQuery::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cudaMemcpyAsyncQuery.payload)
}

// bytes stream = 6;
inline void cudaMemcpyAsyncQuery::clear_stream() {
  stream_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cudaMemcpyAsyncQuery::stream() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaMemcpyAsyncQuery.stream)
  return stream_.GetNoArena();
}
inline void cudaMemcpyAsyncQuery::set_stream(const ::std::string& value) {
  
  stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cudaMemcpyAsyncQuery.stream)
}
#if LANG_CXX11
inline void cudaMemcpyAsyncQuery::set_stream(::std::string&& value) {
  
  stream_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cudaMemcpyAsyncQuery.stream)
}
#endif
inline void cudaMemcpyAsyncQuery::set_stream(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cudaMemcpyAsyncQuery.stream)
}
inline void cudaMemcpyAsyncQuery::set_stream(const void* value, size_t size) {
  
  stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cudaMemcpyAsyncQuery.stream)
}
inline ::std::string* cudaMemcpyAsyncQuery::mutable_stream() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cudaMemcpyAsyncQuery.stream)
  return stream_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cudaMemcpyAsyncQuery::release_stream() {
  // @@protoc_insertion_point(field_release:cudarpc.cudaMemcpyAsyncQuery.stream)
  
  return stream_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cudaMemcpyAsyncQuery::set_allocated_stream(::std::string* stream) {
  if (stream != NULL) {
    
  } else {
    
  }
  stream_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cudaMemcpyAsyncQuery.stream)
}

// -------------------------------------------------------------------

// cudaGetSymbolAddressQuery

// uint64 symbol = 1;
inline void cudaGetSymbolAddressQuery::clear_symbol() {
  symbol_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 cudaGetSymbolAddressQuery::symbol() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaGetSymbolAddressQuery.symbol)
  return symbol_;
}
inline void cudaGetSymbolAddressQuery::set_symbol(::google::protobuf::uint64 value) {
  
  symbol_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaGetSymbolAddressQuery.symbol)
}

// -------------------------------------------------------------------

// cudaGetSymbolAddressResponse

// int32 error = 1;
inline void cudaGetSymbolAddressResponse::clear_error() {
  error_ = 0;
}
inline ::google::protobuf::int32 cudaGetSymbolAddressResponse::error() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaGetSymbolAddressResponse.error)
  return error_;
}
inline void cudaGetSymbolAddressResponse::set_error(::google::protobuf::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaGetSymbolAddressResponse.error)
}

// uint64 ptr = 2;
inline void cudaGetSymbolAddressResponse::clear_ptr() {
  ptr_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 cudaGetSymbolAddressResponse::ptr() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaGetSymbolAddressResponse.ptr)
  return ptr_;
}
inline void cudaGetSymbolAddressResponse::set_ptr(::google::protobuf::uint64 value) {
  
  ptr_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaGetSymbolAddressResponse.ptr)
}

// -------------------------------------------------------------------

// cudaMemcpyAsyncResponse

// uint64 ptr = 1;
inline void cudaMemcpyAsyncResponse::clear_ptr() {
  ptr_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 cudaMemcpyAsyncResponse::ptr() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaMemcpyAsyncResponse.ptr)
  return ptr_;
}
inline void cudaMemcpyAsyncResponse::set_ptr(::google::protobuf::uint64 value) {
  
  ptr_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaMemcpyAsyncResponse.ptr)
}

// bytes payload = 2;
inline void cudaMemcpyAsyncResponse::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cudaMemcpyAsyncResponse::payload() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaMemcpyAsyncResponse.payload)
  return payload_.GetNoArena();
}
inline void cudaMemcpyAsyncResponse::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cudaMemcpyAsyncResponse.payload)
}
#if LANG_CXX11
inline void cudaMemcpyAsyncResponse::set_payload(::std::string&& value) {
  
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cudaMemcpyAsyncResponse.payload)
}
#endif
inline void cudaMemcpyAsyncResponse::set_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cudaMemcpyAsyncResponse.payload)
}
inline void cudaMemcpyAsyncResponse::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cudaMemcpyAsyncResponse.payload)
}
inline ::std::string* cudaMemcpyAsyncResponse::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cudaMemcpyAsyncResponse.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cudaMemcpyAsyncResponse::release_payload() {
  // @@protoc_insertion_point(field_release:cudarpc.cudaMemcpyAsyncResponse.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cudaMemcpyAsyncResponse::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cudaMemcpyAsyncResponse.payload)
}

// -------------------------------------------------------------------

// cudaMemsetAsyncQuery

// uint64 ptr = 1;
inline void cudaMemsetAsyncQuery::clear_ptr() {
  ptr_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 cudaMemsetAsyncQuery::ptr() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaMemsetAsyncQuery.ptr)
  return ptr_;
}
inline void cudaMemsetAsyncQuery::set_ptr(::google::protobuf::uint64 value) {
  
  ptr_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaMemsetAsyncQuery.ptr)
}

// int32 value = 2;
inline void cudaMemsetAsyncQuery::clear_value() {
  value_ = 0;
}
inline ::google::protobuf::int32 cudaMemsetAsyncQuery::value() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaMemsetAsyncQuery.value)
  return value_;
}
inline void cudaMemsetAsyncQuery::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaMemsetAsyncQuery.value)
}

// uint64 count = 3;
inline void cudaMemsetAsyncQuery::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 cudaMemsetAsyncQuery::count() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaMemsetAsyncQuery.count)
  return count_;
}
inline void cudaMemsetAsyncQuery::set_count(::google::protobuf::uint64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaMemsetAsyncQuery.count)
}

// bytes stream = 4;
inline void cudaMemsetAsyncQuery::clear_stream() {
  stream_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cudaMemsetAsyncQuery::stream() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaMemsetAsyncQuery.stream)
  return stream_.GetNoArena();
}
inline void cudaMemsetAsyncQuery::set_stream(const ::std::string& value) {
  
  stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cudaMemsetAsyncQuery.stream)
}
#if LANG_CXX11
inline void cudaMemsetAsyncQuery::set_stream(::std::string&& value) {
  
  stream_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cudaMemsetAsyncQuery.stream)
}
#endif
inline void cudaMemsetAsyncQuery::set_stream(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cudaMemsetAsyncQuery.stream)
}
inline void cudaMemsetAsyncQuery::set_stream(const void* value, size_t size) {
  
  stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cudaMemsetAsyncQuery.stream)
}
inline ::std::string* cudaMemsetAsyncQuery::mutable_stream() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cudaMemsetAsyncQuery.stream)
  return stream_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cudaMemsetAsyncQuery::release_stream() {
  // @@protoc_insertion_point(field_release:cudarpc.cudaMemsetAsyncQuery.stream)
  
  return stream_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cudaMemsetAsyncQuery::set_allocated_stream(::std::string* stream) {
  if (stream != NULL) {
    
  } else {
    
  }
  stream_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cudaMemsetAsyncQuery.stream)
}

// -------------------------------------------------------------------

// AsyncResponse

// int32 error = 1;
inline void AsyncResponse::clear_error() {
  error_ = 0;
}
inline ::google::protobuf::int32 AsyncResponse::error() const {
  // @@protoc_insertion_point(field_get:cudarpc.AsyncResponse.error)
  return error_;
}
inline void AsyncResponse::set_error(::google::protobuf::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.AsyncResponse.error)
}

// repeated .cudarpc.cudaMemcpyAsyncResponse responses = 2;
inline int AsyncResponse::responses_size() const {
  return responses_.size();
}
inline void AsyncResponse::clear_responses() {
  responses_.Clear();
}
inline ::cudarpc::cudaMemcpyAsyncResponse* AsyncResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:cudarpc.AsyncResponse.responses)
  return responses_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cudarpc::cudaMemcpyAsyncResponse >*
AsyncResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:cudarpc.AsyncResponse.responses)
  return &responses_;
}
inline const ::cudarpc::cudaMemcpyAsyncResponse& AsyncResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:cudarpc.AsyncResponse.responses)
  return responses_.Get(index);
}
inline ::cudarpc::cudaMemcpyAsyncResponse* AsyncResponse::add_responses() {
  // @@protoc_insertion_point(field_add:cudarpc.AsyncResponse.responses)
  return responses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cudarpc::cudaMemcpyAsyncResponse >&
AsyncResponse::responses() const {
  // @@protoc_insertion_point(field_list:cudarpc.AsyncResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// cudaStreamCreateWithFlagsQuery

// uint32 flags = 1;
inline void cudaStreamCreateWithFlagsQuery::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 cudaStreamCreateWithFlagsQuery::flags() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaStreamCreateWithFlagsQuery.flags)
  return flags_;
}
inline void cudaStreamCreateWithFlagsQuery::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaStreamCreateWithFlagsQuery.flags)
}

// -------------------------------------------------------------------

// cudaStreamCreateWithPriorityQuery

// uint32 flags = 1;
inline void cudaStreamCreateWithPriorityQuery::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 cudaStreamCreateWithPriorityQuery::flags() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaStreamCreateWithPriorityQuery.flags)
  return flags_;
}
inline void cudaStreamCreateWithPriorityQuery::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaStreamCreateWithPriorityQuery.flags)
}

// int32 priority = 2;
inline void cudaStreamCreateWithPriorityQuery::clear_priority() {
  priority_ = 0;
}
inline ::google::protobuf::int32 cudaStreamCreateWithPriorityQuery::priority() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaStreamCreateWithPriorityQuery.priority)
  return priority_;
}
inline void cudaStreamCreateWithPriorityQuery::set_priority(::google::protobuf::int32 value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaStreamCreateWithPriorityQuery.priority)
}

// -------------------------------------------------------------------

// cudaStreamCreateResponse

// int32 error = 1;
inline void cudaStreamCreateResponse::clear_error() {
  error_ = 0;
}
inline ::google::protobuf::int32 cudaStreamCreateResponse::error() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaStreamCreateResponse.error)
  return error_;
}
inline void cudaStreamCreateResponse::set_error(::google::protobuf::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaStreamCreateResponse.error)
}

// bytes stream = 2;
inline void cudaStreamCreateResponse::clear_stream() {
  stream_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cudaStreamCreateResponse::stream() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaStreamCreateResponse.stream)
  return stream_.GetNoArena();
}
inline void cudaStreamCreateResponse::set_stream(const ::std::string& value) {
  
  stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cudaStreamCreateResponse.stream)
}
#if LANG_CXX11
inline void cudaStreamCreateResponse::set_stream(::std::string&& value) {
  
  stream_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cudaStreamCreateResponse.stream)
}
#endif
inline void cudaStreamCreateResponse::set_stream(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cudaStreamCreateResponse.stream)
}
inline void cudaStreamCreateResponse::set_stream(const void* value, size_t size) {
  
  stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cudaStreamCreateResponse.stream)
}
inline ::std::string* cudaStreamCreateResponse::mutable_stream() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cudaStreamCreateResponse.stream)
  return stream_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cudaStreamCreateResponse::release_stream() {
  // @@protoc_insertion_point(field_release:cudarpc.cudaStreamCreateResponse.stream)
  
  return stream_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cudaStreamCreateResponse::set_allocated_stream(::std::string* stream) {
  if (stream != NULL) {
    
  } else {
    
  }
  stream_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cudaStreamCreateResponse.stream)
}

// -------------------------------------------------------------------

// cudaStreamIsCapturingResponse

// int32 error = 1;
inline void cudaStreamIsCapturingResponse::clear_error() {
  error_ = 0;
}
inline ::google::protobuf::int32 cudaStreamIsCapturingResponse::error() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaStreamIsCapturingResponse.error)
  return error_;
}
inline void cudaStreamIsCapturingResponse::set_error(::google::protobuf::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaStreamIsCapturingResponse.error)
}

// int32 status = 2;
inline void cudaStreamIsCapturingResponse::clear_status() {
  status_ = 0;
}
inline ::google::protobuf::int32 cudaStreamIsCapturingResponse::status() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaStreamIsCapturingResponse.status)
  return status_;
}
inline void cudaStreamIsCapturingResponse::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaStreamIsCapturingResponse.status)
}

// -------------------------------------------------------------------

// cudaStreamGetCaptureInfoResponse

// int32 error = 1;
inline void cudaStreamGetCaptureInfoResponse::clear_error() {
  error_ = 0;
}
inline ::google::protobuf::int32 cudaStreamGetCaptureInfoResponse::error() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaStreamGetCaptureInfoResponse.error)
  return error_;
}
inline void cudaStreamGetCaptureInfoResponse::set_error(::google::protobuf::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaStreamGetCaptureInfoResponse.error)
}

// int32 status = 2;
inline void cudaStreamGetCaptureInfoResponse::clear_status() {
  status_ = 0;
}
inline ::google::protobuf::int32 cudaStreamGetCaptureInfoResponse::status() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaStreamGetCaptureInfoResponse.status)
  return status_;
}
inline void cudaStreamGetCaptureInfoResponse::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaStreamGetCaptureInfoResponse.status)
}

// uint64 pid = 3;
inline void cudaStreamGetCaptureInfoResponse::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 cudaStreamGetCaptureInfoResponse::pid() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaStreamGetCaptureInfoResponse.pid)
  return pid_;
}
inline void cudaStreamGetCaptureInfoResponse::set_pid(::google::protobuf::uint64 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaStreamGetCaptureInfoResponse.pid)
}

// -------------------------------------------------------------------

// cudaEventCreateWithFlagsQuery

// uint32 flags = 1;
inline void cudaEventCreateWithFlagsQuery::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 cudaEventCreateWithFlagsQuery::flags() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaEventCreateWithFlagsQuery.flags)
  return flags_;
}
inline void cudaEventCreateWithFlagsQuery::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaEventCreateWithFlagsQuery.flags)
}

// -------------------------------------------------------------------

// cudaEventCreateWithFlagsResponse

// int32 error = 1;
inline void cudaEventCreateWithFlagsResponse::clear_error() {
  error_ = 0;
}
inline ::google::protobuf::int32 cudaEventCreateWithFlagsResponse::error() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaEventCreateWithFlagsResponse.error)
  return error_;
}
inline void cudaEventCreateWithFlagsResponse::set_error(::google::protobuf::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaEventCreateWithFlagsResponse.error)
}

// bytes event = 2;
inline void cudaEventCreateWithFlagsResponse::clear_event() {
  event_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cudaEventCreateWithFlagsResponse::event() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaEventCreateWithFlagsResponse.event)
  return event_.GetNoArena();
}
inline void cudaEventCreateWithFlagsResponse::set_event(const ::std::string& value) {
  
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cudaEventCreateWithFlagsResponse.event)
}
#if LANG_CXX11
inline void cudaEventCreateWithFlagsResponse::set_event(::std::string&& value) {
  
  event_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cudaEventCreateWithFlagsResponse.event)
}
#endif
inline void cudaEventCreateWithFlagsResponse::set_event(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cudaEventCreateWithFlagsResponse.event)
}
inline void cudaEventCreateWithFlagsResponse::set_event(const void* value, size_t size) {
  
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cudaEventCreateWithFlagsResponse.event)
}
inline ::std::string* cudaEventCreateWithFlagsResponse::mutable_event() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cudaEventCreateWithFlagsResponse.event)
  return event_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cudaEventCreateWithFlagsResponse::release_event() {
  // @@protoc_insertion_point(field_release:cudarpc.cudaEventCreateWithFlagsResponse.event)
  
  return event_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cudaEventCreateWithFlagsResponse::set_allocated_event(::std::string* event) {
  if (event != NULL) {
    
  } else {
    
  }
  event_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cudaEventCreateWithFlagsResponse.event)
}

// -------------------------------------------------------------------

// cudaEventRecordQuery

// bytes event = 1;
inline void cudaEventRecordQuery::clear_event() {
  event_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cudaEventRecordQuery::event() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaEventRecordQuery.event)
  return event_.GetNoArena();
}
inline void cudaEventRecordQuery::set_event(const ::std::string& value) {
  
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cudaEventRecordQuery.event)
}
#if LANG_CXX11
inline void cudaEventRecordQuery::set_event(::std::string&& value) {
  
  event_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cudaEventRecordQuery.event)
}
#endif
inline void cudaEventRecordQuery::set_event(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cudaEventRecordQuery.event)
}
inline void cudaEventRecordQuery::set_event(const void* value, size_t size) {
  
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cudaEventRecordQuery.event)
}
inline ::std::string* cudaEventRecordQuery::mutable_event() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cudaEventRecordQuery.event)
  return event_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cudaEventRecordQuery::release_event() {
  // @@protoc_insertion_point(field_release:cudarpc.cudaEventRecordQuery.event)
  
  return event_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cudaEventRecordQuery::set_allocated_event(::std::string* event) {
  if (event != NULL) {
    
  } else {
    
  }
  event_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cudaEventRecordQuery.event)
}

// bytes stream = 2;
inline void cudaEventRecordQuery::clear_stream() {
  stream_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cudaEventRecordQuery::stream() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaEventRecordQuery.stream)
  return stream_.GetNoArena();
}
inline void cudaEventRecordQuery::set_stream(const ::std::string& value) {
  
  stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cudaEventRecordQuery.stream)
}
#if LANG_CXX11
inline void cudaEventRecordQuery::set_stream(::std::string&& value) {
  
  stream_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cudaEventRecordQuery.stream)
}
#endif
inline void cudaEventRecordQuery::set_stream(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cudaEventRecordQuery.stream)
}
inline void cudaEventRecordQuery::set_stream(const void* value, size_t size) {
  
  stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cudaEventRecordQuery.stream)
}
inline ::std::string* cudaEventRecordQuery::mutable_stream() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cudaEventRecordQuery.stream)
  return stream_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cudaEventRecordQuery::release_stream() {
  // @@protoc_insertion_point(field_release:cudarpc.cudaEventRecordQuery.stream)
  
  return stream_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cudaEventRecordQuery::set_allocated_stream(::std::string* stream) {
  if (stream != NULL) {
    
  } else {
    
  }
  stream_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cudaEventRecordQuery.stream)
}

// -------------------------------------------------------------------

// cudaLaunchKernelQuery

// string function = 1;
inline void cudaLaunchKernelQuery::clear_function() {
  function_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cudaLaunchKernelQuery::function() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaLaunchKernelQuery.function)
  return function_.GetNoArena();
}
inline void cudaLaunchKernelQuery::set_function(const ::std::string& value) {
  
  function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cudaLaunchKernelQuery.function)
}
#if LANG_CXX11
inline void cudaLaunchKernelQuery::set_function(::std::string&& value) {
  
  function_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cudaLaunchKernelQuery.function)
}
#endif
inline void cudaLaunchKernelQuery::set_function(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cudaLaunchKernelQuery.function)
}
inline void cudaLaunchKernelQuery::set_function(const char* value, size_t size) {
  
  function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cudaLaunchKernelQuery.function)
}
inline ::std::string* cudaLaunchKernelQuery::mutable_function() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cudaLaunchKernelQuery.function)
  return function_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cudaLaunchKernelQuery::release_function() {
  // @@protoc_insertion_point(field_release:cudarpc.cudaLaunchKernelQuery.function)
  
  return function_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cudaLaunchKernelQuery::set_allocated_function(::std::string* function) {
  if (function != NULL) {
    
  } else {
    
  }
  function_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), function);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cudaLaunchKernelQuery.function)
}

// uint32 grid_dim_x = 2;
inline void cudaLaunchKernelQuery::clear_grid_dim_x() {
  grid_dim_x_ = 0u;
}
inline ::google::protobuf::uint32 cudaLaunchKernelQuery::grid_dim_x() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaLaunchKernelQuery.grid_dim_x)
  return grid_dim_x_;
}
inline void cudaLaunchKernelQuery::set_grid_dim_x(::google::protobuf::uint32 value) {
  
  grid_dim_x_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaLaunchKernelQuery.grid_dim_x)
}

// uint32 grid_dim_y = 3;
inline void cudaLaunchKernelQuery::clear_grid_dim_y() {
  grid_dim_y_ = 0u;
}
inline ::google::protobuf::uint32 cudaLaunchKernelQuery::grid_dim_y() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaLaunchKernelQuery.grid_dim_y)
  return grid_dim_y_;
}
inline void cudaLaunchKernelQuery::set_grid_dim_y(::google::protobuf::uint32 value) {
  
  grid_dim_y_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaLaunchKernelQuery.grid_dim_y)
}

// uint32 grid_dim_z = 4;
inline void cudaLaunchKernelQuery::clear_grid_dim_z() {
  grid_dim_z_ = 0u;
}
inline ::google::protobuf::uint32 cudaLaunchKernelQuery::grid_dim_z() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaLaunchKernelQuery.grid_dim_z)
  return grid_dim_z_;
}
inline void cudaLaunchKernelQuery::set_grid_dim_z(::google::protobuf::uint32 value) {
  
  grid_dim_z_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaLaunchKernelQuery.grid_dim_z)
}

// uint32 block_dim_x = 5;
inline void cudaLaunchKernelQuery::clear_block_dim_x() {
  block_dim_x_ = 0u;
}
inline ::google::protobuf::uint32 cudaLaunchKernelQuery::block_dim_x() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaLaunchKernelQuery.block_dim_x)
  return block_dim_x_;
}
inline void cudaLaunchKernelQuery::set_block_dim_x(::google::protobuf::uint32 value) {
  
  block_dim_x_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaLaunchKernelQuery.block_dim_x)
}

// uint32 block_dim_y = 6;
inline void cudaLaunchKernelQuery::clear_block_dim_y() {
  block_dim_y_ = 0u;
}
inline ::google::protobuf::uint32 cudaLaunchKernelQuery::block_dim_y() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaLaunchKernelQuery.block_dim_y)
  return block_dim_y_;
}
inline void cudaLaunchKernelQuery::set_block_dim_y(::google::protobuf::uint32 value) {
  
  block_dim_y_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaLaunchKernelQuery.block_dim_y)
}

// uint32 block_dim_z = 7;
inline void cudaLaunchKernelQuery::clear_block_dim_z() {
  block_dim_z_ = 0u;
}
inline ::google::protobuf::uint32 cudaLaunchKernelQuery::block_dim_z() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaLaunchKernelQuery.block_dim_z)
  return block_dim_z_;
}
inline void cudaLaunchKernelQuery::set_block_dim_z(::google::protobuf::uint32 value) {
  
  block_dim_z_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaLaunchKernelQuery.block_dim_z)
}

// repeated bytes args = 8;
inline int cudaLaunchKernelQuery::args_size() const {
  return args_.size();
}
inline void cudaLaunchKernelQuery::clear_args() {
  args_.Clear();
}
inline const ::std::string& cudaLaunchKernelQuery::args(int index) const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaLaunchKernelQuery.args)
  return args_.Get(index);
}
inline ::std::string* cudaLaunchKernelQuery::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:cudarpc.cudaLaunchKernelQuery.args)
  return args_.Mutable(index);
}
inline void cudaLaunchKernelQuery::set_args(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cudarpc.cudaLaunchKernelQuery.args)
  args_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void cudaLaunchKernelQuery::set_args(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:cudarpc.cudaLaunchKernelQuery.args)
  args_.Mutable(index)->assign(std::move(value));
}
#endif
inline void cudaLaunchKernelQuery::set_args(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cudarpc.cudaLaunchKernelQuery.args)
}
inline void cudaLaunchKernelQuery::set_args(int index, const void* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cudaLaunchKernelQuery.args)
}
inline ::std::string* cudaLaunchKernelQuery::add_args() {
  // @@protoc_insertion_point(field_add_mutable:cudarpc.cudaLaunchKernelQuery.args)
  return args_.Add();
}
inline void cudaLaunchKernelQuery::add_args(const ::std::string& value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cudarpc.cudaLaunchKernelQuery.args)
}
#if LANG_CXX11
inline void cudaLaunchKernelQuery::add_args(::std::string&& value) {
  args_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cudarpc.cudaLaunchKernelQuery.args)
}
#endif
inline void cudaLaunchKernelQuery::add_args(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cudarpc.cudaLaunchKernelQuery.args)
}
inline void cudaLaunchKernelQuery::add_args(const void* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cudarpc.cudaLaunchKernelQuery.args)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
cudaLaunchKernelQuery::args() const {
  // @@protoc_insertion_point(field_list:cudarpc.cudaLaunchKernelQuery.args)
  return args_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
cudaLaunchKernelQuery::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:cudarpc.cudaLaunchKernelQuery.args)
  return &args_;
}

// uint64 shared_mem = 9;
inline void cudaLaunchKernelQuery::clear_shared_mem() {
  shared_mem_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 cudaLaunchKernelQuery::shared_mem() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaLaunchKernelQuery.shared_mem)
  return shared_mem_;
}
inline void cudaLaunchKernelQuery::set_shared_mem(::google::protobuf::uint64 value) {
  
  shared_mem_ = value;
  // @@protoc_insertion_point(field_set:cudarpc.cudaLaunchKernelQuery.shared_mem)
}

// bytes stream = 10;
inline void cudaLaunchKernelQuery::clear_stream() {
  stream_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cudaLaunchKernelQuery::stream() const {
  // @@protoc_insertion_point(field_get:cudarpc.cudaLaunchKernelQuery.stream)
  return stream_.GetNoArena();
}
inline void cudaLaunchKernelQuery::set_stream(const ::std::string& value) {
  
  stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cudarpc.cudaLaunchKernelQuery.stream)
}
#if LANG_CXX11
inline void cudaLaunchKernelQuery::set_stream(::std::string&& value) {
  
  stream_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cudarpc.cudaLaunchKernelQuery.stream)
}
#endif
inline void cudaLaunchKernelQuery::set_stream(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cudarpc.cudaLaunchKernelQuery.stream)
}
inline void cudaLaunchKernelQuery::set_stream(const void* value, size_t size) {
  
  stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cudarpc.cudaLaunchKernelQuery.stream)
}
inline ::std::string* cudaLaunchKernelQuery::mutable_stream() {
  
  // @@protoc_insertion_point(field_mutable:cudarpc.cudaLaunchKernelQuery.stream)
  return stream_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cudaLaunchKernelQuery::release_stream() {
  // @@protoc_insertion_point(field_release:cudarpc.cudaLaunchKernelQuery.stream)
  
  return stream_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cudaLaunchKernelQuery::set_allocated_stream(::std::string* stream) {
  if (stream != NULL) {
    
  } else {
    
  }
  stream_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream);
  // @@protoc_insertion_point(field_set_allocated:cudarpc.cudaLaunchKernelQuery.stream)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cudarpc

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::cudarpc::QueryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cudarpc::QueryType>() {
  return ::cudarpc::QueryType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_cudarpc_2eproto
